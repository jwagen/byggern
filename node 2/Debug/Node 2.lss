
Node 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800200  00000a70  00000b04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800302  00800302  00000c06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001081  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000875  00000000  00000000  00001e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ac9  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002dc  00000000  00000000  000031b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003db  00000000  00000000  00003490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000561  00000000  00000000  0000386b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00003dcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e7       	ldi	r30, 0x70	; 112
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 30       	cpi	r26, 0x09	; 9
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	86 d0       	rcall	.+268    	; 0x22c <main>
 120:	a5 c4       	rjmp	.+2378   	; 0xa6c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <adc_init>:
#include <util/delay.h>


void adc_init(void){
	//Use avcc as vref
	ADMUX |= (1<<REFS0);
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	
	
	
	//Set prescaler to 128
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	87 60       	ori	r24, 0x07	; 7
 136:	80 83       	st	Z, r24
	
	//Set ADC auto triger mode
	ADCSRA |= (1<<ADATE);
 138:	80 81       	ld	r24, Z
 13a:	80 62       	ori	r24, 0x20	; 32
 13c:	80 83       	st	Z, r24
	
	
	//Turn on adc, start conversion
	ADCSRA |= (1<<ADEN) | (1<<ADSC);
 13e:	80 81       	ld	r24, Z
 140:	80 6c       	ori	r24, 0xC0	; 192
 142:	80 83       	st	Z, r24
 144:	08 95       	ret

00000146 <adc_read>:
	 
}

uint16_t adc_read(uint8_t channel){
	return ADC;
 146:	80 91 78 00 	lds	r24, 0x0078
 14a:	90 91 79 00 	lds	r25, 0x0079
 14e:	08 95       	ret

00000150 <__vector_3>:
	}
	
	//Send request to send
	mcp2515_rts(1);
	
}
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 02 03 	sts	0x0302, r24
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <can_init>:
 16e:	03 d1       	rcall	.+518    	; 0x376 <mcp2515_init>
 170:	35 d1       	rcall	.+618    	; 0x3dc <mcp2515_reset>
 172:	60 e6       	ldi	r22, 0x60	; 96
 174:	80 e6       	ldi	r24, 0x60	; 96
 176:	0f d1       	rcall	.+542    	; 0x396 <mcp2515_write>
 178:	63 e0       	ldi	r22, 0x03	; 3
 17a:	8b e2       	ldi	r24, 0x2B	; 43
 17c:	0c d1       	rcall	.+536    	; 0x396 <mcp2515_write>
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	8f e0       	ldi	r24, 0x0F	; 15
 182:	09 d1       	rcall	.+530    	; 0x396 <mcp2515_write>
 184:	e9 e6       	ldi	r30, 0x69	; 105
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	80 62       	ori	r24, 0x20	; 32
 18c:	80 83       	st	Z, r24
 18e:	ea 9a       	sbi	0x1d, 2	; 29
 190:	08 95       	ret

00000192 <can_recive>:

void can_recive(can_message_t *message){
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	//Read id
	message->id = mcp2515_read(RXB0SIDH) << 3;
 19c:	81 e6       	ldi	r24, 0x61	; 97
 19e:	ed d0       	rcall	.+474    	; 0x37a <mcp2515_read>
 1a0:	98 e0       	ldi	r25, 0x08	; 8
 1a2:	89 9f       	mul	r24, r25
 1a4:	80 01       	movw	r16, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	19 83       	std	Y+1, r17	; 0x01
 1aa:	08 83       	st	Y, r16
	message->id |= (7 & (mcp2515_read(RXB0SIDL) >> 5)) ;
 1ac:	82 e6       	ldi	r24, 0x62	; 98
 1ae:	e5 d0       	rcall	.+458    	; 0x37a <mcp2515_read>
 1b0:	82 95       	swap	r24
 1b2:	86 95       	lsr	r24
 1b4:	87 70       	andi	r24, 0x07	; 7
 1b6:	08 2b       	or	r16, r24
 1b8:	19 83       	std	Y+1, r17	; 0x01
 1ba:	08 83       	st	Y, r16

	
	//Read length
	message->length = 0x0f & mcp2515_read(RXB0DLC);
 1bc:	85 e6       	ldi	r24, 0x65	; 101
 1be:	dd d0       	rcall	.+442    	; 0x37a <mcp2515_read>
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	8a 83       	std	Y+2, r24	; 0x02
	
	//Read data
	for (uint8_t i = 0; i < message->length; i++){
 1c4:	88 23       	and	r24, r24
 1c6:	61 f0       	breq	.+24     	; 0x1e0 <can_recive+0x4e>
 1c8:	10 e0       	ldi	r17, 0x00	; 0
		message->data[i] = mcp2515_read(RXB0D0+i);
 1ca:	86 e6       	ldi	r24, 0x66	; 102
 1cc:	81 0f       	add	r24, r17
 1ce:	d5 d0       	rcall	.+426    	; 0x37a <mcp2515_read>
 1d0:	fe 01       	movw	r30, r28
 1d2:	e1 0f       	add	r30, r17
 1d4:	f1 1d       	adc	r31, r1
 1d6:	83 83       	std	Z+3, r24	; 0x03
	
	//Read length
	message->length = 0x0f & mcp2515_read(RXB0DLC);
	
	//Read data
	for (uint8_t i = 0; i < message->length; i++){
 1d8:	1f 5f       	subi	r17, 0xFF	; 255
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	18 17       	cp	r17, r24
 1de:	a8 f3       	brcs	.-22     	; 0x1ca <can_recive+0x38>
	
	//Clear interrupt flags
// 	mcp2515_write(CANINTF, 0x00);
// 	mcp2515_write(CANINTF, 0x00);

	mcp2515_bit_modify(CANINTF, 0x01, 0x00);
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	8c e2       	ldi	r24, 0x2C	; 44
 1e6:	e6 d0       	rcall	.+460    	; 0x3b4 <mcp2515_bit_modify>
	mcp2515_bit_modify(CANINTF, 0x01, 0x00);
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	8c e2       	ldi	r24, 0x2C	; 44
 1ee:	e2 d0       	rcall	.+452    	; 0x3b4 <mcp2515_bit_modify>
	printf("Can interrupt flags = %02x | ", mcp2515_read(CANINTF));
 1f0:	8c e2       	ldi	r24, 0x2C	; 44
 1f2:	c3 d0       	rcall	.+390    	; 0x37a <mcp2515_read>
 1f4:	1f 92       	push	r1
 1f6:	8f 93       	push	r24
 1f8:	8e e0       	ldi	r24, 0x0E	; 14
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	9f 93       	push	r25
 1fe:	8f 93       	push	r24
 200:	63 d1       	rcall	.+710    	; 0x4c8 <printf>
	can_message_available_var = 0;	
 202:	10 92 02 03 	sts	0x0302, r1
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
/*	return message;*/
	
	
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <board_init>:
#include "adc.h"

static const uint16_t beam_threshold = 50;

void board_init(){
	adc_init();
 218:	85 cf       	rjmp	.-246    	; 0x124 <adc_init>
 21a:	08 95       	ret

0000021c <board_get_ball_status>:
}

//Returns one if ball is down
uint8_t board_get_ball_status(){
	uint16_t reading = adc_read(0);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	93 df       	rcall	.-218    	; 0x146 <adc_read>
	if(reading < beam_threshold){
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	c2 97       	sbiw	r24, 0x32	; 50
 224:	08 f0       	brcs	.+2      	; 0x228 <board_get_ball_status+0xc>
 226:	20 e0       	ldi	r18, 0x00	; 0
	
	else {
		return 0;
	}
	
 228:	82 2f       	mov	r24, r18
 22a:	08 95       	ret

0000022c <main>:
#include <avr/interrupt.h>



int main(void)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	2b 97       	sbiw	r28, 0x0b	; 11
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
	
	uart_init();
 240:	2c d1       	rcall	.+600    	; 0x49a <uart_init>
	can_init();
 242:	95 df       	rcall	.-214    	; 0x16e <can_init>
	servo_init();
 244:	d0 d0       	rcall	.+416    	; 0x3e6 <servo_init>
	board_init();
 246:	e8 df       	rcall	.-48     	; 0x218 <board_init>

	sei();
 248:	78 94       	sei


	printf("Init done\n");
 24a:	8c e2       	ldi	r24, 0x2C	; 44
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	4d d1       	rcall	.+666    	; 0x4ea <puts>
	
	can_message_t joystick_request;
	can_message_t r = {.id = 0};
 250:	fe 01       	movw	r30, r28
 252:	31 96       	adiw	r30, 0x01	; 1
 254:	8b e0       	ldi	r24, 0x0B	; 11
 256:	df 01       	movw	r26, r30
 258:	1d 92       	st	X+, r1
 25a:	8a 95       	dec	r24
 25c:	e9 f7       	brne	.-6      	; 0x258 <main+0x2c>


	servo_set_pos(128);
 25e:	80 e8       	ldi	r24, 0x80	; 128
 260:	da d0       	rcall	.+436    	; 0x416 <servo_set_pos>
// 
// 		printf("Can available = %d | ", can_message_available());
// 		printf("INT2 status = %d | ", !!(PIND & (1<<PD2)));
// 		//Interupt does not work, Can transceiver does not toggle int pin

 		printf("Error message = %02x | ", mcp2515_read(EFLG));
 262:	0f 2e       	mov	r0, r31
 264:	f6 e3       	ldi	r31, 0x36	; 54
 266:	8f 2e       	mov	r8, r31
 268:	f2 e0       	ldi	r31, 0x02	; 2
 26a:	9f 2e       	mov	r9, r31
 26c:	f0 2d       	mov	r31, r0
 		printf("Receive error counter = %02x | ", mcp2515_read(REC));
 26e:	0f 2e       	mov	r0, r31
 270:	fe e4       	ldi	r31, 0x4E	; 78
 272:	af 2e       	mov	r10, r31
 274:	f2 e0       	ldi	r31, 0x02	; 2
 276:	bf 2e       	mov	r11, r31
 278:	f0 2d       	mov	r31, r0
 		printf("Transmit error counter = %02x | ", mcp2515_read(TEC));
 27a:	0f 2e       	mov	r0, r31
 27c:	fe e6       	ldi	r31, 0x6E	; 110
 27e:	cf 2e       	mov	r12, r31
 280:	f2 e0       	ldi	r31, 0x02	; 2
 282:	df 2e       	mov	r13, r31
 284:	f0 2d       	mov	r31, r0
		printf("Can interrupt flags = %02x | ", mcp2515_read(CANINTF));
 286:	0f 2e       	mov	r0, r31
 288:	fe e0       	ldi	r31, 0x0E	; 14
 28a:	ef 2e       	mov	r14, r31
 28c:	f2 e0       	ldi	r31, 0x02	; 2
 28e:	ff 2e       	mov	r15, r31
 290:	f0 2d       	mov	r31, r0
		printf("Can status = %02x | ", mcp2515_read(CANSTAT));
 292:	0f e8       	ldi	r16, 0x8F	; 143
 294:	12 e0       	ldi	r17, 0x02	; 2
		printf("CAN interupt enable = %02x | ", mcp2515_read(CANINTE));
 296:	0f 2e       	mov	r0, r31
 298:	f4 ea       	ldi	r31, 0xA4	; 164
 29a:	6f 2e       	mov	r6, r31
 29c:	f2 e0       	ldi	r31, 0x02	; 2
 29e:	7f 2e       	mov	r7, r31
 2a0:	f0 2d       	mov	r31, r0


// // 		if(can_message_available()){
		if(1){
			can_recive(&r);
			printf("Received id = %d | ", r.id);
 2a2:	0f 2e       	mov	r0, r31
 2a4:	f2 ec       	ldi	r31, 0xC2	; 194
 2a6:	4f 2e       	mov	r4, r31
 2a8:	f2 e0       	ldi	r31, 0x02	; 2
 2aa:	5f 2e       	mov	r5, r31
 2ac:	f0 2d       	mov	r31, r0
			printf("Joystick pos = %d \n", (int8_t)r.data[0]);
 2ae:	0f 2e       	mov	r0, r31
 2b0:	f6 ed       	ldi	r31, 0xD6	; 214
 2b2:	2f 2e       	mov	r2, r31
 2b4:	f2 e0       	ldi	r31, 0x02	; 2
 2b6:	3f 2e       	mov	r3, r31
 2b8:	f0 2d       	mov	r31, r0
// 
// 		printf("Can available = %d | ", can_message_available());
// 		printf("INT2 status = %d | ", !!(PIND & (1<<PD2)));
// 		//Interupt does not work, Can transceiver does not toggle int pin

 		printf("Error message = %02x | ", mcp2515_read(EFLG));
 2ba:	8d e2       	ldi	r24, 0x2D	; 45
 2bc:	5e d0       	rcall	.+188    	; 0x37a <mcp2515_read>
 2be:	1f 92       	push	r1
 2c0:	8f 93       	push	r24
 2c2:	9f 92       	push	r9
 2c4:	8f 92       	push	r8
 2c6:	00 d1       	rcall	.+512    	; 0x4c8 <printf>
 		printf("Receive error counter = %02x | ", mcp2515_read(REC));
 2c8:	8d e1       	ldi	r24, 0x1D	; 29
 2ca:	57 d0       	rcall	.+174    	; 0x37a <mcp2515_read>
 2cc:	1f 92       	push	r1
 2ce:	8f 93       	push	r24
 2d0:	bf 92       	push	r11
 2d2:	af 92       	push	r10
 2d4:	f9 d0       	rcall	.+498    	; 0x4c8 <printf>
 		printf("Transmit error counter = %02x | ", mcp2515_read(TEC));
 2d6:	8c e1       	ldi	r24, 0x1C	; 28
 2d8:	50 d0       	rcall	.+160    	; 0x37a <mcp2515_read>
 2da:	1f 92       	push	r1
 2dc:	8f 93       	push	r24
 2de:	df 92       	push	r13
 2e0:	cf 92       	push	r12
 2e2:	f2 d0       	rcall	.+484    	; 0x4c8 <printf>
		printf("Can interrupt flags = %02x | ", mcp2515_read(CANINTF));
 2e4:	8c e2       	ldi	r24, 0x2C	; 44
 2e6:	49 d0       	rcall	.+146    	; 0x37a <mcp2515_read>
 2e8:	1f 92       	push	r1
 2ea:	8f 93       	push	r24
 2ec:	ff 92       	push	r15
 2ee:	ef 92       	push	r14
 2f0:	eb d0       	rcall	.+470    	; 0x4c8 <printf>
		printf("Can status = %02x | ", mcp2515_read(CANSTAT));
 2f2:	8e e0       	ldi	r24, 0x0E	; 14
 2f4:	42 d0       	rcall	.+132    	; 0x37a <mcp2515_read>
 2f6:	1f 92       	push	r1
 2f8:	8f 93       	push	r24
 2fa:	1f 93       	push	r17
 2fc:	0f 93       	push	r16
 2fe:	e4 d0       	rcall	.+456    	; 0x4c8 <printf>
		printf("CAN interupt enable = %02x | ", mcp2515_read(CANINTE));
 300:	8b e2       	ldi	r24, 0x2B	; 43
 302:	3b d0       	rcall	.+118    	; 0x37a <mcp2515_read>
 304:	1f 92       	push	r1
 306:	8f 93       	push	r24
 308:	7f 92       	push	r7
 30a:	6f 92       	push	r6
 30c:	dd d0       	rcall	.+442    	; 0x4c8 <printf>


// // 		if(can_message_available()){
		if(1){
			can_recive(&r);
 30e:	ce 01       	movw	r24, r28
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	3f df       	rcall	.-386    	; 0x192 <can_recive>
			printf("Received id = %d | ", r.id);
 314:	8a 81       	ldd	r24, Y+2	; 0x02
 316:	8f 93       	push	r24
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	8f 93       	push	r24
 31c:	5f 92       	push	r5
 31e:	4f 92       	push	r4
 320:	d3 d0       	rcall	.+422    	; 0x4c8 <printf>
			printf("Joystick pos = %d \n", (int8_t)r.data[0]);
 322:	2c 81       	ldd	r18, Y+4	; 0x04
 324:	82 2f       	mov	r24, r18
 326:	99 27       	eor	r25, r25
 328:	87 fd       	sbrc	r24, 7
 32a:	90 95       	com	r25
 32c:	9f 93       	push	r25
 32e:	2f 93       	push	r18
 330:	3f 92       	push	r3
 332:	2f 92       	push	r2
 334:	c9 d0       	rcall	.+402    	; 0x4c8 <printf>
			servo_set_pos((int8_t)r.data[0] + 128);
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
 340:	8c 81       	ldd	r24, Y+4	; 0x04
 342:	80 58       	subi	r24, 0x80	; 128
 344:	68 d0       	rcall	.+208    	; 0x416 <servo_set_pos>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 346:	9f ef       	ldi	r25, 0xFF	; 255
 348:	a1 ee       	ldi	r26, 0xE1	; 225
 34a:	b4 e0       	ldi	r27, 0x04	; 4
 34c:	91 50       	subi	r25, 0x01	; 1
 34e:	a0 40       	sbci	r26, 0x00	; 0
 350:	b0 40       	sbci	r27, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x120>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x12a>
 356:	00 00       	nop
		
		
		
		_delay_ms(100);
		
		uint8_t status = board_get_ball_status();
 358:	61 df       	rcall	.-318    	; 0x21c <board_get_ball_status>
		
		if (status){
 35a:	88 23       	and	r24, r24
 35c:	21 f0       	breq	.+8      	; 0x366 <main+0x13a>
			printf("Game over \n");
 35e:	8a ee       	ldi	r24, 0xEA	; 234
 360:	92 e0       	ldi	r25, 0x02	; 2
 362:	c3 d0       	rcall	.+390    	; 0x4ea <puts>
 364:	aa cf       	rjmp	.-172    	; 0x2ba <main+0x8e>
		}
		
		else {
			printf("Ball in play\n");
 366:	85 ef       	ldi	r24, 0xF5	; 245
 368:	92 e0       	ldi	r25, 0x02	; 2
 36a:	bf d0       	rcall	.+382    	; 0x4ea <puts>
 36c:	a6 cf       	rjmp	.-180    	; 0x2ba <main+0x8e>

0000036e <mcp2515_disable>:
	mcp2515_enable();
	spi_transmit(0xa0);
	data = spi_transmit(0);
	mcp2515_disable();
	return data;
}
 36e:	2f 9a       	sbi	0x05, 7	; 5
 370:	08 95       	ret

00000372 <mcp2515_enable>:
 372:	2f 98       	cbi	0x05, 7	; 5
 374:	08 95       	ret

00000376 <mcp2515_init>:
 376:	6c c0       	rjmp	.+216    	; 0x450 <spi_init>
 378:	08 95       	ret

0000037a <mcp2515_read>:
 37a:	cf 93       	push	r28
 37c:	c8 2f       	mov	r28, r24
 37e:	f9 df       	rcall	.-14     	; 0x372 <mcp2515_enable>
 380:	83 e0       	ldi	r24, 0x03	; 3
 382:	72 d0       	rcall	.+228    	; 0x468 <spi_transmit>
 384:	8c 2f       	mov	r24, r28
 386:	70 d0       	rcall	.+224    	; 0x468 <spi_transmit>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	6e d0       	rcall	.+220    	; 0x468 <spi_transmit>
 38c:	c8 2f       	mov	r28, r24
 38e:	ef df       	rcall	.-34     	; 0x36e <mcp2515_disable>
 390:	8c 2f       	mov	r24, r28
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <mcp2515_write>:
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	d8 2f       	mov	r29, r24
 39c:	c6 2f       	mov	r28, r22
 39e:	e9 df       	rcall	.-46     	; 0x372 <mcp2515_enable>
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	62 d0       	rcall	.+196    	; 0x468 <spi_transmit>
 3a4:	8d 2f       	mov	r24, r29
 3a6:	60 d0       	rcall	.+192    	; 0x468 <spi_transmit>
 3a8:	8c 2f       	mov	r24, r28
 3aa:	5e d0       	rcall	.+188    	; 0x468 <spi_transmit>
 3ac:	e0 df       	rcall	.-64     	; 0x36e <mcp2515_disable>
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <mcp2515_bit_modify>:

//Allows the user to set or clear individual bits in a particular
//register. Note: Not all registers can be bit-modified with this
//command.
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	18 2f       	mov	r17, r24
 3bc:	d6 2f       	mov	r29, r22
 3be:	c4 2f       	mov	r28, r20
	mcp2515_enable();
 3c0:	d8 df       	rcall	.-80     	; 0x372 <mcp2515_enable>
	spi_transmit(0x05);
 3c2:	85 e0       	ldi	r24, 0x05	; 5
 3c4:	51 d0       	rcall	.+162    	; 0x468 <spi_transmit>
	spi_transmit(address);
 3c6:	81 2f       	mov	r24, r17
 3c8:	4f d0       	rcall	.+158    	; 0x468 <spi_transmit>
	spi_transmit(mask);
 3ca:	8d 2f       	mov	r24, r29
 3cc:	4d d0       	rcall	.+154    	; 0x468 <spi_transmit>
	spi_transmit(data);
 3ce:	8c 2f       	mov	r24, r28
 3d0:	4b d0       	rcall	.+150    	; 0x468 <spi_transmit>
	mcp2515_disable();
 3d2:	cd df       	rcall	.-102    	; 0x36e <mcp2515_disable>
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	08 95       	ret

000003dc <mcp2515_reset>:

//Resets internal registers to default state,
void mcp2515_reset(){
	mcp2515_enable();
 3dc:	ca df       	rcall	.-108    	; 0x372 <mcp2515_enable>
	spi_transmit(0xc0);
 3de:	80 ec       	ldi	r24, 0xC0	; 192
 3e0:	43 d0       	rcall	.+134    	; 0x468 <spi_transmit>
	mcp2515_disable();
 3e2:	c5 cf       	rjmp	.-118    	; 0x36e <mcp2515_disable>
 3e4:	08 95       	ret

000003e6 <servo_init>:


void servo_init(){
	//Use timer 1 and output OC1A PB5, pin 11 on arduino, for the pwm signal
	//Set pin as output
	DDRB |= (1<<PB5);
 3e6:	25 9a       	sbi	0x04, 5	; 4
	
	//Enable output on OC1A, noninverted mode. Output is set at bottom, and cleared on timer reset
	TCCR1A |= (1<<COM1A1) ;	
 3e8:	e0 e8       	ldi	r30, 0x80	; 128
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	80 83       	st	Z, r24
	
	//Fast pwm mode
	//Set it to mode 14, table 17-2, counts to ICRn then resets to 0
	TCCR1A |= (1<<WGM11);
 3f2:	80 81       	ld	r24, Z
 3f4:	82 60       	ori	r24, 0x02	; 2
 3f6:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12);
 3f8:	e1 e8       	ldi	r30, 0x81	; 129
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	88 61       	ori	r24, 0x18	; 24
 400:	80 83       	st	Z, r24
	
	//Set counter frequency to 50Hz
	//Set top counter value
	ICR1 = SERVO_TIMER_TOP;
 402:	8f e3       	ldi	r24, 0x3F	; 63
 404:	9c e9       	ldi	r25, 0x9C	; 156
 406:	90 93 87 00 	sts	0x0087, r25
 40a:	80 93 86 00 	sts	0x0086, r24
	//Set prescaler to 8 and start the timer
	TCCR1B |= (1<<CS11);
 40e:	80 81       	ld	r24, Z
 410:	82 60       	ori	r24, 0x02	; 2
 412:	80 83       	st	Z, r24
 414:	08 95       	ret

00000416 <servo_set_pos>:

}


void servo_set_pos(uint8_t pos){
	uint16_t val = pos * SERVO_8BIT_TO_TIMER + SERVO_TIMER_MIN;
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	9c 01       	movw	r18, r24
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	22 0f       	add	r18, r18
 420:	33 1f       	adc	r19, r19
 422:	22 0f       	add	r18, r18
 424:	33 1f       	adc	r19, r19
 426:	82 0f       	add	r24, r18
 428:	93 1f       	adc	r25, r19
 42a:	89 5f       	subi	r24, 0xF9	; 249
 42c:	98 4f       	sbci	r25, 0xF8	; 248
	
	if(val < SERVO_TIMER_MIN){
 42e:	87 30       	cpi	r24, 0x07	; 7
 430:	27 e0       	ldi	r18, 0x07	; 7
 432:	92 07       	cpc	r25, r18
 434:	10 f4       	brcc	.+4      	; 0x43a <servo_set_pos+0x24>
		val = SERVO_TIMER_MIN;
 436:	87 e0       	ldi	r24, 0x07	; 7
 438:	97 e0       	ldi	r25, 0x07	; 7
 43a:	88 36       	cpi	r24, 0x68	; 104
 43c:	20 e1       	ldi	r18, 0x10	; 16
 43e:	92 07       	cpc	r25, r18
 440:	10 f0       	brcs	.+4      	; 0x446 <servo_set_pos+0x30>
 442:	87 e6       	ldi	r24, 0x67	; 103
 444:	90 e1       	ldi	r25, 0x10	; 16
	
	if(val > SERVO_TIMER_MAX){
		val = SERVO_TIMER_MAX;
	}
	
	OCR1A = val;
 446:	90 93 89 00 	sts	0x0089, r25
 44a:	80 93 88 00 	sts	0x0088, r24
 44e:	08 95       	ret

00000450 <spi_init>:

#include "spi.h"

void spi_init(void){
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<PB1)|(1<<PB2);
 450:	84 b1       	in	r24, 0x04	; 4
 452:	86 60       	ori	r24, 0x06	; 6
 454:	84 b9       	out	0x04, r24	; 4
	
	//Set SS as output
	DDRB |= (1<<PB7);
 456:	27 9a       	sbi	0x04, 7	; 4
	
	//Set SS input as output, as it will set spi mode to slave if it is not done
	DDRB |= (1<<PB0);
 458:	20 9a       	sbi	0x04, 0	; 4
	
	//Set MISO as input
	DDRB &= ~(1<<PB3);
 45a:	23 98       	cbi	0x04, 3	; 4
	
	//Set spi clk to fosc/2
	SPSR |= (1<<SPI2X);
 45c:	8d b5       	in	r24, 0x2d	; 45
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	8d bd       	out	0x2d, r24	; 45
	/* Enable SPI, Master */
	SPCR = (1<<SPE)|(1<<MSTR);
 462:	80 e5       	ldi	r24, 0x50	; 80
 464:	8c bd       	out	0x2c, r24	; 44
 466:	08 95       	ret

00000468 <spi_transmit>:
}

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
 468:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 46a:	0d b4       	in	r0, 0x2d	; 45
 46c:	07 fc       	sbrc	r0, 7
 46e:	04 c0       	rjmp	.+8      	; 0x478 <spi_transmit+0x10>
	
	data = SPDR;
 470:	8e b5       	in	r24, 0x2e	; 46

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 472:	0d b4       	in	r0, 0x2d	; 45
 474:	07 fe       	sbrs	r0, 7
 476:	fc cf       	rjmp	.-8      	; 0x470 <spi_transmit+0x8>
	
	data = SPDR;

	return data;
 478:	08 95       	ret

0000047a <uart_transmit>:
	stdout = stdin = &uart_str;
	
}

void uart_transmit(unsigned char data, FILE* stream){
	while ( !( UCSR0A & (1<<UDRE0)) );
 47a:	e0 ec       	ldi	r30, 0xC0	; 192
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	90 81       	ld	r25, Z
 480:	95 ff       	sbrs	r25, 5
 482:	fd cf       	rjmp	.-6      	; 0x47e <uart_transmit+0x4>
	
	UDR0 = data;
 484:	80 93 c6 00 	sts	0x00C6, r24
 488:	08 95       	ret

0000048a <uart_receive>:
}

//Function to receive data
unsigned char uart_receive(FILE* stream){
	while (!(UCSR0A & (1<<RXC0)));
 48a:	e0 ec       	ldi	r30, 0xC0	; 192
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	88 23       	and	r24, r24
 492:	ec f7       	brge	.-6      	; 0x48e <uart_receive+0x4>
	return UDR0;
 494:	80 91 c6 00 	lds	r24, 0x00C6
}
 498:	08 95       	ret

0000049a <uart_init>:

void uart_init(){

	// Set baudrate to 9600

	UBRR0H |= (BAUD_PRESCALE >> 8);
 49a:	e5 ec       	ldi	r30, 0xC5	; 197
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	80 83       	st	Z, r24
	UBRR0L |= BAUD_PRESCALE;
 4a2:	e4 ec       	ldi	r30, 0xC4	; 196
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	87 66       	ori	r24, 0x67	; 103
 4aa:	80 83       	st	Z, r24
	// Enable TX rx
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 4ac:	88 e1       	ldi	r24, 0x18	; 24
 4ae:	80 93 c1 00 	sts	0x00C1, r24
	

	
	//uart_str = fdevopen(uart_transmit, uart_receive);
	stdout = stdin = &uart_str;
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	92 e0       	ldi	r25, 0x02	; 2
 4b6:	90 93 04 03 	sts	0x0304, r25
 4ba:	80 93 03 03 	sts	0x0303, r24
 4be:	90 93 06 03 	sts	0x0306, r25
 4c2:	80 93 05 03 	sts	0x0305, r24
 4c6:	08 95       	ret

000004c8 <printf>:
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	fe 01       	movw	r30, r28
 4d2:	36 96       	adiw	r30, 0x06	; 6
 4d4:	61 91       	ld	r22, Z+
 4d6:	71 91       	ld	r23, Z+
 4d8:	af 01       	movw	r20, r30
 4da:	80 91 05 03 	lds	r24, 0x0305
 4de:	90 91 06 03 	lds	r25, 0x0306
 4e2:	30 d0       	rcall	.+96     	; 0x544 <vfprintf>
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <puts>:
 4ea:	0f 93       	push	r16
 4ec:	1f 93       	push	r17
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	e0 91 05 03 	lds	r30, 0x0305
 4f6:	f0 91 06 03 	lds	r31, 0x0306
 4fa:	23 81       	ldd	r18, Z+3	; 0x03
 4fc:	21 ff       	sbrs	r18, 1
 4fe:	1b c0       	rjmp	.+54     	; 0x536 <puts+0x4c>
 500:	ec 01       	movw	r28, r24
 502:	00 e0       	ldi	r16, 0x00	; 0
 504:	10 e0       	ldi	r17, 0x00	; 0
 506:	89 91       	ld	r24, Y+
 508:	60 91 05 03 	lds	r22, 0x0305
 50c:	70 91 06 03 	lds	r23, 0x0306
 510:	db 01       	movw	r26, r22
 512:	18 96       	adiw	r26, 0x08	; 8
 514:	ed 91       	ld	r30, X+
 516:	fc 91       	ld	r31, X
 518:	19 97       	sbiw	r26, 0x09	; 9
 51a:	88 23       	and	r24, r24
 51c:	31 f0       	breq	.+12     	; 0x52a <puts+0x40>
 51e:	19 95       	eicall
 520:	89 2b       	or	r24, r25
 522:	89 f3       	breq	.-30     	; 0x506 <puts+0x1c>
 524:	0f ef       	ldi	r16, 0xFF	; 255
 526:	1f ef       	ldi	r17, 0xFF	; 255
 528:	ee cf       	rjmp	.-36     	; 0x506 <puts+0x1c>
 52a:	8a e0       	ldi	r24, 0x0A	; 10
 52c:	19 95       	eicall
 52e:	89 2b       	or	r24, r25
 530:	11 f4       	brne	.+4      	; 0x536 <puts+0x4c>
 532:	c8 01       	movw	r24, r16
 534:	02 c0       	rjmp	.+4      	; 0x53a <puts+0x50>
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	9f ef       	ldi	r25, 0xFF	; 255
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	08 95       	ret

00000544 <vfprintf>:
 544:	2f 92       	push	r2
 546:	3f 92       	push	r3
 548:	4f 92       	push	r4
 54a:	5f 92       	push	r5
 54c:	6f 92       	push	r6
 54e:	7f 92       	push	r7
 550:	8f 92       	push	r8
 552:	9f 92       	push	r9
 554:	af 92       	push	r10
 556:	bf 92       	push	r11
 558:	cf 92       	push	r12
 55a:	df 92       	push	r13
 55c:	ef 92       	push	r14
 55e:	ff 92       	push	r15
 560:	0f 93       	push	r16
 562:	1f 93       	push	r17
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	2c 97       	sbiw	r28, 0x0c	; 12
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	f8 94       	cli
 572:	de bf       	out	0x3e, r29	; 62
 574:	0f be       	out	0x3f, r0	; 63
 576:	cd bf       	out	0x3d, r28	; 61
 578:	7c 01       	movw	r14, r24
 57a:	6b 01       	movw	r12, r22
 57c:	8a 01       	movw	r16, r20
 57e:	fc 01       	movw	r30, r24
 580:	17 82       	std	Z+7, r1	; 0x07
 582:	16 82       	std	Z+6, r1	; 0x06
 584:	83 81       	ldd	r24, Z+3	; 0x03
 586:	81 ff       	sbrs	r24, 1
 588:	b0 c1       	rjmp	.+864    	; 0x8ea <vfprintf+0x3a6>
 58a:	ce 01       	movw	r24, r28
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	4c 01       	movw	r8, r24
 590:	f7 01       	movw	r30, r14
 592:	93 81       	ldd	r25, Z+3	; 0x03
 594:	f6 01       	movw	r30, r12
 596:	93 fd       	sbrc	r25, 3
 598:	85 91       	lpm	r24, Z+
 59a:	93 ff       	sbrs	r25, 3
 59c:	81 91       	ld	r24, Z+
 59e:	6f 01       	movw	r12, r30
 5a0:	88 23       	and	r24, r24
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <vfprintf+0x62>
 5a4:	9e c1       	rjmp	.+828    	; 0x8e2 <vfprintf+0x39e>
 5a6:	85 32       	cpi	r24, 0x25	; 37
 5a8:	39 f4       	brne	.+14     	; 0x5b8 <vfprintf+0x74>
 5aa:	93 fd       	sbrc	r25, 3
 5ac:	85 91       	lpm	r24, Z+
 5ae:	93 ff       	sbrs	r25, 3
 5b0:	81 91       	ld	r24, Z+
 5b2:	6f 01       	movw	r12, r30
 5b4:	85 32       	cpi	r24, 0x25	; 37
 5b6:	21 f4       	brne	.+8      	; 0x5c0 <vfprintf+0x7c>
 5b8:	b7 01       	movw	r22, r14
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	c7 d1       	rcall	.+910    	; 0x94c <fputc>
 5be:	e8 cf       	rjmp	.-48     	; 0x590 <vfprintf+0x4c>
 5c0:	51 2c       	mov	r5, r1
 5c2:	31 2c       	mov	r3, r1
 5c4:	20 e0       	ldi	r18, 0x00	; 0
 5c6:	20 32       	cpi	r18, 0x20	; 32
 5c8:	a0 f4       	brcc	.+40     	; 0x5f2 <vfprintf+0xae>
 5ca:	8b 32       	cpi	r24, 0x2B	; 43
 5cc:	69 f0       	breq	.+26     	; 0x5e8 <vfprintf+0xa4>
 5ce:	30 f4       	brcc	.+12     	; 0x5dc <vfprintf+0x98>
 5d0:	80 32       	cpi	r24, 0x20	; 32
 5d2:	59 f0       	breq	.+22     	; 0x5ea <vfprintf+0xa6>
 5d4:	83 32       	cpi	r24, 0x23	; 35
 5d6:	69 f4       	brne	.+26     	; 0x5f2 <vfprintf+0xae>
 5d8:	20 61       	ori	r18, 0x10	; 16
 5da:	2c c0       	rjmp	.+88     	; 0x634 <vfprintf+0xf0>
 5dc:	8d 32       	cpi	r24, 0x2D	; 45
 5de:	39 f0       	breq	.+14     	; 0x5ee <vfprintf+0xaa>
 5e0:	80 33       	cpi	r24, 0x30	; 48
 5e2:	39 f4       	brne	.+14     	; 0x5f2 <vfprintf+0xae>
 5e4:	21 60       	ori	r18, 0x01	; 1
 5e6:	26 c0       	rjmp	.+76     	; 0x634 <vfprintf+0xf0>
 5e8:	22 60       	ori	r18, 0x02	; 2
 5ea:	24 60       	ori	r18, 0x04	; 4
 5ec:	23 c0       	rjmp	.+70     	; 0x634 <vfprintf+0xf0>
 5ee:	28 60       	ori	r18, 0x08	; 8
 5f0:	21 c0       	rjmp	.+66     	; 0x634 <vfprintf+0xf0>
 5f2:	27 fd       	sbrc	r18, 7
 5f4:	27 c0       	rjmp	.+78     	; 0x644 <vfprintf+0x100>
 5f6:	30 ed       	ldi	r19, 0xD0	; 208
 5f8:	38 0f       	add	r19, r24
 5fa:	3a 30       	cpi	r19, 0x0A	; 10
 5fc:	78 f4       	brcc	.+30     	; 0x61c <vfprintf+0xd8>
 5fe:	26 ff       	sbrs	r18, 6
 600:	06 c0       	rjmp	.+12     	; 0x60e <vfprintf+0xca>
 602:	fa e0       	ldi	r31, 0x0A	; 10
 604:	5f 9e       	mul	r5, r31
 606:	30 0d       	add	r19, r0
 608:	11 24       	eor	r1, r1
 60a:	53 2e       	mov	r5, r19
 60c:	13 c0       	rjmp	.+38     	; 0x634 <vfprintf+0xf0>
 60e:	8a e0       	ldi	r24, 0x0A	; 10
 610:	38 9e       	mul	r3, r24
 612:	30 0d       	add	r19, r0
 614:	11 24       	eor	r1, r1
 616:	33 2e       	mov	r3, r19
 618:	20 62       	ori	r18, 0x20	; 32
 61a:	0c c0       	rjmp	.+24     	; 0x634 <vfprintf+0xf0>
 61c:	8e 32       	cpi	r24, 0x2E	; 46
 61e:	21 f4       	brne	.+8      	; 0x628 <vfprintf+0xe4>
 620:	26 fd       	sbrc	r18, 6
 622:	5f c1       	rjmp	.+702    	; 0x8e2 <vfprintf+0x39e>
 624:	20 64       	ori	r18, 0x40	; 64
 626:	06 c0       	rjmp	.+12     	; 0x634 <vfprintf+0xf0>
 628:	8c 36       	cpi	r24, 0x6C	; 108
 62a:	11 f4       	brne	.+4      	; 0x630 <vfprintf+0xec>
 62c:	20 68       	ori	r18, 0x80	; 128
 62e:	02 c0       	rjmp	.+4      	; 0x634 <vfprintf+0xf0>
 630:	88 36       	cpi	r24, 0x68	; 104
 632:	41 f4       	brne	.+16     	; 0x644 <vfprintf+0x100>
 634:	f6 01       	movw	r30, r12
 636:	93 fd       	sbrc	r25, 3
 638:	85 91       	lpm	r24, Z+
 63a:	93 ff       	sbrs	r25, 3
 63c:	81 91       	ld	r24, Z+
 63e:	6f 01       	movw	r12, r30
 640:	81 11       	cpse	r24, r1
 642:	c1 cf       	rjmp	.-126    	; 0x5c6 <vfprintf+0x82>
 644:	98 2f       	mov	r25, r24
 646:	9f 7d       	andi	r25, 0xDF	; 223
 648:	95 54       	subi	r25, 0x45	; 69
 64a:	93 30       	cpi	r25, 0x03	; 3
 64c:	28 f4       	brcc	.+10     	; 0x658 <vfprintf+0x114>
 64e:	0c 5f       	subi	r16, 0xFC	; 252
 650:	1f 4f       	sbci	r17, 0xFF	; 255
 652:	ff e3       	ldi	r31, 0x3F	; 63
 654:	f9 83       	std	Y+1, r31	; 0x01
 656:	0d c0       	rjmp	.+26     	; 0x672 <vfprintf+0x12e>
 658:	83 36       	cpi	r24, 0x63	; 99
 65a:	31 f0       	breq	.+12     	; 0x668 <vfprintf+0x124>
 65c:	83 37       	cpi	r24, 0x73	; 115
 65e:	71 f0       	breq	.+28     	; 0x67c <vfprintf+0x138>
 660:	83 35       	cpi	r24, 0x53	; 83
 662:	09 f0       	breq	.+2      	; 0x666 <vfprintf+0x122>
 664:	57 c0       	rjmp	.+174    	; 0x714 <vfprintf+0x1d0>
 666:	21 c0       	rjmp	.+66     	; 0x6aa <vfprintf+0x166>
 668:	f8 01       	movw	r30, r16
 66a:	80 81       	ld	r24, Z
 66c:	89 83       	std	Y+1, r24	; 0x01
 66e:	0e 5f       	subi	r16, 0xFE	; 254
 670:	1f 4f       	sbci	r17, 0xFF	; 255
 672:	44 24       	eor	r4, r4
 674:	43 94       	inc	r4
 676:	51 2c       	mov	r5, r1
 678:	54 01       	movw	r10, r8
 67a:	14 c0       	rjmp	.+40     	; 0x6a4 <vfprintf+0x160>
 67c:	38 01       	movw	r6, r16
 67e:	f2 e0       	ldi	r31, 0x02	; 2
 680:	6f 0e       	add	r6, r31
 682:	71 1c       	adc	r7, r1
 684:	f8 01       	movw	r30, r16
 686:	a0 80       	ld	r10, Z
 688:	b1 80       	ldd	r11, Z+1	; 0x01
 68a:	26 ff       	sbrs	r18, 6
 68c:	03 c0       	rjmp	.+6      	; 0x694 <vfprintf+0x150>
 68e:	65 2d       	mov	r22, r5
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <vfprintf+0x154>
 694:	6f ef       	ldi	r22, 0xFF	; 255
 696:	7f ef       	ldi	r23, 0xFF	; 255
 698:	c5 01       	movw	r24, r10
 69a:	2c 87       	std	Y+12, r18	; 0x0c
 69c:	4c d1       	rcall	.+664    	; 0x936 <strnlen>
 69e:	2c 01       	movw	r4, r24
 6a0:	83 01       	movw	r16, r6
 6a2:	2c 85       	ldd	r18, Y+12	; 0x0c
 6a4:	2f 77       	andi	r18, 0x7F	; 127
 6a6:	22 2e       	mov	r2, r18
 6a8:	16 c0       	rjmp	.+44     	; 0x6d6 <vfprintf+0x192>
 6aa:	38 01       	movw	r6, r16
 6ac:	f2 e0       	ldi	r31, 0x02	; 2
 6ae:	6f 0e       	add	r6, r31
 6b0:	71 1c       	adc	r7, r1
 6b2:	f8 01       	movw	r30, r16
 6b4:	a0 80       	ld	r10, Z
 6b6:	b1 80       	ldd	r11, Z+1	; 0x01
 6b8:	26 ff       	sbrs	r18, 6
 6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <vfprintf+0x17e>
 6bc:	65 2d       	mov	r22, r5
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <vfprintf+0x182>
 6c2:	6f ef       	ldi	r22, 0xFF	; 255
 6c4:	7f ef       	ldi	r23, 0xFF	; 255
 6c6:	c5 01       	movw	r24, r10
 6c8:	2c 87       	std	Y+12, r18	; 0x0c
 6ca:	2a d1       	rcall	.+596    	; 0x920 <strnlen_P>
 6cc:	2c 01       	movw	r4, r24
 6ce:	2c 85       	ldd	r18, Y+12	; 0x0c
 6d0:	20 68       	ori	r18, 0x80	; 128
 6d2:	22 2e       	mov	r2, r18
 6d4:	83 01       	movw	r16, r6
 6d6:	23 fc       	sbrc	r2, 3
 6d8:	19 c0       	rjmp	.+50     	; 0x70c <vfprintf+0x1c8>
 6da:	83 2d       	mov	r24, r3
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	48 16       	cp	r4, r24
 6e0:	59 06       	cpc	r5, r25
 6e2:	a0 f4       	brcc	.+40     	; 0x70c <vfprintf+0x1c8>
 6e4:	b7 01       	movw	r22, r14
 6e6:	80 e2       	ldi	r24, 0x20	; 32
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	30 d1       	rcall	.+608    	; 0x94c <fputc>
 6ec:	3a 94       	dec	r3
 6ee:	f5 cf       	rjmp	.-22     	; 0x6da <vfprintf+0x196>
 6f0:	f5 01       	movw	r30, r10
 6f2:	27 fc       	sbrc	r2, 7
 6f4:	85 91       	lpm	r24, Z+
 6f6:	27 fe       	sbrs	r2, 7
 6f8:	81 91       	ld	r24, Z+
 6fa:	5f 01       	movw	r10, r30
 6fc:	b7 01       	movw	r22, r14
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	25 d1       	rcall	.+586    	; 0x94c <fputc>
 702:	31 10       	cpse	r3, r1
 704:	3a 94       	dec	r3
 706:	f1 e0       	ldi	r31, 0x01	; 1
 708:	4f 1a       	sub	r4, r31
 70a:	51 08       	sbc	r5, r1
 70c:	41 14       	cp	r4, r1
 70e:	51 04       	cpc	r5, r1
 710:	79 f7       	brne	.-34     	; 0x6f0 <vfprintf+0x1ac>
 712:	de c0       	rjmp	.+444    	; 0x8d0 <vfprintf+0x38c>
 714:	84 36       	cpi	r24, 0x64	; 100
 716:	11 f0       	breq	.+4      	; 0x71c <vfprintf+0x1d8>
 718:	89 36       	cpi	r24, 0x69	; 105
 71a:	31 f5       	brne	.+76     	; 0x768 <vfprintf+0x224>
 71c:	f8 01       	movw	r30, r16
 71e:	27 ff       	sbrs	r18, 7
 720:	07 c0       	rjmp	.+14     	; 0x730 <vfprintf+0x1ec>
 722:	60 81       	ld	r22, Z
 724:	71 81       	ldd	r23, Z+1	; 0x01
 726:	82 81       	ldd	r24, Z+2	; 0x02
 728:	93 81       	ldd	r25, Z+3	; 0x03
 72a:	0c 5f       	subi	r16, 0xFC	; 252
 72c:	1f 4f       	sbci	r17, 0xFF	; 255
 72e:	08 c0       	rjmp	.+16     	; 0x740 <vfprintf+0x1fc>
 730:	60 81       	ld	r22, Z
 732:	71 81       	ldd	r23, Z+1	; 0x01
 734:	88 27       	eor	r24, r24
 736:	77 fd       	sbrc	r23, 7
 738:	80 95       	com	r24
 73a:	98 2f       	mov	r25, r24
 73c:	0e 5f       	subi	r16, 0xFE	; 254
 73e:	1f 4f       	sbci	r17, 0xFF	; 255
 740:	2f 76       	andi	r18, 0x6F	; 111
 742:	b2 2e       	mov	r11, r18
 744:	97 ff       	sbrs	r25, 7
 746:	09 c0       	rjmp	.+18     	; 0x75a <vfprintf+0x216>
 748:	90 95       	com	r25
 74a:	80 95       	com	r24
 74c:	70 95       	com	r23
 74e:	61 95       	neg	r22
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	20 68       	ori	r18, 0x80	; 128
 758:	b2 2e       	mov	r11, r18
 75a:	2a e0       	ldi	r18, 0x0A	; 10
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	a4 01       	movw	r20, r8
 760:	27 d1       	rcall	.+590    	; 0x9b0 <__ultoa_invert>
 762:	a8 2e       	mov	r10, r24
 764:	a8 18       	sub	r10, r8
 766:	43 c0       	rjmp	.+134    	; 0x7ee <vfprintf+0x2aa>
 768:	85 37       	cpi	r24, 0x75	; 117
 76a:	29 f4       	brne	.+10     	; 0x776 <vfprintf+0x232>
 76c:	2f 7e       	andi	r18, 0xEF	; 239
 76e:	b2 2e       	mov	r11, r18
 770:	2a e0       	ldi	r18, 0x0A	; 10
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	25 c0       	rjmp	.+74     	; 0x7c0 <vfprintf+0x27c>
 776:	f2 2f       	mov	r31, r18
 778:	f9 7f       	andi	r31, 0xF9	; 249
 77a:	bf 2e       	mov	r11, r31
 77c:	8f 36       	cpi	r24, 0x6F	; 111
 77e:	c1 f0       	breq	.+48     	; 0x7b0 <vfprintf+0x26c>
 780:	18 f4       	brcc	.+6      	; 0x788 <vfprintf+0x244>
 782:	88 35       	cpi	r24, 0x58	; 88
 784:	79 f0       	breq	.+30     	; 0x7a4 <vfprintf+0x260>
 786:	ad c0       	rjmp	.+346    	; 0x8e2 <vfprintf+0x39e>
 788:	80 37       	cpi	r24, 0x70	; 112
 78a:	19 f0       	breq	.+6      	; 0x792 <vfprintf+0x24e>
 78c:	88 37       	cpi	r24, 0x78	; 120
 78e:	21 f0       	breq	.+8      	; 0x798 <vfprintf+0x254>
 790:	a8 c0       	rjmp	.+336    	; 0x8e2 <vfprintf+0x39e>
 792:	2f 2f       	mov	r18, r31
 794:	20 61       	ori	r18, 0x10	; 16
 796:	b2 2e       	mov	r11, r18
 798:	b4 fe       	sbrs	r11, 4
 79a:	0d c0       	rjmp	.+26     	; 0x7b6 <vfprintf+0x272>
 79c:	8b 2d       	mov	r24, r11
 79e:	84 60       	ori	r24, 0x04	; 4
 7a0:	b8 2e       	mov	r11, r24
 7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <vfprintf+0x272>
 7a4:	24 ff       	sbrs	r18, 4
 7a6:	0a c0       	rjmp	.+20     	; 0x7bc <vfprintf+0x278>
 7a8:	9f 2f       	mov	r25, r31
 7aa:	96 60       	ori	r25, 0x06	; 6
 7ac:	b9 2e       	mov	r11, r25
 7ae:	06 c0       	rjmp	.+12     	; 0x7bc <vfprintf+0x278>
 7b0:	28 e0       	ldi	r18, 0x08	; 8
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <vfprintf+0x27c>
 7b6:	20 e1       	ldi	r18, 0x10	; 16
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <vfprintf+0x27c>
 7bc:	20 e1       	ldi	r18, 0x10	; 16
 7be:	32 e0       	ldi	r19, 0x02	; 2
 7c0:	f8 01       	movw	r30, r16
 7c2:	b7 fe       	sbrs	r11, 7
 7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <vfprintf+0x290>
 7c6:	60 81       	ld	r22, Z
 7c8:	71 81       	ldd	r23, Z+1	; 0x01
 7ca:	82 81       	ldd	r24, Z+2	; 0x02
 7cc:	93 81       	ldd	r25, Z+3	; 0x03
 7ce:	0c 5f       	subi	r16, 0xFC	; 252
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
 7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <vfprintf+0x29c>
 7d4:	60 81       	ld	r22, Z
 7d6:	71 81       	ldd	r23, Z+1	; 0x01
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	0e 5f       	subi	r16, 0xFE	; 254
 7de:	1f 4f       	sbci	r17, 0xFF	; 255
 7e0:	a4 01       	movw	r20, r8
 7e2:	e6 d0       	rcall	.+460    	; 0x9b0 <__ultoa_invert>
 7e4:	a8 2e       	mov	r10, r24
 7e6:	a8 18       	sub	r10, r8
 7e8:	fb 2d       	mov	r31, r11
 7ea:	ff 77       	andi	r31, 0x7F	; 127
 7ec:	bf 2e       	mov	r11, r31
 7ee:	b6 fe       	sbrs	r11, 6
 7f0:	0b c0       	rjmp	.+22     	; 0x808 <vfprintf+0x2c4>
 7f2:	2b 2d       	mov	r18, r11
 7f4:	2e 7f       	andi	r18, 0xFE	; 254
 7f6:	a5 14       	cp	r10, r5
 7f8:	50 f4       	brcc	.+20     	; 0x80e <vfprintf+0x2ca>
 7fa:	b4 fe       	sbrs	r11, 4
 7fc:	0a c0       	rjmp	.+20     	; 0x812 <vfprintf+0x2ce>
 7fe:	b2 fc       	sbrc	r11, 2
 800:	08 c0       	rjmp	.+16     	; 0x812 <vfprintf+0x2ce>
 802:	2b 2d       	mov	r18, r11
 804:	2e 7e       	andi	r18, 0xEE	; 238
 806:	05 c0       	rjmp	.+10     	; 0x812 <vfprintf+0x2ce>
 808:	7a 2c       	mov	r7, r10
 80a:	2b 2d       	mov	r18, r11
 80c:	03 c0       	rjmp	.+6      	; 0x814 <vfprintf+0x2d0>
 80e:	7a 2c       	mov	r7, r10
 810:	01 c0       	rjmp	.+2      	; 0x814 <vfprintf+0x2d0>
 812:	75 2c       	mov	r7, r5
 814:	24 ff       	sbrs	r18, 4
 816:	0d c0       	rjmp	.+26     	; 0x832 <vfprintf+0x2ee>
 818:	fe 01       	movw	r30, r28
 81a:	ea 0d       	add	r30, r10
 81c:	f1 1d       	adc	r31, r1
 81e:	80 81       	ld	r24, Z
 820:	80 33       	cpi	r24, 0x30	; 48
 822:	11 f4       	brne	.+4      	; 0x828 <vfprintf+0x2e4>
 824:	29 7e       	andi	r18, 0xE9	; 233
 826:	09 c0       	rjmp	.+18     	; 0x83a <vfprintf+0x2f6>
 828:	22 ff       	sbrs	r18, 2
 82a:	06 c0       	rjmp	.+12     	; 0x838 <vfprintf+0x2f4>
 82c:	73 94       	inc	r7
 82e:	73 94       	inc	r7
 830:	04 c0       	rjmp	.+8      	; 0x83a <vfprintf+0x2f6>
 832:	82 2f       	mov	r24, r18
 834:	86 78       	andi	r24, 0x86	; 134
 836:	09 f0       	breq	.+2      	; 0x83a <vfprintf+0x2f6>
 838:	73 94       	inc	r7
 83a:	23 fd       	sbrc	r18, 3
 83c:	12 c0       	rjmp	.+36     	; 0x862 <vfprintf+0x31e>
 83e:	20 ff       	sbrs	r18, 0
 840:	06 c0       	rjmp	.+12     	; 0x84e <vfprintf+0x30a>
 842:	5a 2c       	mov	r5, r10
 844:	73 14       	cp	r7, r3
 846:	18 f4       	brcc	.+6      	; 0x84e <vfprintf+0x30a>
 848:	53 0c       	add	r5, r3
 84a:	57 18       	sub	r5, r7
 84c:	73 2c       	mov	r7, r3
 84e:	73 14       	cp	r7, r3
 850:	60 f4       	brcc	.+24     	; 0x86a <vfprintf+0x326>
 852:	b7 01       	movw	r22, r14
 854:	80 e2       	ldi	r24, 0x20	; 32
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	2c 87       	std	Y+12, r18	; 0x0c
 85a:	78 d0       	rcall	.+240    	; 0x94c <fputc>
 85c:	73 94       	inc	r7
 85e:	2c 85       	ldd	r18, Y+12	; 0x0c
 860:	f6 cf       	rjmp	.-20     	; 0x84e <vfprintf+0x30a>
 862:	73 14       	cp	r7, r3
 864:	10 f4       	brcc	.+4      	; 0x86a <vfprintf+0x326>
 866:	37 18       	sub	r3, r7
 868:	01 c0       	rjmp	.+2      	; 0x86c <vfprintf+0x328>
 86a:	31 2c       	mov	r3, r1
 86c:	24 ff       	sbrs	r18, 4
 86e:	11 c0       	rjmp	.+34     	; 0x892 <vfprintf+0x34e>
 870:	b7 01       	movw	r22, r14
 872:	80 e3       	ldi	r24, 0x30	; 48
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	2c 87       	std	Y+12, r18	; 0x0c
 878:	69 d0       	rcall	.+210    	; 0x94c <fputc>
 87a:	2c 85       	ldd	r18, Y+12	; 0x0c
 87c:	22 ff       	sbrs	r18, 2
 87e:	16 c0       	rjmp	.+44     	; 0x8ac <vfprintf+0x368>
 880:	21 ff       	sbrs	r18, 1
 882:	03 c0       	rjmp	.+6      	; 0x88a <vfprintf+0x346>
 884:	88 e5       	ldi	r24, 0x58	; 88
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	02 c0       	rjmp	.+4      	; 0x88e <vfprintf+0x34a>
 88a:	88 e7       	ldi	r24, 0x78	; 120
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	b7 01       	movw	r22, r14
 890:	0c c0       	rjmp	.+24     	; 0x8aa <vfprintf+0x366>
 892:	82 2f       	mov	r24, r18
 894:	86 78       	andi	r24, 0x86	; 134
 896:	51 f0       	breq	.+20     	; 0x8ac <vfprintf+0x368>
 898:	21 fd       	sbrc	r18, 1
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <vfprintf+0x35c>
 89c:	80 e2       	ldi	r24, 0x20	; 32
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <vfprintf+0x35e>
 8a0:	8b e2       	ldi	r24, 0x2B	; 43
 8a2:	27 fd       	sbrc	r18, 7
 8a4:	8d e2       	ldi	r24, 0x2D	; 45
 8a6:	b7 01       	movw	r22, r14
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	50 d0       	rcall	.+160    	; 0x94c <fputc>
 8ac:	a5 14       	cp	r10, r5
 8ae:	30 f4       	brcc	.+12     	; 0x8bc <vfprintf+0x378>
 8b0:	b7 01       	movw	r22, r14
 8b2:	80 e3       	ldi	r24, 0x30	; 48
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	4a d0       	rcall	.+148    	; 0x94c <fputc>
 8b8:	5a 94       	dec	r5
 8ba:	f8 cf       	rjmp	.-16     	; 0x8ac <vfprintf+0x368>
 8bc:	aa 94       	dec	r10
 8be:	f4 01       	movw	r30, r8
 8c0:	ea 0d       	add	r30, r10
 8c2:	f1 1d       	adc	r31, r1
 8c4:	80 81       	ld	r24, Z
 8c6:	b7 01       	movw	r22, r14
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	40 d0       	rcall	.+128    	; 0x94c <fputc>
 8cc:	a1 10       	cpse	r10, r1
 8ce:	f6 cf       	rjmp	.-20     	; 0x8bc <vfprintf+0x378>
 8d0:	33 20       	and	r3, r3
 8d2:	09 f4       	brne	.+2      	; 0x8d6 <vfprintf+0x392>
 8d4:	5d ce       	rjmp	.-838    	; 0x590 <vfprintf+0x4c>
 8d6:	b7 01       	movw	r22, r14
 8d8:	80 e2       	ldi	r24, 0x20	; 32
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	37 d0       	rcall	.+110    	; 0x94c <fputc>
 8de:	3a 94       	dec	r3
 8e0:	f7 cf       	rjmp	.-18     	; 0x8d0 <vfprintf+0x38c>
 8e2:	f7 01       	movw	r30, r14
 8e4:	86 81       	ldd	r24, Z+6	; 0x06
 8e6:	97 81       	ldd	r25, Z+7	; 0x07
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <vfprintf+0x3aa>
 8ea:	8f ef       	ldi	r24, 0xFF	; 255
 8ec:	9f ef       	ldi	r25, 0xFF	; 255
 8ee:	2c 96       	adiw	r28, 0x0c	; 12
 8f0:	0f b6       	in	r0, 0x3f	; 63
 8f2:	f8 94       	cli
 8f4:	de bf       	out	0x3e, r29	; 62
 8f6:	0f be       	out	0x3f, r0	; 63
 8f8:	cd bf       	out	0x3d, r28	; 61
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	1f 91       	pop	r17
 900:	0f 91       	pop	r16
 902:	ff 90       	pop	r15
 904:	ef 90       	pop	r14
 906:	df 90       	pop	r13
 908:	cf 90       	pop	r12
 90a:	bf 90       	pop	r11
 90c:	af 90       	pop	r10
 90e:	9f 90       	pop	r9
 910:	8f 90       	pop	r8
 912:	7f 90       	pop	r7
 914:	6f 90       	pop	r6
 916:	5f 90       	pop	r5
 918:	4f 90       	pop	r4
 91a:	3f 90       	pop	r3
 91c:	2f 90       	pop	r2
 91e:	08 95       	ret

00000920 <strnlen_P>:
 920:	fc 01       	movw	r30, r24
 922:	05 90       	lpm	r0, Z+
 924:	61 50       	subi	r22, 0x01	; 1
 926:	70 40       	sbci	r23, 0x00	; 0
 928:	01 10       	cpse	r0, r1
 92a:	d8 f7       	brcc	.-10     	; 0x922 <strnlen_P+0x2>
 92c:	80 95       	com	r24
 92e:	90 95       	com	r25
 930:	8e 0f       	add	r24, r30
 932:	9f 1f       	adc	r25, r31
 934:	08 95       	ret

00000936 <strnlen>:
 936:	fc 01       	movw	r30, r24
 938:	61 50       	subi	r22, 0x01	; 1
 93a:	70 40       	sbci	r23, 0x00	; 0
 93c:	01 90       	ld	r0, Z+
 93e:	01 10       	cpse	r0, r1
 940:	d8 f7       	brcc	.-10     	; 0x938 <strnlen+0x2>
 942:	80 95       	com	r24
 944:	90 95       	com	r25
 946:	8e 0f       	add	r24, r30
 948:	9f 1f       	adc	r25, r31
 94a:	08 95       	ret

0000094c <fputc>:
 94c:	0f 93       	push	r16
 94e:	1f 93       	push	r17
 950:	cf 93       	push	r28
 952:	df 93       	push	r29
 954:	18 2f       	mov	r17, r24
 956:	09 2f       	mov	r16, r25
 958:	eb 01       	movw	r28, r22
 95a:	8b 81       	ldd	r24, Y+3	; 0x03
 95c:	81 fd       	sbrc	r24, 1
 95e:	03 c0       	rjmp	.+6      	; 0x966 <fputc+0x1a>
 960:	8f ef       	ldi	r24, 0xFF	; 255
 962:	9f ef       	ldi	r25, 0xFF	; 255
 964:	20 c0       	rjmp	.+64     	; 0x9a6 <fputc+0x5a>
 966:	82 ff       	sbrs	r24, 2
 968:	10 c0       	rjmp	.+32     	; 0x98a <fputc+0x3e>
 96a:	4e 81       	ldd	r20, Y+6	; 0x06
 96c:	5f 81       	ldd	r21, Y+7	; 0x07
 96e:	2c 81       	ldd	r18, Y+4	; 0x04
 970:	3d 81       	ldd	r19, Y+5	; 0x05
 972:	42 17       	cp	r20, r18
 974:	53 07       	cpc	r21, r19
 976:	7c f4       	brge	.+30     	; 0x996 <fputc+0x4a>
 978:	e8 81       	ld	r30, Y
 97a:	f9 81       	ldd	r31, Y+1	; 0x01
 97c:	9f 01       	movw	r18, r30
 97e:	2f 5f       	subi	r18, 0xFF	; 255
 980:	3f 4f       	sbci	r19, 0xFF	; 255
 982:	39 83       	std	Y+1, r19	; 0x01
 984:	28 83       	st	Y, r18
 986:	10 83       	st	Z, r17
 988:	06 c0       	rjmp	.+12     	; 0x996 <fputc+0x4a>
 98a:	e8 85       	ldd	r30, Y+8	; 0x08
 98c:	f9 85       	ldd	r31, Y+9	; 0x09
 98e:	81 2f       	mov	r24, r17
 990:	19 95       	eicall
 992:	89 2b       	or	r24, r25
 994:	29 f7       	brne	.-54     	; 0x960 <fputc+0x14>
 996:	2e 81       	ldd	r18, Y+6	; 0x06
 998:	3f 81       	ldd	r19, Y+7	; 0x07
 99a:	2f 5f       	subi	r18, 0xFF	; 255
 99c:	3f 4f       	sbci	r19, 0xFF	; 255
 99e:	3f 83       	std	Y+7, r19	; 0x07
 9a0:	2e 83       	std	Y+6, r18	; 0x06
 9a2:	81 2f       	mov	r24, r17
 9a4:	90 2f       	mov	r25, r16
 9a6:	df 91       	pop	r29
 9a8:	cf 91       	pop	r28
 9aa:	1f 91       	pop	r17
 9ac:	0f 91       	pop	r16
 9ae:	08 95       	ret

000009b0 <__ultoa_invert>:
 9b0:	fa 01       	movw	r30, r20
 9b2:	aa 27       	eor	r26, r26
 9b4:	28 30       	cpi	r18, 0x08	; 8
 9b6:	51 f1       	breq	.+84     	; 0xa0c <__ultoa_invert+0x5c>
 9b8:	20 31       	cpi	r18, 0x10	; 16
 9ba:	81 f1       	breq	.+96     	; 0xa1c <__ultoa_invert+0x6c>
 9bc:	e8 94       	clt
 9be:	6f 93       	push	r22
 9c0:	6e 7f       	andi	r22, 0xFE	; 254
 9c2:	6e 5f       	subi	r22, 0xFE	; 254
 9c4:	7f 4f       	sbci	r23, 0xFF	; 255
 9c6:	8f 4f       	sbci	r24, 0xFF	; 255
 9c8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ca:	af 4f       	sbci	r26, 0xFF	; 255
 9cc:	b1 e0       	ldi	r27, 0x01	; 1
 9ce:	3e d0       	rcall	.+124    	; 0xa4c <__ultoa_invert+0x9c>
 9d0:	b4 e0       	ldi	r27, 0x04	; 4
 9d2:	3c d0       	rcall	.+120    	; 0xa4c <__ultoa_invert+0x9c>
 9d4:	67 0f       	add	r22, r23
 9d6:	78 1f       	adc	r23, r24
 9d8:	89 1f       	adc	r24, r25
 9da:	9a 1f       	adc	r25, r26
 9dc:	a1 1d       	adc	r26, r1
 9de:	68 0f       	add	r22, r24
 9e0:	79 1f       	adc	r23, r25
 9e2:	8a 1f       	adc	r24, r26
 9e4:	91 1d       	adc	r25, r1
 9e6:	a1 1d       	adc	r26, r1
 9e8:	6a 0f       	add	r22, r26
 9ea:	71 1d       	adc	r23, r1
 9ec:	81 1d       	adc	r24, r1
 9ee:	91 1d       	adc	r25, r1
 9f0:	a1 1d       	adc	r26, r1
 9f2:	20 d0       	rcall	.+64     	; 0xa34 <__ultoa_invert+0x84>
 9f4:	09 f4       	brne	.+2      	; 0x9f8 <__ultoa_invert+0x48>
 9f6:	68 94       	set
 9f8:	3f 91       	pop	r19
 9fa:	2a e0       	ldi	r18, 0x0A	; 10
 9fc:	26 9f       	mul	r18, r22
 9fe:	11 24       	eor	r1, r1
 a00:	30 19       	sub	r19, r0
 a02:	30 5d       	subi	r19, 0xD0	; 208
 a04:	31 93       	st	Z+, r19
 a06:	de f6       	brtc	.-74     	; 0x9be <__ultoa_invert+0xe>
 a08:	cf 01       	movw	r24, r30
 a0a:	08 95       	ret
 a0c:	46 2f       	mov	r20, r22
 a0e:	47 70       	andi	r20, 0x07	; 7
 a10:	40 5d       	subi	r20, 0xD0	; 208
 a12:	41 93       	st	Z+, r20
 a14:	b3 e0       	ldi	r27, 0x03	; 3
 a16:	0f d0       	rcall	.+30     	; 0xa36 <__ultoa_invert+0x86>
 a18:	c9 f7       	brne	.-14     	; 0xa0c <__ultoa_invert+0x5c>
 a1a:	f6 cf       	rjmp	.-20     	; 0xa08 <__ultoa_invert+0x58>
 a1c:	46 2f       	mov	r20, r22
 a1e:	4f 70       	andi	r20, 0x0F	; 15
 a20:	40 5d       	subi	r20, 0xD0	; 208
 a22:	4a 33       	cpi	r20, 0x3A	; 58
 a24:	18 f0       	brcs	.+6      	; 0xa2c <__ultoa_invert+0x7c>
 a26:	49 5d       	subi	r20, 0xD9	; 217
 a28:	31 fd       	sbrc	r19, 1
 a2a:	40 52       	subi	r20, 0x20	; 32
 a2c:	41 93       	st	Z+, r20
 a2e:	02 d0       	rcall	.+4      	; 0xa34 <__ultoa_invert+0x84>
 a30:	a9 f7       	brne	.-22     	; 0xa1c <__ultoa_invert+0x6c>
 a32:	ea cf       	rjmp	.-44     	; 0xa08 <__ultoa_invert+0x58>
 a34:	b4 e0       	ldi	r27, 0x04	; 4
 a36:	a6 95       	lsr	r26
 a38:	97 95       	ror	r25
 a3a:	87 95       	ror	r24
 a3c:	77 95       	ror	r23
 a3e:	67 95       	ror	r22
 a40:	ba 95       	dec	r27
 a42:	c9 f7       	brne	.-14     	; 0xa36 <__ultoa_invert+0x86>
 a44:	00 97       	sbiw	r24, 0x00	; 0
 a46:	61 05       	cpc	r22, r1
 a48:	71 05       	cpc	r23, r1
 a4a:	08 95       	ret
 a4c:	9b 01       	movw	r18, r22
 a4e:	ac 01       	movw	r20, r24
 a50:	0a 2e       	mov	r0, r26
 a52:	06 94       	lsr	r0
 a54:	57 95       	ror	r21
 a56:	47 95       	ror	r20
 a58:	37 95       	ror	r19
 a5a:	27 95       	ror	r18
 a5c:	ba 95       	dec	r27
 a5e:	c9 f7       	brne	.-14     	; 0xa52 <__ultoa_invert+0xa2>
 a60:	62 0f       	add	r22, r18
 a62:	73 1f       	adc	r23, r19
 a64:	84 1f       	adc	r24, r20
 a66:	95 1f       	adc	r25, r21
 a68:	a0 1d       	adc	r26, r0
 a6a:	08 95       	ret

00000a6c <_exit>:
 a6c:	f8 94       	cli

00000a6e <__stop_program>:
 a6e:	ff cf       	rjmp	.-2      	; 0xa6e <__stop_program>
