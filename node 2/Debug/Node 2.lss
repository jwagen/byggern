
Node 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800200  00000a36  00000aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  008002ae  008002ae  00000b78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d5b  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d7  00000000  00000000  00001a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008bb  00000000  00000000  00002146  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00002a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000051c  00000000  00000000  00002fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000034f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8b c0       	rjmp	.+278    	; 0x124 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e3       	ldi	r30, 0x36	; 54
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 3a       	cpi	r26, 0xAE	; 174
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae ea       	ldi	r26, 0xAE	; 174
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 3b       	cpi	r26, 0xB5	; 181
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	a1 d0       	rcall	.+322    	; 0x262 <main>
 120:	88 c4       	rjmp	.+2320   	; 0xa32 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_3>:
#include "mcp2515_registers.h"
#include <stdio.h>

static uint8_t can_message_available_var = 0;

ISR(INT2_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
	can_message_available_var = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 ae 02 	sts	0x02AE, r24
}
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <can_message_available>:

uint8_t can_message_available(){
	return can_message_available_var;
}
 142:	80 91 ae 02 	lds	r24, 0x02AE
 146:	08 95       	ret

00000148 <can_init>:

void can_init(){
	mcp2515_init();
 148:	20 d1       	rcall	.+576    	; 0x38a <mcp2515_init>
	mcp2515_reset();
 14a:	48 d1       	rcall	.+656    	; 0x3dc <mcp2515_reset>
	
	
	//Enable interrupt on received message in both buffers
	mcp2515_write(CANINTE, (1 <<RX1IE) | (1<<RX0IE));
 14c:	66 e0       	ldi	r22, 0x06	; 6
 14e:	8b e2       	ldi	r24, 0x2B	; 43
 150:	2c d1       	rcall	.+600    	; 0x3aa <mcp2515_write>
	
	//Receive every message, no filter
// 	mcp2515_write(RXB0CTRL, RXB_RXM1 | RXB_RXM0);
// 	
	//Set mode to normal operation
	mcp2515_write(CANCTRL,MODE_NORMAL);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	29 d1       	rcall	.+594    	; 0x3aa <mcp2515_write>
	
	//Enable interrupt on falling edge of INT2, PD2, pin 19 on arduino
	EICRA |= (1<<ISC21); 
 158:	e9 e6       	ldi	r30, 0x69	; 105
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 62       	ori	r24, 0x20	; 32
 160:	80 83       	st	Z, r24
	EIMSK |= (1<<INT2);
 162:	ea 9a       	sbi	0x1d, 2	; 29
 164:	08 95       	ret

00000166 <can_transmit>:
}

void can_transmit(can_message_t message){
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	2b 97       	sbiw	r28, 0x0b	; 11
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
 182:	e9 82       	std	Y+1, r14	; 0x01
 184:	fa 82       	std	Y+2, r15	; 0x02
 186:	0b 83       	std	Y+3, r16	; 0x03
 188:	1c 83       	std	Y+4, r17	; 0x04
 18a:	2d 83       	std	Y+5, r18	; 0x05
 18c:	3e 83       	std	Y+6, r19	; 0x06
 18e:	4f 83       	std	Y+7, r20	; 0x07
 190:	58 87       	std	Y+8, r21	; 0x08
 192:	69 87       	std	Y+9, r22	; 0x09
 194:	7a 87       	std	Y+10, r23	; 0x0a
 196:	8b 87       	std	Y+11, r24	; 0x0b
 198:	e9 80       	ldd	r14, Y+1	; 0x01
 19a:	fa 80       	ldd	r15, Y+2	; 0x02
	//Use buffer 0
	
	//Load ID
	mcp2515_write(TXB0SIDH, (0xff & (message.id >> 3))); //load high
 19c:	b7 01       	movw	r22, r14
 19e:	76 95       	lsr	r23
 1a0:	67 95       	ror	r22
 1a2:	76 95       	lsr	r23
 1a4:	67 95       	ror	r22
 1a6:	76 95       	lsr	r23
 1a8:	67 95       	ror	r22
 1aa:	81 e3       	ldi	r24, 0x31	; 49
 1ac:	fe d0       	rcall	.+508    	; 0x3aa <mcp2515_write>
	mcp2515_write(TXB0SIDL, 0xe0 & (message.id << 5));
 1ae:	6e 2d       	mov	r22, r14
 1b0:	62 95       	swap	r22
 1b2:	66 0f       	add	r22, r22
 1b4:	60 7e       	andi	r22, 0xE0	; 224
 1b6:	82 e3       	ldi	r24, 0x32	; 50
 1b8:	f8 d0       	rcall	.+496    	; 0x3aa <mcp2515_write>
	
	//Set length
	mcp2515_write(TXB0DLC, 0x0f & message.length);
 1ba:	60 2f       	mov	r22, r16
 1bc:	6f 70       	andi	r22, 0x0F	; 15
 1be:	85 e3       	ldi	r24, 0x35	; 53
 1c0:	f4 d0       	rcall	.+488    	; 0x3aa <mcp2515_write>
	
	//Load data
	for (uint8_t i = 0; i < message.length; i++){
 1c2:	00 23       	and	r16, r16
 1c4:	71 f0       	breq	.+28     	; 0x1e2 <can_transmit+0x7c>
 1c6:	7e 01       	movw	r14, r28
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	e8 0e       	add	r14, r24
 1cc:	f1 1c       	adc	r15, r1
 1ce:	0a 5c       	subi	r16, 0xCA	; 202
 1d0:	16 e3       	ldi	r17, 0x36	; 54
		mcp2515_write(TXB0D0+i, message.data[i]);
 1d2:	f7 01       	movw	r30, r14
 1d4:	61 91       	ld	r22, Z+
 1d6:	7f 01       	movw	r14, r30
 1d8:	81 2f       	mov	r24, r17
 1da:	e7 d0       	rcall	.+462    	; 0x3aa <mcp2515_write>
 1dc:	1f 5f       	subi	r17, 0xFF	; 255
	
	//Set length
	mcp2515_write(TXB0DLC, 0x0f & message.length);
	
	//Load data
	for (uint8_t i = 0; i < message.length; i++){
 1de:	10 13       	cpse	r17, r16
 1e0:	f8 cf       	rjmp	.-16     	; 0x1d2 <can_transmit+0x6c>
		mcp2515_write(TXB0D0+i, message.data[i]);
	}
	
	//Send request to send
	mcp2515_rts(1);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f1 d0       	rcall	.+482    	; 0x3c8 <mcp2515_rts>
	
}
 1e6:	2b 96       	adiw	r28, 0x0b	; 11
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	08 95       	ret

00000200 <can_recive>:

void can_recive(can_message_t *message){
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
	//Read id
	message->id = mcp2515_read(RXB0SIDH) << 3;
 20a:	81 e6       	ldi	r24, 0x61	; 97
 20c:	c0 d0       	rcall	.+384    	; 0x38e <mcp2515_read>
 20e:	98 e0       	ldi	r25, 0x08	; 8
 210:	89 9f       	mul	r24, r25
 212:	80 01       	movw	r16, r0
 214:	11 24       	eor	r1, r1
 216:	19 83       	std	Y+1, r17	; 0x01
 218:	08 83       	st	Y, r16
	message->id |= (7 & (mcp2515_read(RXB0SIDL) >> 5)) ;
 21a:	82 e6       	ldi	r24, 0x62	; 98
 21c:	b8 d0       	rcall	.+368    	; 0x38e <mcp2515_read>
 21e:	82 95       	swap	r24
 220:	86 95       	lsr	r24
 222:	87 70       	andi	r24, 0x07	; 7
 224:	08 2b       	or	r16, r24
 226:	19 83       	std	Y+1, r17	; 0x01
 228:	08 83       	st	Y, r16

	
	//Read length
	message->length = 0x0f & mcp2515_read(RXB0DLC);
 22a:	85 e6       	ldi	r24, 0x65	; 101
 22c:	b0 d0       	rcall	.+352    	; 0x38e <mcp2515_read>
 22e:	8f 70       	andi	r24, 0x0F	; 15
 230:	8a 83       	std	Y+2, r24	; 0x02
	
	//Read data
	for (uint8_t i = 0; i < message->length; i++){
 232:	88 23       	and	r24, r24
 234:	61 f0       	breq	.+24     	; 0x24e <can_recive+0x4e>
 236:	10 e0       	ldi	r17, 0x00	; 0
		message->data[i] = mcp2515_read(RXB0D0+i);
 238:	86 e6       	ldi	r24, 0x66	; 102
 23a:	81 0f       	add	r24, r17
 23c:	a8 d0       	rcall	.+336    	; 0x38e <mcp2515_read>
 23e:	fe 01       	movw	r30, r28
 240:	e1 0f       	add	r30, r17
 242:	f1 1d       	adc	r31, r1
 244:	83 83       	std	Z+3, r24	; 0x03
	
	//Read length
	message->length = 0x0f & mcp2515_read(RXB0DLC);
	
	//Read data
	for (uint8_t i = 0; i < message->length; i++){
 246:	1f 5f       	subi	r17, 0xFF	; 255
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	18 17       	cp	r17, r24
 24c:	a8 f3       	brcs	.-22     	; 0x238 <can_recive+0x38>
		message->data[i] = mcp2515_read(RXB0D0+i);
	}
	
	//Clear interrupt flags
	mcp2515_write(CANINTF, 0x00);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	8c e2       	ldi	r24, 0x2C	; 44
 252:	ab d0       	rcall	.+342    	; 0x3aa <mcp2515_write>
	can_message_available_var = 0;	
 254:	10 92 ae 02 	sts	0x02AE, r1
/*	return message;*/
	
	
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	08 95       	ret

00000262 <main>:
#include <avr/interrupt.h>



int main(void)
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	66 97       	sbiw	r28, 0x16	; 22
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	de bf       	out	0x3e, r29	; 62
 272:	0f be       	out	0x3f, r0	; 63
 274:	cd bf       	out	0x3d, r28	; 61
	
	uart_init();
 276:	f4 d0       	rcall	.+488    	; 0x460 <uart_init>
	can_init();
 278:	67 df       	rcall	.-306    	; 0x148 <can_init>
	servo_init();
 27a:	b5 d0       	rcall	.+362    	; 0x3e6 <servo_init>

	sei();
 27c:	78 94       	sei


	printf("Init done\n");
 27e:	8e e0       	ldi	r24, 0x0E	; 14
 280:	92 e0       	ldi	r25, 0x02	; 2
 282:	16 d1       	rcall	.+556    	; 0x4b0 <puts>
	
	can_message_t joystick_request;
	can_message_t r = {.id = 0};
 284:	fe 01       	movw	r30, r28
 286:	3c 96       	adiw	r30, 0x0c	; 12
 288:	8b e0       	ldi	r24, 0x0B	; 11
 28a:	df 01       	movw	r26, r30
 28c:	1d 92       	st	X+, r1
 28e:	8a 95       	dec	r24
 290:	e9 f7       	brne	.-6      	; 0x28c <main+0x2a>

	
	
	while(1){	
		can_transmit(joystick_request);
		printf("Sent message id = %d  | ", joystick_request.id);
 292:	0f 2e       	mov	r0, r31
 294:	f8 e1       	ldi	r31, 0x18	; 24
 296:	6f 2e       	mov	r6, r31
 298:	f2 e0       	ldi	r31, 0x02	; 2
 29a:	7f 2e       	mov	r7, r31
 29c:	f0 2d       	mov	r31, r0
		joystick_request.id++;
		if (joystick_request.id > 2000){
			joystick_request.id = 0;
		}
		
		printf("Error message = %02x | ", mcp2515_read(EFLG));
 29e:	0f 2e       	mov	r0, r31
 2a0:	f1 e3       	ldi	r31, 0x31	; 49
 2a2:	8f 2e       	mov	r8, r31
 2a4:	f2 e0       	ldi	r31, 0x02	; 2
 2a6:	9f 2e       	mov	r9, r31
 2a8:	f0 2d       	mov	r31, r0
		printf("Receive error counter = %02x | ", mcp2515_read(REC));
 2aa:	0f 2e       	mov	r0, r31
 2ac:	f9 e4       	ldi	r31, 0x49	; 73
 2ae:	af 2e       	mov	r10, r31
 2b0:	f2 e0       	ldi	r31, 0x02	; 2
 2b2:	bf 2e       	mov	r11, r31
 2b4:	f0 2d       	mov	r31, r0
		printf("Transmit error counter = %02x | ", mcp2515_read(TEC));
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f9 e6       	ldi	r31, 0x69	; 105
 2ba:	4f 2e       	mov	r4, r31
 2bc:	f2 e0       	ldi	r31, 0x02	; 2
 2be:	5f 2e       	mov	r5, r31
 2c0:	f0 2d       	mov	r31, r0
		
		
		if(can_message_available()){
			can_recive(&r);
			printf("Received id = %d \n ", r.id);
 2c2:	0f 2e       	mov	r0, r31
 2c4:	fa e8       	ldi	r31, 0x8A	; 138
 2c6:	2f 2e       	mov	r2, r31
 2c8:	f2 e0       	ldi	r31, 0x02	; 2
 2ca:	3f 2e       	mov	r3, r31
 2cc:	f0 2d       	mov	r31, r0


	
	
	while(1){	
		can_transmit(joystick_request);
 2ce:	ec 2c       	mov	r14, r12
 2d0:	da 82       	std	Y+2, r13	; 0x02
 2d2:	c9 82       	std	Y+1, r12	; 0x01
 2d4:	fa 80       	ldd	r15, Y+2	; 0x02
 2d6:	0b 81       	ldd	r16, Y+3	; 0x03
 2d8:	1c 81       	ldd	r17, Y+4	; 0x04
 2da:	2d 81       	ldd	r18, Y+5	; 0x05
 2dc:	3e 81       	ldd	r19, Y+6	; 0x06
 2de:	4f 81       	ldd	r20, Y+7	; 0x07
 2e0:	58 85       	ldd	r21, Y+8	; 0x08
 2e2:	69 85       	ldd	r22, Y+9	; 0x09
 2e4:	7a 85       	ldd	r23, Y+10	; 0x0a
 2e6:	8b 85       	ldd	r24, Y+11	; 0x0b
 2e8:	3e df       	rcall	.-388    	; 0x166 <can_transmit>
		printf("Sent message id = %d  | ", joystick_request.id);
 2ea:	df 92       	push	r13
 2ec:	cf 92       	push	r12
 2ee:	7f 92       	push	r7
 2f0:	6f 92       	push	r6
 2f2:	cd d0       	rcall	.+410    	; 0x48e <printf>
		
		
		
		joystick_request.id++;
 2f4:	bf ef       	ldi	r27, 0xFF	; 255
 2f6:	cb 1a       	sub	r12, r27
 2f8:	db 0a       	sbc	r13, r27
		if (joystick_request.id > 2000){
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	21 ed       	ldi	r18, 0xD1	; 209
 304:	c2 16       	cp	r12, r18
 306:	27 e0       	ldi	r18, 0x07	; 7
 308:	d2 06       	cpc	r13, r18
 30a:	10 f0       	brcs	.+4      	; 0x310 <main+0xae>
			joystick_request.id = 0;
 30c:	c1 2c       	mov	r12, r1
 30e:	d1 2c       	mov	r13, r1
		}
		
		printf("Error message = %02x | ", mcp2515_read(EFLG));
 310:	8d e2       	ldi	r24, 0x2D	; 45
 312:	3d d0       	rcall	.+122    	; 0x38e <mcp2515_read>
 314:	1f 92       	push	r1
 316:	8f 93       	push	r24
 318:	9f 92       	push	r9
 31a:	8f 92       	push	r8
 31c:	b8 d0       	rcall	.+368    	; 0x48e <printf>
		printf("Receive error counter = %02x | ", mcp2515_read(REC));
 31e:	8d e1       	ldi	r24, 0x1D	; 29
 320:	36 d0       	rcall	.+108    	; 0x38e <mcp2515_read>
 322:	1f 92       	push	r1
 324:	8f 93       	push	r24
 326:	bf 92       	push	r11
 328:	af 92       	push	r10
 32a:	b1 d0       	rcall	.+354    	; 0x48e <printf>
		printf("Transmit error counter = %02x | ", mcp2515_read(TEC));
 32c:	8c e1       	ldi	r24, 0x1C	; 28
 32e:	2f d0       	rcall	.+94     	; 0x38e <mcp2515_read>
 330:	1f 92       	push	r1
 332:	8f 93       	push	r24
 334:	5f 92       	push	r5
 336:	4f 92       	push	r4
 338:	aa d0       	rcall	.+340    	; 0x48e <printf>
		
		
		if(can_message_available()){
 33a:	03 df       	rcall	.-506    	; 0x142 <can_message_available>
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
 346:	88 23       	and	r24, r24
 348:	79 f0       	breq	.+30     	; 0x368 <main+0x106>
			can_recive(&r);
 34a:	ce 01       	movw	r24, r28
 34c:	0c 96       	adiw	r24, 0x0c	; 12
 34e:	58 df       	rcall	.-336    	; 0x200 <can_recive>
			printf("Received id = %d \n ", r.id);
 350:	8d 85       	ldd	r24, Y+13	; 0x0d
 352:	8f 93       	push	r24
 354:	8c 85       	ldd	r24, Y+12	; 0x0c
 356:	8f 93       	push	r24
 358:	3f 92       	push	r3
 35a:	2f 92       	push	r2
 35c:	98 d0       	rcall	.+304    	; 0x48e <printf>
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	03 c0       	rjmp	.+6      	; 0x36e <main+0x10c>
			
		}
		
		else {
			printf("No new message\n");
 368:	8e e9       	ldi	r24, 0x9E	; 158
 36a:	92 e0       	ldi	r25, 0x02	; 2
 36c:	a1 d0       	rcall	.+322    	; 0x4b0 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36e:	bf ef       	ldi	r27, 0xFF	; 255
 370:	23 ec       	ldi	r18, 0xC3	; 195
 372:	39 e0       	ldi	r19, 0x09	; 9
 374:	b1 50       	subi	r27, 0x01	; 1
 376:	20 40       	sbci	r18, 0x00	; 0
 378:	30 40       	sbci	r19, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0x112>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <main+0x11c>
 37e:	00 00       	nop
 380:	a6 cf       	rjmp	.-180    	; 0x2ce <main+0x6c>

00000382 <mcp2515_disable>:
	spi_transmit(0x05);
	spi_transmit(address);
	spi_transmit(mask);
	spi_transmit(data);
	mcp2515_disable();
}
 382:	2f 9a       	sbi	0x05, 7	; 5
 384:	08 95       	ret

00000386 <mcp2515_enable>:
 386:	2f 98       	cbi	0x05, 7	; 5
 388:	08 95       	ret

0000038a <mcp2515_init>:
 38a:	45 c0       	rjmp	.+138    	; 0x416 <spi_init>
 38c:	08 95       	ret

0000038e <mcp2515_read>:
 38e:	cf 93       	push	r28
 390:	c8 2f       	mov	r28, r24
 392:	f9 df       	rcall	.-14     	; 0x386 <mcp2515_enable>
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	4b d0       	rcall	.+150    	; 0x42e <spi_transmit>
 398:	8c 2f       	mov	r24, r28
 39a:	49 d0       	rcall	.+146    	; 0x42e <spi_transmit>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	47 d0       	rcall	.+142    	; 0x42e <spi_transmit>
 3a0:	c8 2f       	mov	r28, r24
 3a2:	ef df       	rcall	.-34     	; 0x382 <mcp2515_disable>
 3a4:	8c 2f       	mov	r24, r28
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <mcp2515_write>:
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	d8 2f       	mov	r29, r24
 3b0:	c6 2f       	mov	r28, r22
 3b2:	e9 df       	rcall	.-46     	; 0x386 <mcp2515_enable>
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	3b d0       	rcall	.+118    	; 0x42e <spi_transmit>
 3b8:	8d 2f       	mov	r24, r29
 3ba:	39 d0       	rcall	.+114    	; 0x42e <spi_transmit>
 3bc:	8c 2f       	mov	r24, r28
 3be:	37 d0       	rcall	.+110    	; 0x42e <spi_transmit>
 3c0:	e0 df       	rcall	.-64     	; 0x382 <mcp2515_disable>
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <mcp2515_rts>:
 3c8:	cf 93       	push	r28
 3ca:	c8 2f       	mov	r28, r24
 3cc:	dc df       	rcall	.-72     	; 0x386 <mcp2515_enable>
 3ce:	8c 2f       	mov	r24, r28
 3d0:	87 70       	andi	r24, 0x07	; 7
 3d2:	80 68       	ori	r24, 0x80	; 128
 3d4:	2c d0       	rcall	.+88     	; 0x42e <spi_transmit>
 3d6:	d5 df       	rcall	.-86     	; 0x382 <mcp2515_disable>
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <mcp2515_reset>:

//Resets internal registers to default state,
void mcp2515_reset(){
	mcp2515_enable();
 3dc:	d4 df       	rcall	.-88     	; 0x386 <mcp2515_enable>
	spi_transmit(0xc0);
 3de:	80 ec       	ldi	r24, 0xC0	; 192
 3e0:	26 d0       	rcall	.+76     	; 0x42e <spi_transmit>
	mcp2515_disable();
 3e2:	cf cf       	rjmp	.-98     	; 0x382 <mcp2515_disable>
 3e4:	08 95       	ret

000003e6 <servo_init>:


void servo_init(){
	//Use timer 1 and output OC1A PB5, pin 11 on arduino, for the pwm signal
	//Set pin as output
	DDRB |= (1<<PB5);
 3e6:	25 9a       	sbi	0x04, 5	; 4
	
	//Enable output on OC1A, noninverted mode. Output is set at bottom, and cleared on timer reset
	TCCR1A |= (1<<COM1A1) ;	
 3e8:	e0 e8       	ldi	r30, 0x80	; 128
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	80 83       	st	Z, r24
	
	//Fast pwm mode
	//Set it to mode 14, table 17-2, counts to ICRn then resets to 0
	TCCR1A |= (1<<WGM11);
 3f2:	80 81       	ld	r24, Z
 3f4:	82 60       	ori	r24, 0x02	; 2
 3f6:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12);
 3f8:	e1 e8       	ldi	r30, 0x81	; 129
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	88 61       	ori	r24, 0x18	; 24
 400:	80 83       	st	Z, r24
	
	//Set counter frequency to 50Hz
	//Set top counter value
	ICR1 = SERVO_TIMER_TOP;
 402:	8f e3       	ldi	r24, 0x3F	; 63
 404:	9c e9       	ldi	r25, 0x9C	; 156
 406:	90 93 87 00 	sts	0x0087, r25
 40a:	80 93 86 00 	sts	0x0086, r24
	//Set prescaler to 8 and start the timer
	TCCR1B |= (1<<CS11);
 40e:	80 81       	ld	r24, Z
 410:	82 60       	ori	r24, 0x02	; 2
 412:	80 83       	st	Z, r24
 414:	08 95       	ret

00000416 <spi_init>:

#include "spi.h"

void spi_init(void){
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<PB1)|(1<<PB2);
 416:	84 b1       	in	r24, 0x04	; 4
 418:	86 60       	ori	r24, 0x06	; 6
 41a:	84 b9       	out	0x04, r24	; 4
	
	//Set SS as output
	DDRB |= (1<<PB7);
 41c:	27 9a       	sbi	0x04, 7	; 4
	
	//Set SS input as output, as it will set spi mode to slave if it is not done
	DDRB |= (1<<PB0);
 41e:	20 9a       	sbi	0x04, 0	; 4
	
	//Set MISO as input
	DDRB &= ~(1<<PB3);
 420:	23 98       	cbi	0x04, 3	; 4
	
	//Set spi clk to fosc/2
	SPSR |= (1<<SPI2X);
 422:	8d b5       	in	r24, 0x2d	; 45
 424:	81 60       	ori	r24, 0x01	; 1
 426:	8d bd       	out	0x2d, r24	; 45
	/* Enable SPI, Master */
	SPCR = (1<<SPE)|(1<<MSTR);
 428:	80 e5       	ldi	r24, 0x50	; 80
 42a:	8c bd       	out	0x2c, r24	; 44
 42c:	08 95       	ret

0000042e <spi_transmit>:
}

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
 42e:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 430:	0d b4       	in	r0, 0x2d	; 45
 432:	07 fc       	sbrc	r0, 7
 434:	04 c0       	rjmp	.+8      	; 0x43e <spi_transmit+0x10>
	
	data = SPDR;
 436:	8e b5       	in	r24, 0x2e	; 46

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 438:	0d b4       	in	r0, 0x2d	; 45
 43a:	07 fe       	sbrs	r0, 7
 43c:	fc cf       	rjmp	.-8      	; 0x436 <spi_transmit+0x8>
	
	data = SPDR;

	return data;
 43e:	08 95       	ret

00000440 <uart_transmit>:
	stdout = stdin = &uart_str;
	
}

void uart_transmit(unsigned char data, FILE* stream){
	while ( !( UCSR0A & (1<<UDRE0)) );
 440:	e0 ec       	ldi	r30, 0xC0	; 192
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	90 81       	ld	r25, Z
 446:	95 ff       	sbrs	r25, 5
 448:	fd cf       	rjmp	.-6      	; 0x444 <uart_transmit+0x4>
	
	UDR0 = data;
 44a:	80 93 c6 00 	sts	0x00C6, r24
 44e:	08 95       	ret

00000450 <uart_receive>:
}

//Function to receive data
unsigned char uart_receive(FILE* stream){
	while (!(UCSR0A & (1<<RXC0)));
 450:	e0 ec       	ldi	r30, 0xC0	; 192
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	88 23       	and	r24, r24
 458:	ec f7       	brge	.-6      	; 0x454 <uart_receive+0x4>
	return UDR0;
 45a:	80 91 c6 00 	lds	r24, 0x00C6
}
 45e:	08 95       	ret

00000460 <uart_init>:

void uart_init(){

	// Set baudrate to 9600

	UBRR0H |= (BAUD_PRESCALE >> 8);
 460:	e5 ec       	ldi	r30, 0xC5	; 197
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	80 83       	st	Z, r24
	UBRR0L |= BAUD_PRESCALE;
 468:	e4 ec       	ldi	r30, 0xC4	; 196
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	87 66       	ori	r24, 0x67	; 103
 470:	80 83       	st	Z, r24
	// Enable TX rx
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 472:	88 e1       	ldi	r24, 0x18	; 24
 474:	80 93 c1 00 	sts	0x00C1, r24
	

	
	//uart_str = fdevopen(uart_transmit, uart_receive);
	stdout = stdin = &uart_str;
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	92 e0       	ldi	r25, 0x02	; 2
 47c:	90 93 b0 02 	sts	0x02B0, r25
 480:	80 93 af 02 	sts	0x02AF, r24
 484:	90 93 b2 02 	sts	0x02B2, r25
 488:	80 93 b1 02 	sts	0x02B1, r24
 48c:	08 95       	ret

0000048e <printf>:
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	fe 01       	movw	r30, r28
 498:	36 96       	adiw	r30, 0x06	; 6
 49a:	61 91       	ld	r22, Z+
 49c:	71 91       	ld	r23, Z+
 49e:	af 01       	movw	r20, r30
 4a0:	80 91 b1 02 	lds	r24, 0x02B1
 4a4:	90 91 b2 02 	lds	r25, 0x02B2
 4a8:	30 d0       	rcall	.+96     	; 0x50a <vfprintf>
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <puts>:
 4b0:	0f 93       	push	r16
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	e0 91 b1 02 	lds	r30, 0x02B1
 4bc:	f0 91 b2 02 	lds	r31, 0x02B2
 4c0:	23 81       	ldd	r18, Z+3	; 0x03
 4c2:	21 ff       	sbrs	r18, 1
 4c4:	1b c0       	rjmp	.+54     	; 0x4fc <puts+0x4c>
 4c6:	ec 01       	movw	r28, r24
 4c8:	00 e0       	ldi	r16, 0x00	; 0
 4ca:	10 e0       	ldi	r17, 0x00	; 0
 4cc:	89 91       	ld	r24, Y+
 4ce:	60 91 b1 02 	lds	r22, 0x02B1
 4d2:	70 91 b2 02 	lds	r23, 0x02B2
 4d6:	db 01       	movw	r26, r22
 4d8:	18 96       	adiw	r26, 0x08	; 8
 4da:	ed 91       	ld	r30, X+
 4dc:	fc 91       	ld	r31, X
 4de:	19 97       	sbiw	r26, 0x09	; 9
 4e0:	88 23       	and	r24, r24
 4e2:	31 f0       	breq	.+12     	; 0x4f0 <puts+0x40>
 4e4:	19 95       	eicall
 4e6:	89 2b       	or	r24, r25
 4e8:	89 f3       	breq	.-30     	; 0x4cc <puts+0x1c>
 4ea:	0f ef       	ldi	r16, 0xFF	; 255
 4ec:	1f ef       	ldi	r17, 0xFF	; 255
 4ee:	ee cf       	rjmp	.-36     	; 0x4cc <puts+0x1c>
 4f0:	8a e0       	ldi	r24, 0x0A	; 10
 4f2:	19 95       	eicall
 4f4:	89 2b       	or	r24, r25
 4f6:	11 f4       	brne	.+4      	; 0x4fc <puts+0x4c>
 4f8:	c8 01       	movw	r24, r16
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <puts+0x50>
 4fc:	8f ef       	ldi	r24, 0xFF	; 255
 4fe:	9f ef       	ldi	r25, 0xFF	; 255
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	0f 91       	pop	r16
 508:	08 95       	ret

0000050a <vfprintf>:
 50a:	2f 92       	push	r2
 50c:	3f 92       	push	r3
 50e:	4f 92       	push	r4
 510:	5f 92       	push	r5
 512:	6f 92       	push	r6
 514:	7f 92       	push	r7
 516:	8f 92       	push	r8
 518:	9f 92       	push	r9
 51a:	af 92       	push	r10
 51c:	bf 92       	push	r11
 51e:	cf 92       	push	r12
 520:	df 92       	push	r13
 522:	ef 92       	push	r14
 524:	ff 92       	push	r15
 526:	0f 93       	push	r16
 528:	1f 93       	push	r17
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	cd b7       	in	r28, 0x3d	; 61
 530:	de b7       	in	r29, 0x3e	; 62
 532:	2c 97       	sbiw	r28, 0x0c	; 12
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	f8 94       	cli
 538:	de bf       	out	0x3e, r29	; 62
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	cd bf       	out	0x3d, r28	; 61
 53e:	7c 01       	movw	r14, r24
 540:	6b 01       	movw	r12, r22
 542:	8a 01       	movw	r16, r20
 544:	fc 01       	movw	r30, r24
 546:	17 82       	std	Z+7, r1	; 0x07
 548:	16 82       	std	Z+6, r1	; 0x06
 54a:	83 81       	ldd	r24, Z+3	; 0x03
 54c:	81 ff       	sbrs	r24, 1
 54e:	b0 c1       	rjmp	.+864    	; 0x8b0 <vfprintf+0x3a6>
 550:	ce 01       	movw	r24, r28
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	4c 01       	movw	r8, r24
 556:	f7 01       	movw	r30, r14
 558:	93 81       	ldd	r25, Z+3	; 0x03
 55a:	f6 01       	movw	r30, r12
 55c:	93 fd       	sbrc	r25, 3
 55e:	85 91       	lpm	r24, Z+
 560:	93 ff       	sbrs	r25, 3
 562:	81 91       	ld	r24, Z+
 564:	6f 01       	movw	r12, r30
 566:	88 23       	and	r24, r24
 568:	09 f4       	brne	.+2      	; 0x56c <vfprintf+0x62>
 56a:	9e c1       	rjmp	.+828    	; 0x8a8 <vfprintf+0x39e>
 56c:	85 32       	cpi	r24, 0x25	; 37
 56e:	39 f4       	brne	.+14     	; 0x57e <vfprintf+0x74>
 570:	93 fd       	sbrc	r25, 3
 572:	85 91       	lpm	r24, Z+
 574:	93 ff       	sbrs	r25, 3
 576:	81 91       	ld	r24, Z+
 578:	6f 01       	movw	r12, r30
 57a:	85 32       	cpi	r24, 0x25	; 37
 57c:	21 f4       	brne	.+8      	; 0x586 <vfprintf+0x7c>
 57e:	b7 01       	movw	r22, r14
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	c7 d1       	rcall	.+910    	; 0x912 <fputc>
 584:	e8 cf       	rjmp	.-48     	; 0x556 <vfprintf+0x4c>
 586:	51 2c       	mov	r5, r1
 588:	31 2c       	mov	r3, r1
 58a:	20 e0       	ldi	r18, 0x00	; 0
 58c:	20 32       	cpi	r18, 0x20	; 32
 58e:	a0 f4       	brcc	.+40     	; 0x5b8 <vfprintf+0xae>
 590:	8b 32       	cpi	r24, 0x2B	; 43
 592:	69 f0       	breq	.+26     	; 0x5ae <vfprintf+0xa4>
 594:	30 f4       	brcc	.+12     	; 0x5a2 <vfprintf+0x98>
 596:	80 32       	cpi	r24, 0x20	; 32
 598:	59 f0       	breq	.+22     	; 0x5b0 <vfprintf+0xa6>
 59a:	83 32       	cpi	r24, 0x23	; 35
 59c:	69 f4       	brne	.+26     	; 0x5b8 <vfprintf+0xae>
 59e:	20 61       	ori	r18, 0x10	; 16
 5a0:	2c c0       	rjmp	.+88     	; 0x5fa <vfprintf+0xf0>
 5a2:	8d 32       	cpi	r24, 0x2D	; 45
 5a4:	39 f0       	breq	.+14     	; 0x5b4 <vfprintf+0xaa>
 5a6:	80 33       	cpi	r24, 0x30	; 48
 5a8:	39 f4       	brne	.+14     	; 0x5b8 <vfprintf+0xae>
 5aa:	21 60       	ori	r18, 0x01	; 1
 5ac:	26 c0       	rjmp	.+76     	; 0x5fa <vfprintf+0xf0>
 5ae:	22 60       	ori	r18, 0x02	; 2
 5b0:	24 60       	ori	r18, 0x04	; 4
 5b2:	23 c0       	rjmp	.+70     	; 0x5fa <vfprintf+0xf0>
 5b4:	28 60       	ori	r18, 0x08	; 8
 5b6:	21 c0       	rjmp	.+66     	; 0x5fa <vfprintf+0xf0>
 5b8:	27 fd       	sbrc	r18, 7
 5ba:	27 c0       	rjmp	.+78     	; 0x60a <vfprintf+0x100>
 5bc:	30 ed       	ldi	r19, 0xD0	; 208
 5be:	38 0f       	add	r19, r24
 5c0:	3a 30       	cpi	r19, 0x0A	; 10
 5c2:	78 f4       	brcc	.+30     	; 0x5e2 <vfprintf+0xd8>
 5c4:	26 ff       	sbrs	r18, 6
 5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <vfprintf+0xca>
 5c8:	fa e0       	ldi	r31, 0x0A	; 10
 5ca:	5f 9e       	mul	r5, r31
 5cc:	30 0d       	add	r19, r0
 5ce:	11 24       	eor	r1, r1
 5d0:	53 2e       	mov	r5, r19
 5d2:	13 c0       	rjmp	.+38     	; 0x5fa <vfprintf+0xf0>
 5d4:	8a e0       	ldi	r24, 0x0A	; 10
 5d6:	38 9e       	mul	r3, r24
 5d8:	30 0d       	add	r19, r0
 5da:	11 24       	eor	r1, r1
 5dc:	33 2e       	mov	r3, r19
 5de:	20 62       	ori	r18, 0x20	; 32
 5e0:	0c c0       	rjmp	.+24     	; 0x5fa <vfprintf+0xf0>
 5e2:	8e 32       	cpi	r24, 0x2E	; 46
 5e4:	21 f4       	brne	.+8      	; 0x5ee <vfprintf+0xe4>
 5e6:	26 fd       	sbrc	r18, 6
 5e8:	5f c1       	rjmp	.+702    	; 0x8a8 <vfprintf+0x39e>
 5ea:	20 64       	ori	r18, 0x40	; 64
 5ec:	06 c0       	rjmp	.+12     	; 0x5fa <vfprintf+0xf0>
 5ee:	8c 36       	cpi	r24, 0x6C	; 108
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <vfprintf+0xec>
 5f2:	20 68       	ori	r18, 0x80	; 128
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <vfprintf+0xf0>
 5f6:	88 36       	cpi	r24, 0x68	; 104
 5f8:	41 f4       	brne	.+16     	; 0x60a <vfprintf+0x100>
 5fa:	f6 01       	movw	r30, r12
 5fc:	93 fd       	sbrc	r25, 3
 5fe:	85 91       	lpm	r24, Z+
 600:	93 ff       	sbrs	r25, 3
 602:	81 91       	ld	r24, Z+
 604:	6f 01       	movw	r12, r30
 606:	81 11       	cpse	r24, r1
 608:	c1 cf       	rjmp	.-126    	; 0x58c <vfprintf+0x82>
 60a:	98 2f       	mov	r25, r24
 60c:	9f 7d       	andi	r25, 0xDF	; 223
 60e:	95 54       	subi	r25, 0x45	; 69
 610:	93 30       	cpi	r25, 0x03	; 3
 612:	28 f4       	brcc	.+10     	; 0x61e <vfprintf+0x114>
 614:	0c 5f       	subi	r16, 0xFC	; 252
 616:	1f 4f       	sbci	r17, 0xFF	; 255
 618:	ff e3       	ldi	r31, 0x3F	; 63
 61a:	f9 83       	std	Y+1, r31	; 0x01
 61c:	0d c0       	rjmp	.+26     	; 0x638 <vfprintf+0x12e>
 61e:	83 36       	cpi	r24, 0x63	; 99
 620:	31 f0       	breq	.+12     	; 0x62e <vfprintf+0x124>
 622:	83 37       	cpi	r24, 0x73	; 115
 624:	71 f0       	breq	.+28     	; 0x642 <vfprintf+0x138>
 626:	83 35       	cpi	r24, 0x53	; 83
 628:	09 f0       	breq	.+2      	; 0x62c <vfprintf+0x122>
 62a:	57 c0       	rjmp	.+174    	; 0x6da <vfprintf+0x1d0>
 62c:	21 c0       	rjmp	.+66     	; 0x670 <vfprintf+0x166>
 62e:	f8 01       	movw	r30, r16
 630:	80 81       	ld	r24, Z
 632:	89 83       	std	Y+1, r24	; 0x01
 634:	0e 5f       	subi	r16, 0xFE	; 254
 636:	1f 4f       	sbci	r17, 0xFF	; 255
 638:	44 24       	eor	r4, r4
 63a:	43 94       	inc	r4
 63c:	51 2c       	mov	r5, r1
 63e:	54 01       	movw	r10, r8
 640:	14 c0       	rjmp	.+40     	; 0x66a <vfprintf+0x160>
 642:	38 01       	movw	r6, r16
 644:	f2 e0       	ldi	r31, 0x02	; 2
 646:	6f 0e       	add	r6, r31
 648:	71 1c       	adc	r7, r1
 64a:	f8 01       	movw	r30, r16
 64c:	a0 80       	ld	r10, Z
 64e:	b1 80       	ldd	r11, Z+1	; 0x01
 650:	26 ff       	sbrs	r18, 6
 652:	03 c0       	rjmp	.+6      	; 0x65a <vfprintf+0x150>
 654:	65 2d       	mov	r22, r5
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <vfprintf+0x154>
 65a:	6f ef       	ldi	r22, 0xFF	; 255
 65c:	7f ef       	ldi	r23, 0xFF	; 255
 65e:	c5 01       	movw	r24, r10
 660:	2c 87       	std	Y+12, r18	; 0x0c
 662:	4c d1       	rcall	.+664    	; 0x8fc <strnlen>
 664:	2c 01       	movw	r4, r24
 666:	83 01       	movw	r16, r6
 668:	2c 85       	ldd	r18, Y+12	; 0x0c
 66a:	2f 77       	andi	r18, 0x7F	; 127
 66c:	22 2e       	mov	r2, r18
 66e:	16 c0       	rjmp	.+44     	; 0x69c <vfprintf+0x192>
 670:	38 01       	movw	r6, r16
 672:	f2 e0       	ldi	r31, 0x02	; 2
 674:	6f 0e       	add	r6, r31
 676:	71 1c       	adc	r7, r1
 678:	f8 01       	movw	r30, r16
 67a:	a0 80       	ld	r10, Z
 67c:	b1 80       	ldd	r11, Z+1	; 0x01
 67e:	26 ff       	sbrs	r18, 6
 680:	03 c0       	rjmp	.+6      	; 0x688 <vfprintf+0x17e>
 682:	65 2d       	mov	r22, r5
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <vfprintf+0x182>
 688:	6f ef       	ldi	r22, 0xFF	; 255
 68a:	7f ef       	ldi	r23, 0xFF	; 255
 68c:	c5 01       	movw	r24, r10
 68e:	2c 87       	std	Y+12, r18	; 0x0c
 690:	2a d1       	rcall	.+596    	; 0x8e6 <strnlen_P>
 692:	2c 01       	movw	r4, r24
 694:	2c 85       	ldd	r18, Y+12	; 0x0c
 696:	20 68       	ori	r18, 0x80	; 128
 698:	22 2e       	mov	r2, r18
 69a:	83 01       	movw	r16, r6
 69c:	23 fc       	sbrc	r2, 3
 69e:	19 c0       	rjmp	.+50     	; 0x6d2 <vfprintf+0x1c8>
 6a0:	83 2d       	mov	r24, r3
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	48 16       	cp	r4, r24
 6a6:	59 06       	cpc	r5, r25
 6a8:	a0 f4       	brcc	.+40     	; 0x6d2 <vfprintf+0x1c8>
 6aa:	b7 01       	movw	r22, r14
 6ac:	80 e2       	ldi	r24, 0x20	; 32
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	30 d1       	rcall	.+608    	; 0x912 <fputc>
 6b2:	3a 94       	dec	r3
 6b4:	f5 cf       	rjmp	.-22     	; 0x6a0 <vfprintf+0x196>
 6b6:	f5 01       	movw	r30, r10
 6b8:	27 fc       	sbrc	r2, 7
 6ba:	85 91       	lpm	r24, Z+
 6bc:	27 fe       	sbrs	r2, 7
 6be:	81 91       	ld	r24, Z+
 6c0:	5f 01       	movw	r10, r30
 6c2:	b7 01       	movw	r22, r14
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	25 d1       	rcall	.+586    	; 0x912 <fputc>
 6c8:	31 10       	cpse	r3, r1
 6ca:	3a 94       	dec	r3
 6cc:	f1 e0       	ldi	r31, 0x01	; 1
 6ce:	4f 1a       	sub	r4, r31
 6d0:	51 08       	sbc	r5, r1
 6d2:	41 14       	cp	r4, r1
 6d4:	51 04       	cpc	r5, r1
 6d6:	79 f7       	brne	.-34     	; 0x6b6 <vfprintf+0x1ac>
 6d8:	de c0       	rjmp	.+444    	; 0x896 <vfprintf+0x38c>
 6da:	84 36       	cpi	r24, 0x64	; 100
 6dc:	11 f0       	breq	.+4      	; 0x6e2 <vfprintf+0x1d8>
 6de:	89 36       	cpi	r24, 0x69	; 105
 6e0:	31 f5       	brne	.+76     	; 0x72e <vfprintf+0x224>
 6e2:	f8 01       	movw	r30, r16
 6e4:	27 ff       	sbrs	r18, 7
 6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <vfprintf+0x1ec>
 6e8:	60 81       	ld	r22, Z
 6ea:	71 81       	ldd	r23, Z+1	; 0x01
 6ec:	82 81       	ldd	r24, Z+2	; 0x02
 6ee:	93 81       	ldd	r25, Z+3	; 0x03
 6f0:	0c 5f       	subi	r16, 0xFC	; 252
 6f2:	1f 4f       	sbci	r17, 0xFF	; 255
 6f4:	08 c0       	rjmp	.+16     	; 0x706 <vfprintf+0x1fc>
 6f6:	60 81       	ld	r22, Z
 6f8:	71 81       	ldd	r23, Z+1	; 0x01
 6fa:	88 27       	eor	r24, r24
 6fc:	77 fd       	sbrc	r23, 7
 6fe:	80 95       	com	r24
 700:	98 2f       	mov	r25, r24
 702:	0e 5f       	subi	r16, 0xFE	; 254
 704:	1f 4f       	sbci	r17, 0xFF	; 255
 706:	2f 76       	andi	r18, 0x6F	; 111
 708:	b2 2e       	mov	r11, r18
 70a:	97 ff       	sbrs	r25, 7
 70c:	09 c0       	rjmp	.+18     	; 0x720 <vfprintf+0x216>
 70e:	90 95       	com	r25
 710:	80 95       	com	r24
 712:	70 95       	com	r23
 714:	61 95       	neg	r22
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	20 68       	ori	r18, 0x80	; 128
 71e:	b2 2e       	mov	r11, r18
 720:	2a e0       	ldi	r18, 0x0A	; 10
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	a4 01       	movw	r20, r8
 726:	27 d1       	rcall	.+590    	; 0x976 <__ultoa_invert>
 728:	a8 2e       	mov	r10, r24
 72a:	a8 18       	sub	r10, r8
 72c:	43 c0       	rjmp	.+134    	; 0x7b4 <vfprintf+0x2aa>
 72e:	85 37       	cpi	r24, 0x75	; 117
 730:	29 f4       	brne	.+10     	; 0x73c <vfprintf+0x232>
 732:	2f 7e       	andi	r18, 0xEF	; 239
 734:	b2 2e       	mov	r11, r18
 736:	2a e0       	ldi	r18, 0x0A	; 10
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	25 c0       	rjmp	.+74     	; 0x786 <vfprintf+0x27c>
 73c:	f2 2f       	mov	r31, r18
 73e:	f9 7f       	andi	r31, 0xF9	; 249
 740:	bf 2e       	mov	r11, r31
 742:	8f 36       	cpi	r24, 0x6F	; 111
 744:	c1 f0       	breq	.+48     	; 0x776 <vfprintf+0x26c>
 746:	18 f4       	brcc	.+6      	; 0x74e <vfprintf+0x244>
 748:	88 35       	cpi	r24, 0x58	; 88
 74a:	79 f0       	breq	.+30     	; 0x76a <vfprintf+0x260>
 74c:	ad c0       	rjmp	.+346    	; 0x8a8 <vfprintf+0x39e>
 74e:	80 37       	cpi	r24, 0x70	; 112
 750:	19 f0       	breq	.+6      	; 0x758 <vfprintf+0x24e>
 752:	88 37       	cpi	r24, 0x78	; 120
 754:	21 f0       	breq	.+8      	; 0x75e <vfprintf+0x254>
 756:	a8 c0       	rjmp	.+336    	; 0x8a8 <vfprintf+0x39e>
 758:	2f 2f       	mov	r18, r31
 75a:	20 61       	ori	r18, 0x10	; 16
 75c:	b2 2e       	mov	r11, r18
 75e:	b4 fe       	sbrs	r11, 4
 760:	0d c0       	rjmp	.+26     	; 0x77c <vfprintf+0x272>
 762:	8b 2d       	mov	r24, r11
 764:	84 60       	ori	r24, 0x04	; 4
 766:	b8 2e       	mov	r11, r24
 768:	09 c0       	rjmp	.+18     	; 0x77c <vfprintf+0x272>
 76a:	24 ff       	sbrs	r18, 4
 76c:	0a c0       	rjmp	.+20     	; 0x782 <vfprintf+0x278>
 76e:	9f 2f       	mov	r25, r31
 770:	96 60       	ori	r25, 0x06	; 6
 772:	b9 2e       	mov	r11, r25
 774:	06 c0       	rjmp	.+12     	; 0x782 <vfprintf+0x278>
 776:	28 e0       	ldi	r18, 0x08	; 8
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	05 c0       	rjmp	.+10     	; 0x786 <vfprintf+0x27c>
 77c:	20 e1       	ldi	r18, 0x10	; 16
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <vfprintf+0x27c>
 782:	20 e1       	ldi	r18, 0x10	; 16
 784:	32 e0       	ldi	r19, 0x02	; 2
 786:	f8 01       	movw	r30, r16
 788:	b7 fe       	sbrs	r11, 7
 78a:	07 c0       	rjmp	.+14     	; 0x79a <vfprintf+0x290>
 78c:	60 81       	ld	r22, Z
 78e:	71 81       	ldd	r23, Z+1	; 0x01
 790:	82 81       	ldd	r24, Z+2	; 0x02
 792:	93 81       	ldd	r25, Z+3	; 0x03
 794:	0c 5f       	subi	r16, 0xFC	; 252
 796:	1f 4f       	sbci	r17, 0xFF	; 255
 798:	06 c0       	rjmp	.+12     	; 0x7a6 <vfprintf+0x29c>
 79a:	60 81       	ld	r22, Z
 79c:	71 81       	ldd	r23, Z+1	; 0x01
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 5f       	subi	r16, 0xFE	; 254
 7a4:	1f 4f       	sbci	r17, 0xFF	; 255
 7a6:	a4 01       	movw	r20, r8
 7a8:	e6 d0       	rcall	.+460    	; 0x976 <__ultoa_invert>
 7aa:	a8 2e       	mov	r10, r24
 7ac:	a8 18       	sub	r10, r8
 7ae:	fb 2d       	mov	r31, r11
 7b0:	ff 77       	andi	r31, 0x7F	; 127
 7b2:	bf 2e       	mov	r11, r31
 7b4:	b6 fe       	sbrs	r11, 6
 7b6:	0b c0       	rjmp	.+22     	; 0x7ce <vfprintf+0x2c4>
 7b8:	2b 2d       	mov	r18, r11
 7ba:	2e 7f       	andi	r18, 0xFE	; 254
 7bc:	a5 14       	cp	r10, r5
 7be:	50 f4       	brcc	.+20     	; 0x7d4 <vfprintf+0x2ca>
 7c0:	b4 fe       	sbrs	r11, 4
 7c2:	0a c0       	rjmp	.+20     	; 0x7d8 <vfprintf+0x2ce>
 7c4:	b2 fc       	sbrc	r11, 2
 7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <vfprintf+0x2ce>
 7c8:	2b 2d       	mov	r18, r11
 7ca:	2e 7e       	andi	r18, 0xEE	; 238
 7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <vfprintf+0x2ce>
 7ce:	7a 2c       	mov	r7, r10
 7d0:	2b 2d       	mov	r18, r11
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <vfprintf+0x2d0>
 7d4:	7a 2c       	mov	r7, r10
 7d6:	01 c0       	rjmp	.+2      	; 0x7da <vfprintf+0x2d0>
 7d8:	75 2c       	mov	r7, r5
 7da:	24 ff       	sbrs	r18, 4
 7dc:	0d c0       	rjmp	.+26     	; 0x7f8 <vfprintf+0x2ee>
 7de:	fe 01       	movw	r30, r28
 7e0:	ea 0d       	add	r30, r10
 7e2:	f1 1d       	adc	r31, r1
 7e4:	80 81       	ld	r24, Z
 7e6:	80 33       	cpi	r24, 0x30	; 48
 7e8:	11 f4       	brne	.+4      	; 0x7ee <vfprintf+0x2e4>
 7ea:	29 7e       	andi	r18, 0xE9	; 233
 7ec:	09 c0       	rjmp	.+18     	; 0x800 <vfprintf+0x2f6>
 7ee:	22 ff       	sbrs	r18, 2
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <vfprintf+0x2f4>
 7f2:	73 94       	inc	r7
 7f4:	73 94       	inc	r7
 7f6:	04 c0       	rjmp	.+8      	; 0x800 <vfprintf+0x2f6>
 7f8:	82 2f       	mov	r24, r18
 7fa:	86 78       	andi	r24, 0x86	; 134
 7fc:	09 f0       	breq	.+2      	; 0x800 <vfprintf+0x2f6>
 7fe:	73 94       	inc	r7
 800:	23 fd       	sbrc	r18, 3
 802:	12 c0       	rjmp	.+36     	; 0x828 <vfprintf+0x31e>
 804:	20 ff       	sbrs	r18, 0
 806:	06 c0       	rjmp	.+12     	; 0x814 <vfprintf+0x30a>
 808:	5a 2c       	mov	r5, r10
 80a:	73 14       	cp	r7, r3
 80c:	18 f4       	brcc	.+6      	; 0x814 <vfprintf+0x30a>
 80e:	53 0c       	add	r5, r3
 810:	57 18       	sub	r5, r7
 812:	73 2c       	mov	r7, r3
 814:	73 14       	cp	r7, r3
 816:	60 f4       	brcc	.+24     	; 0x830 <vfprintf+0x326>
 818:	b7 01       	movw	r22, r14
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	2c 87       	std	Y+12, r18	; 0x0c
 820:	78 d0       	rcall	.+240    	; 0x912 <fputc>
 822:	73 94       	inc	r7
 824:	2c 85       	ldd	r18, Y+12	; 0x0c
 826:	f6 cf       	rjmp	.-20     	; 0x814 <vfprintf+0x30a>
 828:	73 14       	cp	r7, r3
 82a:	10 f4       	brcc	.+4      	; 0x830 <vfprintf+0x326>
 82c:	37 18       	sub	r3, r7
 82e:	01 c0       	rjmp	.+2      	; 0x832 <vfprintf+0x328>
 830:	31 2c       	mov	r3, r1
 832:	24 ff       	sbrs	r18, 4
 834:	11 c0       	rjmp	.+34     	; 0x858 <vfprintf+0x34e>
 836:	b7 01       	movw	r22, r14
 838:	80 e3       	ldi	r24, 0x30	; 48
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	2c 87       	std	Y+12, r18	; 0x0c
 83e:	69 d0       	rcall	.+210    	; 0x912 <fputc>
 840:	2c 85       	ldd	r18, Y+12	; 0x0c
 842:	22 ff       	sbrs	r18, 2
 844:	16 c0       	rjmp	.+44     	; 0x872 <vfprintf+0x368>
 846:	21 ff       	sbrs	r18, 1
 848:	03 c0       	rjmp	.+6      	; 0x850 <vfprintf+0x346>
 84a:	88 e5       	ldi	r24, 0x58	; 88
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 c0       	rjmp	.+4      	; 0x854 <vfprintf+0x34a>
 850:	88 e7       	ldi	r24, 0x78	; 120
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	b7 01       	movw	r22, r14
 856:	0c c0       	rjmp	.+24     	; 0x870 <vfprintf+0x366>
 858:	82 2f       	mov	r24, r18
 85a:	86 78       	andi	r24, 0x86	; 134
 85c:	51 f0       	breq	.+20     	; 0x872 <vfprintf+0x368>
 85e:	21 fd       	sbrc	r18, 1
 860:	02 c0       	rjmp	.+4      	; 0x866 <vfprintf+0x35c>
 862:	80 e2       	ldi	r24, 0x20	; 32
 864:	01 c0       	rjmp	.+2      	; 0x868 <vfprintf+0x35e>
 866:	8b e2       	ldi	r24, 0x2B	; 43
 868:	27 fd       	sbrc	r18, 7
 86a:	8d e2       	ldi	r24, 0x2D	; 45
 86c:	b7 01       	movw	r22, r14
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	50 d0       	rcall	.+160    	; 0x912 <fputc>
 872:	a5 14       	cp	r10, r5
 874:	30 f4       	brcc	.+12     	; 0x882 <vfprintf+0x378>
 876:	b7 01       	movw	r22, r14
 878:	80 e3       	ldi	r24, 0x30	; 48
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	4a d0       	rcall	.+148    	; 0x912 <fputc>
 87e:	5a 94       	dec	r5
 880:	f8 cf       	rjmp	.-16     	; 0x872 <vfprintf+0x368>
 882:	aa 94       	dec	r10
 884:	f4 01       	movw	r30, r8
 886:	ea 0d       	add	r30, r10
 888:	f1 1d       	adc	r31, r1
 88a:	80 81       	ld	r24, Z
 88c:	b7 01       	movw	r22, r14
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	40 d0       	rcall	.+128    	; 0x912 <fputc>
 892:	a1 10       	cpse	r10, r1
 894:	f6 cf       	rjmp	.-20     	; 0x882 <vfprintf+0x378>
 896:	33 20       	and	r3, r3
 898:	09 f4       	brne	.+2      	; 0x89c <vfprintf+0x392>
 89a:	5d ce       	rjmp	.-838    	; 0x556 <vfprintf+0x4c>
 89c:	b7 01       	movw	r22, r14
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	37 d0       	rcall	.+110    	; 0x912 <fputc>
 8a4:	3a 94       	dec	r3
 8a6:	f7 cf       	rjmp	.-18     	; 0x896 <vfprintf+0x38c>
 8a8:	f7 01       	movw	r30, r14
 8aa:	86 81       	ldd	r24, Z+6	; 0x06
 8ac:	97 81       	ldd	r25, Z+7	; 0x07
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <vfprintf+0x3aa>
 8b0:	8f ef       	ldi	r24, 0xFF	; 255
 8b2:	9f ef       	ldi	r25, 0xFF	; 255
 8b4:	2c 96       	adiw	r28, 0x0c	; 12
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	f8 94       	cli
 8ba:	de bf       	out	0x3e, r29	; 62
 8bc:	0f be       	out	0x3f, r0	; 63
 8be:	cd bf       	out	0x3d, r28	; 61
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	1f 91       	pop	r17
 8c6:	0f 91       	pop	r16
 8c8:	ff 90       	pop	r15
 8ca:	ef 90       	pop	r14
 8cc:	df 90       	pop	r13
 8ce:	cf 90       	pop	r12
 8d0:	bf 90       	pop	r11
 8d2:	af 90       	pop	r10
 8d4:	9f 90       	pop	r9
 8d6:	8f 90       	pop	r8
 8d8:	7f 90       	pop	r7
 8da:	6f 90       	pop	r6
 8dc:	5f 90       	pop	r5
 8de:	4f 90       	pop	r4
 8e0:	3f 90       	pop	r3
 8e2:	2f 90       	pop	r2
 8e4:	08 95       	ret

000008e6 <strnlen_P>:
 8e6:	fc 01       	movw	r30, r24
 8e8:	05 90       	lpm	r0, Z+
 8ea:	61 50       	subi	r22, 0x01	; 1
 8ec:	70 40       	sbci	r23, 0x00	; 0
 8ee:	01 10       	cpse	r0, r1
 8f0:	d8 f7       	brcc	.-10     	; 0x8e8 <strnlen_P+0x2>
 8f2:	80 95       	com	r24
 8f4:	90 95       	com	r25
 8f6:	8e 0f       	add	r24, r30
 8f8:	9f 1f       	adc	r25, r31
 8fa:	08 95       	ret

000008fc <strnlen>:
 8fc:	fc 01       	movw	r30, r24
 8fe:	61 50       	subi	r22, 0x01	; 1
 900:	70 40       	sbci	r23, 0x00	; 0
 902:	01 90       	ld	r0, Z+
 904:	01 10       	cpse	r0, r1
 906:	d8 f7       	brcc	.-10     	; 0x8fe <strnlen+0x2>
 908:	80 95       	com	r24
 90a:	90 95       	com	r25
 90c:	8e 0f       	add	r24, r30
 90e:	9f 1f       	adc	r25, r31
 910:	08 95       	ret

00000912 <fputc>:
 912:	0f 93       	push	r16
 914:	1f 93       	push	r17
 916:	cf 93       	push	r28
 918:	df 93       	push	r29
 91a:	18 2f       	mov	r17, r24
 91c:	09 2f       	mov	r16, r25
 91e:	eb 01       	movw	r28, r22
 920:	8b 81       	ldd	r24, Y+3	; 0x03
 922:	81 fd       	sbrc	r24, 1
 924:	03 c0       	rjmp	.+6      	; 0x92c <fputc+0x1a>
 926:	8f ef       	ldi	r24, 0xFF	; 255
 928:	9f ef       	ldi	r25, 0xFF	; 255
 92a:	20 c0       	rjmp	.+64     	; 0x96c <fputc+0x5a>
 92c:	82 ff       	sbrs	r24, 2
 92e:	10 c0       	rjmp	.+32     	; 0x950 <fputc+0x3e>
 930:	4e 81       	ldd	r20, Y+6	; 0x06
 932:	5f 81       	ldd	r21, Y+7	; 0x07
 934:	2c 81       	ldd	r18, Y+4	; 0x04
 936:	3d 81       	ldd	r19, Y+5	; 0x05
 938:	42 17       	cp	r20, r18
 93a:	53 07       	cpc	r21, r19
 93c:	7c f4       	brge	.+30     	; 0x95c <fputc+0x4a>
 93e:	e8 81       	ld	r30, Y
 940:	f9 81       	ldd	r31, Y+1	; 0x01
 942:	9f 01       	movw	r18, r30
 944:	2f 5f       	subi	r18, 0xFF	; 255
 946:	3f 4f       	sbci	r19, 0xFF	; 255
 948:	39 83       	std	Y+1, r19	; 0x01
 94a:	28 83       	st	Y, r18
 94c:	10 83       	st	Z, r17
 94e:	06 c0       	rjmp	.+12     	; 0x95c <fputc+0x4a>
 950:	e8 85       	ldd	r30, Y+8	; 0x08
 952:	f9 85       	ldd	r31, Y+9	; 0x09
 954:	81 2f       	mov	r24, r17
 956:	19 95       	eicall
 958:	89 2b       	or	r24, r25
 95a:	29 f7       	brne	.-54     	; 0x926 <fputc+0x14>
 95c:	2e 81       	ldd	r18, Y+6	; 0x06
 95e:	3f 81       	ldd	r19, Y+7	; 0x07
 960:	2f 5f       	subi	r18, 0xFF	; 255
 962:	3f 4f       	sbci	r19, 0xFF	; 255
 964:	3f 83       	std	Y+7, r19	; 0x07
 966:	2e 83       	std	Y+6, r18	; 0x06
 968:	81 2f       	mov	r24, r17
 96a:	90 2f       	mov	r25, r16
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	1f 91       	pop	r17
 972:	0f 91       	pop	r16
 974:	08 95       	ret

00000976 <__ultoa_invert>:
 976:	fa 01       	movw	r30, r20
 978:	aa 27       	eor	r26, r26
 97a:	28 30       	cpi	r18, 0x08	; 8
 97c:	51 f1       	breq	.+84     	; 0x9d2 <__ultoa_invert+0x5c>
 97e:	20 31       	cpi	r18, 0x10	; 16
 980:	81 f1       	breq	.+96     	; 0x9e2 <__ultoa_invert+0x6c>
 982:	e8 94       	clt
 984:	6f 93       	push	r22
 986:	6e 7f       	andi	r22, 0xFE	; 254
 988:	6e 5f       	subi	r22, 0xFE	; 254
 98a:	7f 4f       	sbci	r23, 0xFF	; 255
 98c:	8f 4f       	sbci	r24, 0xFF	; 255
 98e:	9f 4f       	sbci	r25, 0xFF	; 255
 990:	af 4f       	sbci	r26, 0xFF	; 255
 992:	b1 e0       	ldi	r27, 0x01	; 1
 994:	3e d0       	rcall	.+124    	; 0xa12 <__ultoa_invert+0x9c>
 996:	b4 e0       	ldi	r27, 0x04	; 4
 998:	3c d0       	rcall	.+120    	; 0xa12 <__ultoa_invert+0x9c>
 99a:	67 0f       	add	r22, r23
 99c:	78 1f       	adc	r23, r24
 99e:	89 1f       	adc	r24, r25
 9a0:	9a 1f       	adc	r25, r26
 9a2:	a1 1d       	adc	r26, r1
 9a4:	68 0f       	add	r22, r24
 9a6:	79 1f       	adc	r23, r25
 9a8:	8a 1f       	adc	r24, r26
 9aa:	91 1d       	adc	r25, r1
 9ac:	a1 1d       	adc	r26, r1
 9ae:	6a 0f       	add	r22, r26
 9b0:	71 1d       	adc	r23, r1
 9b2:	81 1d       	adc	r24, r1
 9b4:	91 1d       	adc	r25, r1
 9b6:	a1 1d       	adc	r26, r1
 9b8:	20 d0       	rcall	.+64     	; 0x9fa <__ultoa_invert+0x84>
 9ba:	09 f4       	brne	.+2      	; 0x9be <__ultoa_invert+0x48>
 9bc:	68 94       	set
 9be:	3f 91       	pop	r19
 9c0:	2a e0       	ldi	r18, 0x0A	; 10
 9c2:	26 9f       	mul	r18, r22
 9c4:	11 24       	eor	r1, r1
 9c6:	30 19       	sub	r19, r0
 9c8:	30 5d       	subi	r19, 0xD0	; 208
 9ca:	31 93       	st	Z+, r19
 9cc:	de f6       	brtc	.-74     	; 0x984 <__ultoa_invert+0xe>
 9ce:	cf 01       	movw	r24, r30
 9d0:	08 95       	ret
 9d2:	46 2f       	mov	r20, r22
 9d4:	47 70       	andi	r20, 0x07	; 7
 9d6:	40 5d       	subi	r20, 0xD0	; 208
 9d8:	41 93       	st	Z+, r20
 9da:	b3 e0       	ldi	r27, 0x03	; 3
 9dc:	0f d0       	rcall	.+30     	; 0x9fc <__ultoa_invert+0x86>
 9de:	c9 f7       	brne	.-14     	; 0x9d2 <__ultoa_invert+0x5c>
 9e0:	f6 cf       	rjmp	.-20     	; 0x9ce <__ultoa_invert+0x58>
 9e2:	46 2f       	mov	r20, r22
 9e4:	4f 70       	andi	r20, 0x0F	; 15
 9e6:	40 5d       	subi	r20, 0xD0	; 208
 9e8:	4a 33       	cpi	r20, 0x3A	; 58
 9ea:	18 f0       	brcs	.+6      	; 0x9f2 <__ultoa_invert+0x7c>
 9ec:	49 5d       	subi	r20, 0xD9	; 217
 9ee:	31 fd       	sbrc	r19, 1
 9f0:	40 52       	subi	r20, 0x20	; 32
 9f2:	41 93       	st	Z+, r20
 9f4:	02 d0       	rcall	.+4      	; 0x9fa <__ultoa_invert+0x84>
 9f6:	a9 f7       	brne	.-22     	; 0x9e2 <__ultoa_invert+0x6c>
 9f8:	ea cf       	rjmp	.-44     	; 0x9ce <__ultoa_invert+0x58>
 9fa:	b4 e0       	ldi	r27, 0x04	; 4
 9fc:	a6 95       	lsr	r26
 9fe:	97 95       	ror	r25
 a00:	87 95       	ror	r24
 a02:	77 95       	ror	r23
 a04:	67 95       	ror	r22
 a06:	ba 95       	dec	r27
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__ultoa_invert+0x86>
 a0a:	00 97       	sbiw	r24, 0x00	; 0
 a0c:	61 05       	cpc	r22, r1
 a0e:	71 05       	cpc	r23, r1
 a10:	08 95       	ret
 a12:	9b 01       	movw	r18, r22
 a14:	ac 01       	movw	r20, r24
 a16:	0a 2e       	mov	r0, r26
 a18:	06 94       	lsr	r0
 a1a:	57 95       	ror	r21
 a1c:	47 95       	ror	r20
 a1e:	37 95       	ror	r19
 a20:	27 95       	ror	r18
 a22:	ba 95       	dec	r27
 a24:	c9 f7       	brne	.-14     	; 0xa18 <__ultoa_invert+0xa2>
 a26:	62 0f       	add	r22, r18
 a28:	73 1f       	adc	r23, r19
 a2a:	84 1f       	adc	r24, r20
 a2c:	95 1f       	adc	r25, r21
 a2e:	a0 1d       	adc	r26, r0
 a30:	08 95       	ret

00000a32 <_exit>:
 a32:	f8 94       	cli

00000a34 <__stop_program>:
 a34:	ff cf       	rjmp	.-2      	; 0xa34 <__stop_program>
