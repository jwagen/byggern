
Node 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00000bb6  00000c4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001a6  008001a6  00000cf0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000258  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d5b  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e14  00000000  00000000  00002cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c64  00000000  00000000  00003b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000055c  00000000  00000000  00004778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c6  00000000  00000000  00004cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000108b  00000000  00000000  0000539a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  00006425  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 eb       	ldi	r30, 0xB6	; 182
  84:	fb e0       	ldi	r31, 0x0B	; 11
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 3a       	cpi	r26, 0xA6	; 166
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 ea       	ldi	r26, 0xA6	; 166
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 3b       	cpi	r26, 0xB0	; 176
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  a6:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
const uint8_t ADC_mux_channel1 = 0x4;
const uint8_t ADC_mux_channel2 = 0x5;
const uint8_t ADC_mux_channel3 = 0x6;
const uint8_t ADC_mux_channel4 = 0x7;

void adc_init(void){
  ae:	08 95       	ret

000000b0 <adc_read>:
}

uint8_t adc_read(uint8_t channel){
	uint8_t result = 0;
	
	if(channel == 1){
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	41 f4       	brne	.+16     	; 0xc4 <adc_read+0x14>
		*ADC_start_adress = ADC_mux_channel1;
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	80 93 00 14 	sts	0x1400, r24
		while((PIND & (1 <<PIND2))){
  ba:	82 99       	sbic	0x10, 2	; 16
  bc:	fe cf       	rjmp	.-4      	; 0xba <adc_read+0xa>
		}
		
		
		result = *ADC_start_adress;	
  be:	80 91 00 14 	lds	r24, 0x1400
  c2:	08 95       	ret
	}
	
	else if(channel == 2){
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	41 f4       	brne	.+16     	; 0xd8 <adc_read+0x28>
		*ADC_start_adress = ADC_mux_channel2;
  c8:	85 e0       	ldi	r24, 0x05	; 5
  ca:	80 93 00 14 	sts	0x1400, r24
		while((PIND & (1 <<PIND2))){
  ce:	82 99       	sbic	0x10, 2	; 16
  d0:	fe cf       	rjmp	.-4      	; 0xce <adc_read+0x1e>
		}
		
		result = *ADC_start_adress;
  d2:	80 91 00 14 	lds	r24, 0x1400
  d6:	08 95       	ret
	}
	
	if(channel == 3){
  d8:	83 30       	cpi	r24, 0x03	; 3
  da:	41 f4       	brne	.+16     	; 0xec <adc_read+0x3c>
		*ADC_start_adress = ADC_mux_channel3;
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	80 93 00 14 	sts	0x1400, r24
		while((PIND & (1 <<PIND2))){
  e2:	82 99       	sbic	0x10, 2	; 16
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <adc_read+0x32>
		}
		
		
		result = *ADC_start_adress;
  e6:	80 91 00 14 	lds	r24, 0x1400
  ea:	08 95       	ret
	}
	
	else if(channel == 4){
  ec:	84 30       	cpi	r24, 0x04	; 4
  ee:	41 f4       	brne	.+16     	; 0x100 <adc_read+0x50>
		*ADC_start_adress = ADC_mux_channel4;
  f0:	87 e0       	ldi	r24, 0x07	; 7
  f2:	80 93 00 14 	sts	0x1400, r24
		while((PIND & (1 <<PIND2))){
  f6:	82 99       	sbic	0x10, 2	; 16
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <adc_read+0x46>
		}
		
		result = *ADC_start_adress;
  fa:	80 91 00 14 	lds	r24, 0x1400
  fe:	08 95       	ret
void adc_init(void){

}

uint8_t adc_read(uint8_t channel){
	uint8_t result = 0;
 100:	80 e0       	ldi	r24, 0x00	; 0
		
		result = *ADC_start_adress;
	}	
	
	return result;
 102:	08 95       	ret

00000104 <button_init>:
#include "button.h"

#define BUTTON_NUMBER 3

void button_init(void){
	DDRD &= ~((1<<PD1) | (1<<PD0));	//Set touch buttons as input
 104:	81 b3       	in	r24, 0x11	; 17
 106:	8c 7f       	andi	r24, 0xFC	; 252
 108:	81 bb       	out	0x11, r24	; 17
	
	DDRE &= ~((1<<PE0));			//Set joystick button as input
 10a:	30 98       	cbi	0x06, 0	; 6
	PORTE |= (1<<PE0);				//Enable pullup
 10c:	38 9a       	sbi	0x07, 0	; 7
 10e:	08 95       	ret

00000110 <can_init>:
#include "mcp2515.h"
#include "mcp2515_registers.h"


void can_init(){
	mcp2515_init();
 110:	0e 94 b1 01 	call	0x362	; 0x362 <mcp2515_init>
	
	
	//Enable interrupt on received message in both buffers
	mcp2515_write(CANINTE, (1 <<RX1IE) | (1<<RX0IE));
 114:	66 e0       	ldi	r22, 0x06	; 6
 116:	8b e2       	ldi	r24, 0x2B	; 43
 118:	0e 94 c7 01 	call	0x38e	; 0x38e <mcp2515_write>
	
	//Set mode to normal operation
	mcp2515_write(CANCTRL,MODE_NORMAL);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	0e 94 c7 01 	call	0x38e	; 0x38e <mcp2515_write>
 124:	08 95       	ret

00000126 <can_transmit>:
}

void can_transmit(can_message_t message){
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	2b 97       	sbiw	r28, 0x0b	; 11
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
 142:	e9 82       	std	Y+1, r14	; 0x01
 144:	fa 82       	std	Y+2, r15	; 0x02
 146:	0b 83       	std	Y+3, r16	; 0x03
 148:	1c 83       	std	Y+4, r17	; 0x04
 14a:	2d 83       	std	Y+5, r18	; 0x05
 14c:	3e 83       	std	Y+6, r19	; 0x06
 14e:	4f 83       	std	Y+7, r20	; 0x07
 150:	58 87       	std	Y+8, r21	; 0x08
 152:	69 87       	std	Y+9, r22	; 0x09
 154:	7a 87       	std	Y+10, r23	; 0x0a
 156:	8b 87       	std	Y+11, r24	; 0x0b
 158:	e9 80       	ldd	r14, Y+1	; 0x01
 15a:	fa 80       	ldd	r15, Y+2	; 0x02
	//Use buffer 0
	
	//Load ID
	mcp2515_write(TXB0SIDH, (0xff & (message.id >> 3))); //load high
 15c:	b7 01       	movw	r22, r14
 15e:	76 95       	lsr	r23
 160:	67 95       	ror	r22
 162:	76 95       	lsr	r23
 164:	67 95       	ror	r22
 166:	76 95       	lsr	r23
 168:	67 95       	ror	r22
 16a:	81 e3       	ldi	r24, 0x31	; 49
 16c:	0e 94 c7 01 	call	0x38e	; 0x38e <mcp2515_write>
	mcp2515_write(TXB0SIDL, 0xe0 & (message.id << 5));
 170:	6e 2d       	mov	r22, r14
 172:	62 95       	swap	r22
 174:	66 0f       	add	r22, r22
 176:	60 7e       	andi	r22, 0xE0	; 224
 178:	82 e3       	ldi	r24, 0x32	; 50
 17a:	0e 94 c7 01 	call	0x38e	; 0x38e <mcp2515_write>
	
	//Set length
	mcp2515_write(TXB0DLC, 0x0f & message.length);
 17e:	60 2f       	mov	r22, r16
 180:	6f 70       	andi	r22, 0x0F	; 15
 182:	85 e3       	ldi	r24, 0x35	; 53
 184:	0e 94 c7 01 	call	0x38e	; 0x38e <mcp2515_write>
	
	//Load data
	for (uint8_t i = 0; i < message.length; i++){
 188:	00 23       	and	r16, r16
 18a:	79 f0       	breq	.+30     	; 0x1aa <can_transmit+0x84>
 18c:	7e 01       	movw	r14, r28
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	e8 0e       	add	r14, r24
 192:	f1 1c       	adc	r15, r1
 194:	0a 5c       	subi	r16, 0xCA	; 202
 196:	16 e3       	ldi	r17, 0x36	; 54
		mcp2515_write(TXB0D0+i, message.data[i]);
 198:	f7 01       	movw	r30, r14
 19a:	61 91       	ld	r22, Z+
 19c:	7f 01       	movw	r14, r30
 19e:	81 2f       	mov	r24, r17
 1a0:	0e 94 c7 01 	call	0x38e	; 0x38e <mcp2515_write>
 1a4:	1f 5f       	subi	r17, 0xFF	; 255
	
	//Set length
	mcp2515_write(TXB0DLC, 0x0f & message.length);
	
	//Load data
	for (uint8_t i = 0; i < message.length; i++){
 1a6:	10 13       	cpse	r17, r16
 1a8:	f7 cf       	rjmp	.-18     	; 0x198 <can_transmit+0x72>
		mcp2515_write(TXB0D0+i, message.data[i]);
	}
	
	//Send request to send
	mcp2515_rts(1);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 db 01 	call	0x3b6	; 0x3b6 <mcp2515_rts>
	
}
 1b0:	2b 96       	adiw	r28, 0x0b	; 11
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	08 95       	ret

000001ca <can_recive>:

can_message_t can_recive(){
 1ca:	9f 92       	push	r9
 1cc:	af 92       	push	r10
 1ce:	bf 92       	push	r11
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	2b 97       	sbiw	r28, 0x0b	; 11
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	7c 01       	movw	r14, r24
	can_message_t message;
	//Read id
	message.id = mcp2515_read(RXB0SIDH) << 3;
 1f2:	81 e6       	ldi	r24, 0x61	; 97
 1f4:	0e 94 b4 01 	call	0x368	; 0x368 <mcp2515_read>
 1f8:	c8 2e       	mov	r12, r24
	message.id |= (7 & (mcp2515_read(RXB0SIDL) >> 5)) ;
 1fa:	82 e6       	ldi	r24, 0x62	; 98
 1fc:	0e 94 b4 01 	call	0x368	; 0x368 <mcp2515_read>
}

can_message_t can_recive(){
	can_message_t message;
	//Read id
	message.id = mcp2515_read(RXB0SIDH) << 3;
 200:	d1 2c       	mov	r13, r1
 202:	cc 0c       	add	r12, r12
 204:	dd 1c       	adc	r13, r13
 206:	cc 0c       	add	r12, r12
 208:	dd 1c       	adc	r13, r13
 20a:	cc 0c       	add	r12, r12
 20c:	dd 1c       	adc	r13, r13
	message.id |= (7 & (mcp2515_read(RXB0SIDL) >> 5)) ;
 20e:	82 95       	swap	r24
 210:	86 95       	lsr	r24
 212:	87 70       	andi	r24, 0x07	; 7
 214:	c8 2a       	or	r12, r24
	
	//Read length
	message.length = 0x0f & mcp2515_read(RXB0DLC);
 216:	85 e6       	ldi	r24, 0x65	; 101
 218:	0e 94 b4 01 	call	0x368	; 0x368 <mcp2515_read>
 21c:	8f 70       	andi	r24, 0x0F	; 15
 21e:	98 2e       	mov	r9, r24
	
	//Read data
	for (uint8_t i = 0; i < message.length; i++){
 220:	a9 f0       	breq	.+42     	; 0x24c <can_recive+0x82>
 222:	8e 01       	movw	r16, r28
 224:	0c 5f       	subi	r16, 0xFC	; 252
 226:	1f 4f       	sbci	r17, 0xFF	; 255
 228:	0f 2e       	mov	r0, r31
 22a:	f6 e6       	ldi	r31, 0x66	; 102
 22c:	af 2e       	mov	r10, r31
 22e:	f0 2d       	mov	r31, r0
 230:	a8 0e       	add	r10, r24
 232:	0f 2e       	mov	r0, r31
 234:	f6 e6       	ldi	r31, 0x66	; 102
 236:	bf 2e       	mov	r11, r31
 238:	f0 2d       	mov	r31, r0
		message.data[i] = mcp2515_read(RXB0D0+i);
 23a:	8b 2d       	mov	r24, r11
 23c:	0e 94 b4 01 	call	0x368	; 0x368 <mcp2515_read>
 240:	f8 01       	movw	r30, r16
 242:	81 93       	st	Z+, r24
 244:	8f 01       	movw	r16, r30
 246:	b3 94       	inc	r11
	
	//Read length
	message.length = 0x0f & mcp2515_read(RXB0DLC);
	
	//Read data
	for (uint8_t i = 0; i < message.length; i++){
 248:	ba 10       	cpse	r11, r10
 24a:	f7 cf       	rjmp	.-18     	; 0x23a <can_recive+0x70>
		message.data[i] = mcp2515_read(RXB0D0+i);
	}
	
	//Clear interrupt flags
	mcp2515_write(CANINTF, 0x00);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	8c e2       	ldi	r24, 0x2C	; 44
 250:	0e 94 c7 01 	call	0x38e	; 0x38e <mcp2515_write>
	
	return message;
 254:	da 82       	std	Y+2, r13	; 0x02
 256:	c9 82       	std	Y+1, r12	; 0x01
 258:	9b 82       	std	Y+3, r9	; 0x03
 25a:	8b e0       	ldi	r24, 0x0B	; 11
 25c:	fe 01       	movw	r30, r28
 25e:	31 96       	adiw	r30, 0x01	; 1
 260:	d7 01       	movw	r26, r14
 262:	01 90       	ld	r0, Z+
 264:	0d 92       	st	X+, r0
 266:	8a 95       	dec	r24
 268:	e1 f7       	brne	.-8      	; 0x262 <can_recive+0x98>
	
	
 26a:	c7 01       	movw	r24, r14
 26c:	2b 96       	adiw	r28, 0x0b	; 11
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	f8 94       	cli
 272:	de bf       	out	0x3e, r29	; 62
 274:	0f be       	out	0x3f, r0	; 63
 276:	cd bf       	out	0x3d, r28	; 61
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	bf 90       	pop	r11
 28a:	af 90       	pop	r10
 28c:	9f 90       	pop	r9
 28e:	08 95       	ret

00000290 <joystick_init>:
#define NEUTRAL_RANGE 4

static joystick_pos_t offset = {0, 0};


void joystick_init(void){
 290:	08 95       	ret

00000292 <joystick_read>:

	
}

joystick_pos_t joystick_read(void){
 292:	cf 93       	push	r28
	joystick_pos_t reading;
	reading.x = (int8_t)(((int16_t) adc_read(JOYSTICK_X_ADC_CHANNEL)) - 128) + offset.x;
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 58 00 	call	0xb0	; 0xb0 <adc_read>
 29a:	c0 91 a6 01 	lds	r28, 0x01A6
 29e:	c0 58       	subi	r28, 0x80	; 128
 2a0:	c8 0f       	add	r28, r24
	reading.y = (int8_t)(((int16_t) adc_read(JOYSTICK_Y_ADC_CHANNEL)) - 128) + offset.y;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 58 00 	call	0xb0	; 0xb0 <adc_read>
 2a8:	90 91 a7 01 	lds	r25, 0x01A7
 2ac:	90 58       	subi	r25, 0x80	; 128
 2ae:	98 0f       	add	r25, r24
	
	return reading;
}
 2b0:	8c 2f       	mov	r24, r28
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <main>:




int main(void)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	2b 97       	sbiw	r28, 0x0b	; 11
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
	
	sram_init();
 2ca:	0e 94 c8 02 	call	0x590	; 0x590 <sram_init>
	adc_init();
 2ce:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	button_init();
 2d2:	0e 94 82 00 	call	0x104	; 0x104 <button_init>
	oled_init();
 2d6:	0e 94 86 02 	call	0x50c	; 0x50c <oled_init>
	uart_init();
 2da:	0e 94 d7 02 	call	0x5ae	; 0x5ae <uart_init>
	can_init();
 2de:	0e 94 88 00 	call	0x110	; 0x110 <can_init>
	joystick_init();
 2e2:	0e 94 48 01 	call	0x290	; 0x290 <joystick_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e6:	2f ef       	ldi	r18, 0xFF	; 255
 2e8:	8f e7       	ldi	r24, 0x7F	; 127
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x36>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0x40>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0x42>
	
	

	_delay_ms(100);

	printf("Init done\n");
 2f8:	8e e0       	ldi	r24, 0x0E	; 14
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 2f 03 	call	0x65e	; 0x65e <puts>
		
		can_message_t r = can_recive();
		node2_send_requested_data(r);
		
		//printf("Sendt message = %d\n", m.data[0]);
		printf("Recived id = %d\n", r.id);
 300:	0f 2e       	mov	r0, r31
 302:	f8 e1       	ldi	r31, 0x18	; 24
 304:	cf 2e       	mov	r12, r31
 306:	f1 e0       	ldi	r31, 0x01	; 1
 308:	df 2e       	mov	r13, r31
 30a:	f0 2d       	mov	r31, r0
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	92 e0       	ldi	r25, 0x02	; 2
 312:	21 50       	subi	r18, 0x01	; 1
 314:	80 40       	sbci	r24, 0x00	; 0
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <main+0x5c>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x66>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x68>
	
	while(1){

		_delay_ms(200);
		
		can_message_t r = can_recive();
 31e:	ce 01       	movw	r24, r28
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	0e 94 e5 00 	call	0x1ca	; 0x1ca <can_recive>
		node2_send_requested_data(r);
 326:	e9 80       	ldd	r14, Y+1	; 0x01
 328:	fa 80       	ldd	r15, Y+2	; 0x02
 32a:	0b 81       	ldd	r16, Y+3	; 0x03
 32c:	1c 81       	ldd	r17, Y+4	; 0x04
 32e:	2d 81       	ldd	r18, Y+5	; 0x05
 330:	3e 81       	ldd	r19, Y+6	; 0x06
 332:	4f 81       	ldd	r20, Y+7	; 0x07
 334:	58 85       	ldd	r21, Y+8	; 0x08
 336:	69 85       	ldd	r22, Y+9	; 0x09
 338:	7a 85       	ldd	r23, Y+10	; 0x0a
 33a:	8b 85       	ldd	r24, Y+11	; 0x0b
 33c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <node2_send_requested_data>
		
		//printf("Sendt message = %d\n", m.data[0]);
		printf("Recived id = %d\n", r.id);
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	8f 93       	push	r24
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	8f 93       	push	r24
 348:	df 92       	push	r13
 34a:	cf 92       	push	r12
 34c:	0e 94 1b 03 	call	0x636	; 0x636 <printf>
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	d9 cf       	rjmp	.-78     	; 0x30c <main+0x56>

0000035a <mcp2515_disable>:
#include "mcp2515.h"
#include "spi.h"

void mcp2515_disable(){
	//Set CS high
	PORTB |= (1<<PB4);
 35a:	c4 9a       	sbi	0x18, 4	; 24
 35c:	08 95       	ret

0000035e <mcp2515_enable>:
}

void mcp2515_enable(){
	//Set CS low
	PORTB &= ~(1<<PB4);	
 35e:	c4 98       	cbi	0x18, 4	; 24
 360:	08 95       	ret

00000362 <mcp2515_init>:
}

void mcp2515_init(){
	spi_init();
 362:	0e 94 ba 02 	call	0x574	; 0x574 <spi_init>
 366:	08 95       	ret

00000368 <mcp2515_read>:
}

//Read data from register beginning at selected address.
uint8_t mcp2515_read(uint8_t address){
 368:	cf 93       	push	r28
 36a:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	mcp2515_enable();
 36c:	0e 94 af 01 	call	0x35e	; 0x35e <mcp2515_enable>
	spi_transmit(0x03);
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	0e 94 c1 02 	call	0x582	; 0x582 <spi_transmit>
	spi_transmit(address);
 376:	8c 2f       	mov	r24, r28
 378:	0e 94 c1 02 	call	0x582	; 0x582 <spi_transmit>
	
	//recive data
	data = spi_transmit(0);
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 c1 02 	call	0x582	; 0x582 <spi_transmit>
 382:	c8 2f       	mov	r28, r24
	mcp2515_disable();	
 384:	0e 94 ad 01 	call	0x35a	; 0x35a <mcp2515_disable>
	return data;
}
 388:	8c 2f       	mov	r24, r28
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <mcp2515_write>:

//Write data to register beginning at selected address.
void mcp2515_write(uint8_t address, uint8_t data){
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	d8 2f       	mov	r29, r24
 394:	c6 2f       	mov	r28, r22
	mcp2515_enable();
 396:	0e 94 af 01 	call	0x35e	; 0x35e <mcp2515_enable>
	spi_transmit(0x02);
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	0e 94 c1 02 	call	0x582	; 0x582 <spi_transmit>
	spi_transmit(address);
 3a0:	8d 2f       	mov	r24, r29
 3a2:	0e 94 c1 02 	call	0x582	; 0x582 <spi_transmit>
	
	//send data
	spi_transmit(data);
 3a6:	8c 2f       	mov	r24, r28
 3a8:	0e 94 c1 02 	call	0x582	; 0x582 <spi_transmit>
	mcp2515_disable();
 3ac:	0e 94 ad 01 	call	0x35a	; 0x35a <mcp2515_disable>
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <mcp2515_rts>:

//Instructs controller to begin message transmission sequence for
//any of the transmit buffers
void mcp2515_rts(uint8_t registers){
 3b6:	cf 93       	push	r28
 3b8:	c8 2f       	mov	r28, r24
	mcp2515_enable();
 3ba:	0e 94 af 01 	call	0x35e	; 0x35e <mcp2515_enable>
	spi_transmit(0x80 | (7 & registers));
 3be:	8c 2f       	mov	r24, r28
 3c0:	87 70       	andi	r24, 0x07	; 7
 3c2:	80 68       	ori	r24, 0x80	; 128
 3c4:	0e 94 c1 02 	call	0x582	; 0x582 <spi_transmit>
	mcp2515_disable();
 3c8:	0e 94 ad 01 	call	0x35a	; 0x35a <mcp2515_disable>
}
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <node2_send_requested_data>:
void node2_init(){
	
}

//Sends data requested by node 2
void node2_send_requested_data(can_message_t message){
 3d0:	cf 92       	push	r12
 3d2:	df 92       	push	r13
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	66 97       	sbiw	r28, 0x16	; 22
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	ec 86       	std	Y+12, r14	; 0x0c
 3f2:	fd 86       	std	Y+13, r15	; 0x0d
 3f4:	0c 85       	ldd	r16, Y+12	; 0x0c
 3f6:	1d 85       	ldd	r17, Y+13	; 0x0d
	printf("Received id = %d ", message.id);
 3f8:	1f 93       	push	r17
 3fa:	0f 93       	push	r16
 3fc:	89 e2       	ldi	r24, 0x29	; 41
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	9f 93       	push	r25
 402:	8f 93       	push	r24
 404:	0e 94 1b 03 	call	0x636	; 0x636 <printf>
	//printf("Received data = %d ", message.data[0]);
	//printf("Received data = %d\n", message.data[1]);
	
	can_message_t send_message;
	if (message.id == REQUEST_JOYSTICK_POS){
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	08 3e       	cpi	r16, 0xE8	; 232
 412:	13 40       	sbci	r17, 0x03	; 3
 414:	09 f0       	breq	.+2      	; 0x418 <node2_send_requested_data+0x48>
 416:	50 c0       	rjmp	.+160    	; 0x4b8 <node2_send_requested_data+0xe8>
		joystick_pos_t  pos = joystick_read();
 418:	0e 94 49 01 	call	0x292	; 0x292 <joystick_read>
 41c:	c8 2e       	mov	r12, r24
 41e:	d9 2e       	mov	r13, r25
		printf("Joystick pos : x = %d, y = %d\n", pos.x, pos.y);
 420:	89 2f       	mov	r24, r25
 422:	99 27       	eor	r25, r25
 424:	87 fd       	sbrc	r24, 7
 426:	90 95       	com	r25
 428:	9f 93       	push	r25
 42a:	df 92       	push	r13
 42c:	4c 2d       	mov	r20, r12
 42e:	55 27       	eor	r21, r21
 430:	47 fd       	sbrc	r20, 7
 432:	50 95       	com	r21
 434:	5f 93       	push	r21
 436:	cf 92       	push	r12
 438:	4b e3       	ldi	r20, 0x3B	; 59
 43a:	51 e0       	ldi	r21, 0x01	; 1
 43c:	5f 93       	push	r21
 43e:	4f 93       	push	r20
 440:	0e 94 1b 03 	call	0x636	; 0x636 <printf>
		send_message.data[1] = pos.y;
		
		send_message.length = 2;
		send_message.id = SENDT_JOYSTICK_POS;
		
		printf("Sent message id = %d  ", send_message.id);
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	8f 93       	push	r24
 448:	89 ee       	ldi	r24, 0xE9	; 233
 44a:	8f 93       	push	r24
 44c:	0a e5       	ldi	r16, 0x5A	; 90
 44e:	11 e0       	ldi	r17, 0x01	; 1
 450:	1f 93       	push	r17
 452:	0f 93       	push	r16
 454:	0e 94 1b 03 	call	0x636	; 0x636 <printf>
		printf("Sent message data = %d  ", send_message.data[0]);
 458:	1f 92       	push	r1
 45a:	cf 92       	push	r12
 45c:	41 e7       	ldi	r20, 0x71	; 113
 45e:	51 e0       	ldi	r21, 0x01	; 1
 460:	5f 93       	push	r21
 462:	4f 93       	push	r20
 464:	0e 94 1b 03 	call	0x636	; 0x636 <printf>
		printf("Sent message id = %d  ", send_message.data[1]);
 468:	1f 92       	push	r1
 46a:	df 92       	push	r13
 46c:	1f 93       	push	r17
 46e:	0f 93       	push	r16
 470:	0e 94 1b 03 	call	0x636	; 0x636 <printf>
		printf("Sent message length = %d  \n", send_message.length);
 474:	1f 92       	push	r1
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	8f 93       	push	r24
 47a:	4a e8       	ldi	r20, 0x8A	; 138
 47c:	51 e0       	ldi	r21, 0x01	; 1
 47e:	5f 93       	push	r21
 480:	4f 93       	push	r20
 482:	0e 94 1b 03 	call	0x636	; 0x636 <printf>
		
		
		can_transmit(send_message);
 486:	89 ee       	ldi	r24, 0xE9	; 233
 488:	e8 2e       	mov	r14, r24
 48a:	89 83       	std	Y+1, r24	; 0x01
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	8a 83       	std	Y+2, r24	; 0x02
 490:	0f 2e       	mov	r0, r31
 492:	f3 e0       	ldi	r31, 0x03	; 3
 494:	ff 2e       	mov	r15, r31
 496:	f0 2d       	mov	r31, r0
 498:	02 e0       	ldi	r16, 0x02	; 2
 49a:	1c 2d       	mov	r17, r12
 49c:	2d 2d       	mov	r18, r13
 49e:	3e 81       	ldd	r19, Y+6	; 0x06
 4a0:	4f 81       	ldd	r20, Y+7	; 0x07
 4a2:	58 85       	ldd	r21, Y+8	; 0x08
 4a4:	69 85       	ldd	r22, Y+9	; 0x09
 4a6:	7a 85       	ldd	r23, Y+10	; 0x0a
 4a8:	8b 85       	ldd	r24, Y+11	; 0x0b
 4aa:	0e 94 93 00 	call	0x126	; 0x126 <can_transmit>
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	f8 94       	cli
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	cd bf       	out	0x3d, r28	; 61
		
	}
 4b8:	66 96       	adiw	r28, 0x16	; 22
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	f8 94       	cli
 4be:	de bf       	out	0x3e, r29	; 62
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	cd bf       	out	0x3d, r28	; 61
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	ff 90       	pop	r15
 4ce:	ef 90       	pop	r14
 4d0:	df 90       	pop	r13
 4d2:	cf 90       	pop	r12
 4d4:	08 95       	ret

000004d6 <oled_goto_line>:
void oled_home(void){
	
}

void oled_goto_line(uint8_t line){
	oled_state.cursor_y = line & 0x07;
 4d6:	87 70       	andi	r24, 0x07	; 7
 4d8:	80 93 a9 01 	sts	0x01A9, r24
	
	oled_write_command(0xb0 | (0x07 & oled_state.cursor_y));
 4dc:	80 6b       	ori	r24, 0xB0	; 176
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
 4de:	80 93 00 10 	sts	0x1000, r24
 4e2:	08 95       	ret

000004e4 <oled_clear_line>:
	oled_write_command((1<<4) | oled_state.cursor_x >> 4);
}

//Clear single line(page)
void oled_clear_line(uint8_t line){
	oled_goto_line(line);
 4e4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <oled_goto_line>
	for(uint8_t i = 0; i < 128; i++){
 4e8:	80 e0       	ldi	r24, 0x00	; 0
	oled_write_command(0xaf); // display on
}

//Writes data to the display
void oled_write_data(uint8_t data){
	*oled_data_address = data;
 4ea:	e0 e0       	ldi	r30, 0x00	; 0
 4ec:	f2 e1       	ldi	r31, 0x12	; 18
 4ee:	10 82       	st	Z, r1
}

//Clear single line(page)
void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	for(uint8_t i = 0; i < 128; i++){
 4f0:	8f 5f       	subi	r24, 0xFF	; 255
 4f2:	80 38       	cpi	r24, 0x80	; 128
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <oled_clear_line+0xa>
		oled_write_data(0x00);
	}
}
 4f6:	08 95       	ret

000004f8 <oled_clear>:

//Clear whole display
void oled_clear(void){
 4f8:	cf 93       	push	r28
	for(uint8_t j = 0; j < 8; j++){
 4fa:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clear_line(j);
 4fc:	8c 2f       	mov	r24, r28
 4fe:	0e 94 72 02 	call	0x4e4	; 0x4e4 <oled_clear_line>
	}
}

//Clear whole display
void oled_clear(void){
	for(uint8_t j = 0; j < 8; j++){
 502:	cf 5f       	subi	r28, 0xFF	; 255
 504:	c8 30       	cpi	r28, 0x08	; 8
 506:	d1 f7       	brne	.-12     	; 0x4fc <oled_clear+0x4>
		oled_clear_line(j);
	}
}
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <oled_init>:
 
static oled_state_t oled_state = {0};
 

//Initializes the display
void oled_init(void){
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
 510:	c0 e0       	ldi	r28, 0x00	; 0
 512:	d0 e1       	ldi	r29, 0x10	; 16
 514:	8e ea       	ldi	r24, 0xAE	; 174
 516:	88 83       	st	Y, r24
 518:	81 ea       	ldi	r24, 0xA1	; 161
 51a:	88 83       	st	Y, r24
 51c:	8a ed       	ldi	r24, 0xDA	; 218
 51e:	88 83       	st	Y, r24
 520:	82 e1       	ldi	r24, 0x12	; 18
 522:	88 83       	st	Y, r24
 524:	88 ec       	ldi	r24, 0xC8	; 200
 526:	88 83       	st	Y, r24
 528:	88 ea       	ldi	r24, 0xA8	; 168
 52a:	88 83       	st	Y, r24
 52c:	8f e3       	ldi	r24, 0x3F	; 63
 52e:	88 83       	st	Y, r24
 530:	85 ed       	ldi	r24, 0xD5	; 213
 532:	88 83       	st	Y, r24
 534:	80 e8       	ldi	r24, 0x80	; 128
 536:	88 83       	st	Y, r24
 538:	81 e8       	ldi	r24, 0x81	; 129
 53a:	88 83       	st	Y, r24
 53c:	80 e5       	ldi	r24, 0x50	; 80
 53e:	88 83       	st	Y, r24
 540:	89 ed       	ldi	r24, 0xD9	; 217
 542:	88 83       	st	Y, r24
 544:	81 e2       	ldi	r24, 0x21	; 33
 546:	88 83       	st	Y, r24
 548:	80 e2       	ldi	r24, 0x20	; 32
 54a:	88 83       	st	Y, r24
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	88 83       	st	Y, r24
 550:	8b ed       	ldi	r24, 0xDB	; 219
 552:	88 83       	st	Y, r24
 554:	80 e3       	ldi	r24, 0x30	; 48
 556:	88 83       	st	Y, r24
 558:	8d ea       	ldi	r24, 0xAD	; 173
 55a:	88 83       	st	Y, r24
 55c:	18 82       	st	Y, r1
 55e:	84 ea       	ldi	r24, 0xA4	; 164
 560:	88 83       	st	Y, r24
 562:	86 ea       	ldi	r24, 0xA6	; 166
 564:	88 83       	st	Y, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	
	oled_clear(); //Clear the display
 566:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <oled_clear>
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
 56a:	8f ea       	ldi	r24, 0xAF	; 175
 56c:	88 83       	st	Y, r24
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	
	oled_clear(); //Clear the display
	oled_write_command(0xaf); // display on
}
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <spi_init>:

#include "spi.h"

void spi_init(void){
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB7);
 574:	87 b3       	in	r24, 0x17	; 23
 576:	80 6b       	ori	r24, 0xB0	; 176
 578:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input
	DDRB &= ~(1<<PB6);
 57a:	be 98       	cbi	0x17, 6	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 57c:	81 e5       	ldi	r24, 0x51	; 81
 57e:	8d b9       	out	0x0d, r24	; 13
 580:	08 95       	ret

00000582 <spi_transmit>:
}

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
 582:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 584:	77 99       	sbic	0x0e, 7	; 14
 586:	03 c0       	rjmp	.+6      	; 0x58e <spi_transmit+0xc>
	
	data = SPDR;
 588:	8f b1       	in	r24, 0x0f	; 15

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 58a:	77 9b       	sbis	0x0e, 7	; 14
 58c:	fd cf       	rjmp	.-6      	; 0x588 <spi_transmit+0x6>
	
	data = SPDR;

	return data;
 58e:	08 95       	ret

00000590 <sram_init>:
#include <stdint.h>
#include <avr/io.h>
#include "sram.h"

void sram_init(void){
	MCUCR |= (1<<SRE);
 590:	85 b7       	in	r24, 0x35	; 53
 592:	80 68       	ori	r24, 0x80	; 128
 594:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 596:	80 b7       	in	r24, 0x30	; 48
 598:	80 62       	ori	r24, 0x20	; 32
 59a:	80 bf       	out	0x30, r24	; 48
 59c:	08 95       	ret

0000059e <uart_transmit>:
	stdout = stdin = &uart_str;
	
}

void uart_transmit(unsigned char data, FILE* stream){
	while ( !( UCSR1A & (1<<UDRE1)) );
 59e:	15 9b       	sbis	0x02, 5	; 2
 5a0:	fe cf       	rjmp	.-4      	; 0x59e <uart_transmit>
	
	UDR1 = data;
 5a2:	83 b9       	out	0x03, r24	; 3
 5a4:	08 95       	ret

000005a6 <uart_receive>:
}

//Function to receive data
unsigned char uart_receive(FILE* stream){
	while (!(UCSR1A & (1<<RXC1)));
 5a6:	17 9b       	sbis	0x02, 7	; 2
 5a8:	fe cf       	rjmp	.-4      	; 0x5a6 <uart_receive>
	return UDR1;
 5aa:	83 b1       	in	r24, 0x03	; 3
}
 5ac:	08 95       	ret

000005ae <uart_init>:

void uart_init(){

	// Set baudrate to 9600

	UBRR1H |= (BAUD_PRESCALE >> 8);
 5ae:	8c b7       	in	r24, 0x3c	; 60
 5b0:	8c bf       	out	0x3c, r24	; 60
	UBRR1L |= BAUD_PRESCALE;
 5b2:	80 b1       	in	r24, 0x00	; 0
 5b4:	8f 61       	ori	r24, 0x1F	; 31
 5b6:	80 b9       	out	0x00, r24	; 0
	// Enable TX rx
	UCSR1B = (1<<TXEN1)|(1<<RXEN1);
 5b8:	88 e1       	ldi	r24, 0x18	; 24
 5ba:	81 b9       	out	0x01, r24	; 1
	

	
	//uart_str = fdevopen(uart_transmit, uart_receive);
	stdout = stdin = &uart_str;
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	90 93 ab 01 	sts	0x01AB, r25
 5c4:	80 93 aa 01 	sts	0x01AA, r24
 5c8:	90 93 ad 01 	sts	0x01AD, r25
 5cc:	80 93 ac 01 	sts	0x01AC, r24
 5d0:	08 95       	ret

000005d2 <fputc>:
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	18 2f       	mov	r17, r24
 5dc:	09 2f       	mov	r16, r25
 5de:	eb 01       	movw	r28, r22
 5e0:	8b 81       	ldd	r24, Y+3	; 0x03
 5e2:	81 fd       	sbrc	r24, 1
 5e4:	03 c0       	rjmp	.+6      	; 0x5ec <fputc+0x1a>
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	9f ef       	ldi	r25, 0xFF	; 255
 5ea:	20 c0       	rjmp	.+64     	; 0x62c <fputc+0x5a>
 5ec:	82 ff       	sbrs	r24, 2
 5ee:	10 c0       	rjmp	.+32     	; 0x610 <fputc+0x3e>
 5f0:	4e 81       	ldd	r20, Y+6	; 0x06
 5f2:	5f 81       	ldd	r21, Y+7	; 0x07
 5f4:	2c 81       	ldd	r18, Y+4	; 0x04
 5f6:	3d 81       	ldd	r19, Y+5	; 0x05
 5f8:	42 17       	cp	r20, r18
 5fa:	53 07       	cpc	r21, r19
 5fc:	7c f4       	brge	.+30     	; 0x61c <fputc+0x4a>
 5fe:	e8 81       	ld	r30, Y
 600:	f9 81       	ldd	r31, Y+1	; 0x01
 602:	9f 01       	movw	r18, r30
 604:	2f 5f       	subi	r18, 0xFF	; 255
 606:	3f 4f       	sbci	r19, 0xFF	; 255
 608:	39 83       	std	Y+1, r19	; 0x01
 60a:	28 83       	st	Y, r18
 60c:	10 83       	st	Z, r17
 60e:	06 c0       	rjmp	.+12     	; 0x61c <fputc+0x4a>
 610:	e8 85       	ldd	r30, Y+8	; 0x08
 612:	f9 85       	ldd	r31, Y+9	; 0x09
 614:	81 2f       	mov	r24, r17
 616:	09 95       	icall
 618:	89 2b       	or	r24, r25
 61a:	29 f7       	brne	.-54     	; 0x5e6 <fputc+0x14>
 61c:	2e 81       	ldd	r18, Y+6	; 0x06
 61e:	3f 81       	ldd	r19, Y+7	; 0x07
 620:	2f 5f       	subi	r18, 0xFF	; 255
 622:	3f 4f       	sbci	r19, 0xFF	; 255
 624:	3f 83       	std	Y+7, r19	; 0x07
 626:	2e 83       	std	Y+6, r18	; 0x06
 628:	81 2f       	mov	r24, r17
 62a:	90 2f       	mov	r25, r16
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	1f 91       	pop	r17
 632:	0f 91       	pop	r16
 634:	08 95       	ret

00000636 <printf>:
 636:	a0 e0       	ldi	r26, 0x00	; 0
 638:	b0 e0       	ldi	r27, 0x00	; 0
 63a:	e1 e2       	ldi	r30, 0x21	; 33
 63c:	f3 e0       	ldi	r31, 0x03	; 3
 63e:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__prologue_saves__+0x20>
 642:	fe 01       	movw	r30, r28
 644:	35 96       	adiw	r30, 0x05	; 5
 646:	61 91       	ld	r22, Z+
 648:	71 91       	ld	r23, Z+
 64a:	af 01       	movw	r20, r30
 64c:	80 91 ac 01 	lds	r24, 0x01AC
 650:	90 91 ad 01 	lds	r25, 0x01AD
 654:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <vfprintf>
 658:	e2 e0       	ldi	r30, 0x02	; 2
 65a:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__epilogue_restores__+0x20>

0000065e <puts>:
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	e0 91 ac 01 	lds	r30, 0x01AC
 66a:	f0 91 ad 01 	lds	r31, 0x01AD
 66e:	23 81       	ldd	r18, Z+3	; 0x03
 670:	21 ff       	sbrs	r18, 1
 672:	1b c0       	rjmp	.+54     	; 0x6aa <puts+0x4c>
 674:	ec 01       	movw	r28, r24
 676:	00 e0       	ldi	r16, 0x00	; 0
 678:	10 e0       	ldi	r17, 0x00	; 0
 67a:	89 91       	ld	r24, Y+
 67c:	60 91 ac 01 	lds	r22, 0x01AC
 680:	70 91 ad 01 	lds	r23, 0x01AD
 684:	db 01       	movw	r26, r22
 686:	18 96       	adiw	r26, 0x08	; 8
 688:	ed 91       	ld	r30, X+
 68a:	fc 91       	ld	r31, X
 68c:	19 97       	sbiw	r26, 0x09	; 9
 68e:	88 23       	and	r24, r24
 690:	31 f0       	breq	.+12     	; 0x69e <puts+0x40>
 692:	09 95       	icall
 694:	89 2b       	or	r24, r25
 696:	89 f3       	breq	.-30     	; 0x67a <puts+0x1c>
 698:	0f ef       	ldi	r16, 0xFF	; 255
 69a:	1f ef       	ldi	r17, 0xFF	; 255
 69c:	ee cf       	rjmp	.-36     	; 0x67a <puts+0x1c>
 69e:	8a e0       	ldi	r24, 0x0A	; 10
 6a0:	09 95       	icall
 6a2:	89 2b       	or	r24, r25
 6a4:	11 f4       	brne	.+4      	; 0x6aa <puts+0x4c>
 6a6:	c8 01       	movw	r24, r16
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <puts+0x50>
 6aa:	8f ef       	ldi	r24, 0xFF	; 255
 6ac:	9f ef       	ldi	r25, 0xFF	; 255
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	08 95       	ret

000006b8 <vfprintf>:
 6b8:	ac e0       	ldi	r26, 0x0C	; 12
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	e2 e6       	ldi	r30, 0x62	; 98
 6be:	f3 e0       	ldi	r31, 0x03	; 3
 6c0:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__prologue_saves__>
 6c4:	7c 01       	movw	r14, r24
 6c6:	6b 01       	movw	r12, r22
 6c8:	8a 01       	movw	r16, r20
 6ca:	fc 01       	movw	r30, r24
 6cc:	17 82       	std	Z+7, r1	; 0x07
 6ce:	16 82       	std	Z+6, r1	; 0x06
 6d0:	83 81       	ldd	r24, Z+3	; 0x03
 6d2:	81 ff       	sbrs	r24, 1
 6d4:	bd c1       	rjmp	.+890    	; 0xa50 <vfprintf+0x398>
 6d6:	ce 01       	movw	r24, r28
 6d8:	01 96       	adiw	r24, 0x01	; 1
 6da:	4c 01       	movw	r8, r24
 6dc:	f7 01       	movw	r30, r14
 6de:	93 81       	ldd	r25, Z+3	; 0x03
 6e0:	f6 01       	movw	r30, r12
 6e2:	93 fd       	sbrc	r25, 3
 6e4:	85 91       	lpm	r24, Z+
 6e6:	93 ff       	sbrs	r25, 3
 6e8:	81 91       	ld	r24, Z+
 6ea:	6f 01       	movw	r12, r30
 6ec:	88 23       	and	r24, r24
 6ee:	09 f4       	brne	.+2      	; 0x6f2 <vfprintf+0x3a>
 6f0:	ab c1       	rjmp	.+854    	; 0xa48 <vfprintf+0x390>
 6f2:	85 32       	cpi	r24, 0x25	; 37
 6f4:	39 f4       	brne	.+14     	; 0x704 <vfprintf+0x4c>
 6f6:	93 fd       	sbrc	r25, 3
 6f8:	85 91       	lpm	r24, Z+
 6fa:	93 ff       	sbrs	r25, 3
 6fc:	81 91       	ld	r24, Z+
 6fe:	6f 01       	movw	r12, r30
 700:	85 32       	cpi	r24, 0x25	; 37
 702:	29 f4       	brne	.+10     	; 0x70e <vfprintf+0x56>
 704:	b7 01       	movw	r22, r14
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 70c:	e7 cf       	rjmp	.-50     	; 0x6dc <vfprintf+0x24>
 70e:	51 2c       	mov	r5, r1
 710:	31 2c       	mov	r3, r1
 712:	20 e0       	ldi	r18, 0x00	; 0
 714:	20 32       	cpi	r18, 0x20	; 32
 716:	a0 f4       	brcc	.+40     	; 0x740 <vfprintf+0x88>
 718:	8b 32       	cpi	r24, 0x2B	; 43
 71a:	69 f0       	breq	.+26     	; 0x736 <vfprintf+0x7e>
 71c:	30 f4       	brcc	.+12     	; 0x72a <vfprintf+0x72>
 71e:	80 32       	cpi	r24, 0x20	; 32
 720:	59 f0       	breq	.+22     	; 0x738 <vfprintf+0x80>
 722:	83 32       	cpi	r24, 0x23	; 35
 724:	69 f4       	brne	.+26     	; 0x740 <vfprintf+0x88>
 726:	20 61       	ori	r18, 0x10	; 16
 728:	2c c0       	rjmp	.+88     	; 0x782 <vfprintf+0xca>
 72a:	8d 32       	cpi	r24, 0x2D	; 45
 72c:	39 f0       	breq	.+14     	; 0x73c <vfprintf+0x84>
 72e:	80 33       	cpi	r24, 0x30	; 48
 730:	39 f4       	brne	.+14     	; 0x740 <vfprintf+0x88>
 732:	21 60       	ori	r18, 0x01	; 1
 734:	26 c0       	rjmp	.+76     	; 0x782 <vfprintf+0xca>
 736:	22 60       	ori	r18, 0x02	; 2
 738:	24 60       	ori	r18, 0x04	; 4
 73a:	23 c0       	rjmp	.+70     	; 0x782 <vfprintf+0xca>
 73c:	28 60       	ori	r18, 0x08	; 8
 73e:	21 c0       	rjmp	.+66     	; 0x782 <vfprintf+0xca>
 740:	27 fd       	sbrc	r18, 7
 742:	27 c0       	rjmp	.+78     	; 0x792 <vfprintf+0xda>
 744:	30 ed       	ldi	r19, 0xD0	; 208
 746:	38 0f       	add	r19, r24
 748:	3a 30       	cpi	r19, 0x0A	; 10
 74a:	78 f4       	brcc	.+30     	; 0x76a <vfprintf+0xb2>
 74c:	26 ff       	sbrs	r18, 6
 74e:	06 c0       	rjmp	.+12     	; 0x75c <vfprintf+0xa4>
 750:	fa e0       	ldi	r31, 0x0A	; 10
 752:	5f 9e       	mul	r5, r31
 754:	30 0d       	add	r19, r0
 756:	11 24       	eor	r1, r1
 758:	53 2e       	mov	r5, r19
 75a:	13 c0       	rjmp	.+38     	; 0x782 <vfprintf+0xca>
 75c:	8a e0       	ldi	r24, 0x0A	; 10
 75e:	38 9e       	mul	r3, r24
 760:	30 0d       	add	r19, r0
 762:	11 24       	eor	r1, r1
 764:	33 2e       	mov	r3, r19
 766:	20 62       	ori	r18, 0x20	; 32
 768:	0c c0       	rjmp	.+24     	; 0x782 <vfprintf+0xca>
 76a:	8e 32       	cpi	r24, 0x2E	; 46
 76c:	21 f4       	brne	.+8      	; 0x776 <vfprintf+0xbe>
 76e:	26 fd       	sbrc	r18, 6
 770:	6b c1       	rjmp	.+726    	; 0xa48 <vfprintf+0x390>
 772:	20 64       	ori	r18, 0x40	; 64
 774:	06 c0       	rjmp	.+12     	; 0x782 <vfprintf+0xca>
 776:	8c 36       	cpi	r24, 0x6C	; 108
 778:	11 f4       	brne	.+4      	; 0x77e <vfprintf+0xc6>
 77a:	20 68       	ori	r18, 0x80	; 128
 77c:	02 c0       	rjmp	.+4      	; 0x782 <vfprintf+0xca>
 77e:	88 36       	cpi	r24, 0x68	; 104
 780:	41 f4       	brne	.+16     	; 0x792 <vfprintf+0xda>
 782:	f6 01       	movw	r30, r12
 784:	93 fd       	sbrc	r25, 3
 786:	85 91       	lpm	r24, Z+
 788:	93 ff       	sbrs	r25, 3
 78a:	81 91       	ld	r24, Z+
 78c:	6f 01       	movw	r12, r30
 78e:	81 11       	cpse	r24, r1
 790:	c1 cf       	rjmp	.-126    	; 0x714 <vfprintf+0x5c>
 792:	98 2f       	mov	r25, r24
 794:	9f 7d       	andi	r25, 0xDF	; 223
 796:	95 54       	subi	r25, 0x45	; 69
 798:	93 30       	cpi	r25, 0x03	; 3
 79a:	28 f4       	brcc	.+10     	; 0x7a6 <vfprintf+0xee>
 79c:	0c 5f       	subi	r16, 0xFC	; 252
 79e:	1f 4f       	sbci	r17, 0xFF	; 255
 7a0:	ff e3       	ldi	r31, 0x3F	; 63
 7a2:	f9 83       	std	Y+1, r31	; 0x01
 7a4:	0d c0       	rjmp	.+26     	; 0x7c0 <vfprintf+0x108>
 7a6:	83 36       	cpi	r24, 0x63	; 99
 7a8:	31 f0       	breq	.+12     	; 0x7b6 <vfprintf+0xfe>
 7aa:	83 37       	cpi	r24, 0x73	; 115
 7ac:	71 f0       	breq	.+28     	; 0x7ca <vfprintf+0x112>
 7ae:	83 35       	cpi	r24, 0x53	; 83
 7b0:	09 f0       	breq	.+2      	; 0x7b4 <vfprintf+0xfc>
 7b2:	5b c0       	rjmp	.+182    	; 0x86a <vfprintf+0x1b2>
 7b4:	22 c0       	rjmp	.+68     	; 0x7fa <vfprintf+0x142>
 7b6:	f8 01       	movw	r30, r16
 7b8:	80 81       	ld	r24, Z
 7ba:	89 83       	std	Y+1, r24	; 0x01
 7bc:	0e 5f       	subi	r16, 0xFE	; 254
 7be:	1f 4f       	sbci	r17, 0xFF	; 255
 7c0:	44 24       	eor	r4, r4
 7c2:	43 94       	inc	r4
 7c4:	51 2c       	mov	r5, r1
 7c6:	54 01       	movw	r10, r8
 7c8:	15 c0       	rjmp	.+42     	; 0x7f4 <vfprintf+0x13c>
 7ca:	38 01       	movw	r6, r16
 7cc:	f2 e0       	ldi	r31, 0x02	; 2
 7ce:	6f 0e       	add	r6, r31
 7d0:	71 1c       	adc	r7, r1
 7d2:	f8 01       	movw	r30, r16
 7d4:	a0 80       	ld	r10, Z
 7d6:	b1 80       	ldd	r11, Z+1	; 0x01
 7d8:	26 ff       	sbrs	r18, 6
 7da:	03 c0       	rjmp	.+6      	; 0x7e2 <vfprintf+0x12a>
 7dc:	65 2d       	mov	r22, r5
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <vfprintf+0x12e>
 7e2:	6f ef       	ldi	r22, 0xFF	; 255
 7e4:	7f ef       	ldi	r23, 0xFF	; 255
 7e6:	c5 01       	movw	r24, r10
 7e8:	2c 87       	std	Y+12, r18	; 0x0c
 7ea:	0e 94 39 05 	call	0xa72	; 0xa72 <strnlen>
 7ee:	2c 01       	movw	r4, r24
 7f0:	83 01       	movw	r16, r6
 7f2:	2c 85       	ldd	r18, Y+12	; 0x0c
 7f4:	2f 77       	andi	r18, 0x7F	; 127
 7f6:	22 2e       	mov	r2, r18
 7f8:	17 c0       	rjmp	.+46     	; 0x828 <vfprintf+0x170>
 7fa:	38 01       	movw	r6, r16
 7fc:	f2 e0       	ldi	r31, 0x02	; 2
 7fe:	6f 0e       	add	r6, r31
 800:	71 1c       	adc	r7, r1
 802:	f8 01       	movw	r30, r16
 804:	a0 80       	ld	r10, Z
 806:	b1 80       	ldd	r11, Z+1	; 0x01
 808:	26 ff       	sbrs	r18, 6
 80a:	03 c0       	rjmp	.+6      	; 0x812 <vfprintf+0x15a>
 80c:	65 2d       	mov	r22, r5
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	02 c0       	rjmp	.+4      	; 0x816 <vfprintf+0x15e>
 812:	6f ef       	ldi	r22, 0xFF	; 255
 814:	7f ef       	ldi	r23, 0xFF	; 255
 816:	c5 01       	movw	r24, r10
 818:	2c 87       	std	Y+12, r18	; 0x0c
 81a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <strnlen_P>
 81e:	2c 01       	movw	r4, r24
 820:	2c 85       	ldd	r18, Y+12	; 0x0c
 822:	20 68       	ori	r18, 0x80	; 128
 824:	22 2e       	mov	r2, r18
 826:	83 01       	movw	r16, r6
 828:	23 fc       	sbrc	r2, 3
 82a:	1b c0       	rjmp	.+54     	; 0x862 <vfprintf+0x1aa>
 82c:	83 2d       	mov	r24, r3
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	48 16       	cp	r4, r24
 832:	59 06       	cpc	r5, r25
 834:	b0 f4       	brcc	.+44     	; 0x862 <vfprintf+0x1aa>
 836:	b7 01       	movw	r22, r14
 838:	80 e2       	ldi	r24, 0x20	; 32
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 840:	3a 94       	dec	r3
 842:	f4 cf       	rjmp	.-24     	; 0x82c <vfprintf+0x174>
 844:	f5 01       	movw	r30, r10
 846:	27 fc       	sbrc	r2, 7
 848:	85 91       	lpm	r24, Z+
 84a:	27 fe       	sbrs	r2, 7
 84c:	81 91       	ld	r24, Z+
 84e:	5f 01       	movw	r10, r30
 850:	b7 01       	movw	r22, r14
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 858:	31 10       	cpse	r3, r1
 85a:	3a 94       	dec	r3
 85c:	f1 e0       	ldi	r31, 0x01	; 1
 85e:	4f 1a       	sub	r4, r31
 860:	51 08       	sbc	r5, r1
 862:	41 14       	cp	r4, r1
 864:	51 04       	cpc	r5, r1
 866:	71 f7       	brne	.-36     	; 0x844 <vfprintf+0x18c>
 868:	e5 c0       	rjmp	.+458    	; 0xa34 <vfprintf+0x37c>
 86a:	84 36       	cpi	r24, 0x64	; 100
 86c:	11 f0       	breq	.+4      	; 0x872 <vfprintf+0x1ba>
 86e:	89 36       	cpi	r24, 0x69	; 105
 870:	39 f5       	brne	.+78     	; 0x8c0 <vfprintf+0x208>
 872:	f8 01       	movw	r30, r16
 874:	27 ff       	sbrs	r18, 7
 876:	07 c0       	rjmp	.+14     	; 0x886 <vfprintf+0x1ce>
 878:	60 81       	ld	r22, Z
 87a:	71 81       	ldd	r23, Z+1	; 0x01
 87c:	82 81       	ldd	r24, Z+2	; 0x02
 87e:	93 81       	ldd	r25, Z+3	; 0x03
 880:	0c 5f       	subi	r16, 0xFC	; 252
 882:	1f 4f       	sbci	r17, 0xFF	; 255
 884:	08 c0       	rjmp	.+16     	; 0x896 <vfprintf+0x1de>
 886:	60 81       	ld	r22, Z
 888:	71 81       	ldd	r23, Z+1	; 0x01
 88a:	88 27       	eor	r24, r24
 88c:	77 fd       	sbrc	r23, 7
 88e:	80 95       	com	r24
 890:	98 2f       	mov	r25, r24
 892:	0e 5f       	subi	r16, 0xFE	; 254
 894:	1f 4f       	sbci	r17, 0xFF	; 255
 896:	2f 76       	andi	r18, 0x6F	; 111
 898:	b2 2e       	mov	r11, r18
 89a:	97 ff       	sbrs	r25, 7
 89c:	09 c0       	rjmp	.+18     	; 0x8b0 <vfprintf+0x1f8>
 89e:	90 95       	com	r25
 8a0:	80 95       	com	r24
 8a2:	70 95       	com	r23
 8a4:	61 95       	neg	r22
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	20 68       	ori	r18, 0x80	; 128
 8ae:	b2 2e       	mov	r11, r18
 8b0:	2a e0       	ldi	r18, 0x0A	; 10
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	a4 01       	movw	r20, r8
 8b6:	0e 94 44 05 	call	0xa88	; 0xa88 <__ultoa_invert>
 8ba:	a8 2e       	mov	r10, r24
 8bc:	a8 18       	sub	r10, r8
 8be:	44 c0       	rjmp	.+136    	; 0x948 <vfprintf+0x290>
 8c0:	85 37       	cpi	r24, 0x75	; 117
 8c2:	29 f4       	brne	.+10     	; 0x8ce <vfprintf+0x216>
 8c4:	2f 7e       	andi	r18, 0xEF	; 239
 8c6:	b2 2e       	mov	r11, r18
 8c8:	2a e0       	ldi	r18, 0x0A	; 10
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	25 c0       	rjmp	.+74     	; 0x918 <vfprintf+0x260>
 8ce:	f2 2f       	mov	r31, r18
 8d0:	f9 7f       	andi	r31, 0xF9	; 249
 8d2:	bf 2e       	mov	r11, r31
 8d4:	8f 36       	cpi	r24, 0x6F	; 111
 8d6:	c1 f0       	breq	.+48     	; 0x908 <vfprintf+0x250>
 8d8:	18 f4       	brcc	.+6      	; 0x8e0 <vfprintf+0x228>
 8da:	88 35       	cpi	r24, 0x58	; 88
 8dc:	79 f0       	breq	.+30     	; 0x8fc <vfprintf+0x244>
 8de:	b4 c0       	rjmp	.+360    	; 0xa48 <vfprintf+0x390>
 8e0:	80 37       	cpi	r24, 0x70	; 112
 8e2:	19 f0       	breq	.+6      	; 0x8ea <vfprintf+0x232>
 8e4:	88 37       	cpi	r24, 0x78	; 120
 8e6:	21 f0       	breq	.+8      	; 0x8f0 <vfprintf+0x238>
 8e8:	af c0       	rjmp	.+350    	; 0xa48 <vfprintf+0x390>
 8ea:	2f 2f       	mov	r18, r31
 8ec:	20 61       	ori	r18, 0x10	; 16
 8ee:	b2 2e       	mov	r11, r18
 8f0:	b4 fe       	sbrs	r11, 4
 8f2:	0d c0       	rjmp	.+26     	; 0x90e <vfprintf+0x256>
 8f4:	8b 2d       	mov	r24, r11
 8f6:	84 60       	ori	r24, 0x04	; 4
 8f8:	b8 2e       	mov	r11, r24
 8fa:	09 c0       	rjmp	.+18     	; 0x90e <vfprintf+0x256>
 8fc:	24 ff       	sbrs	r18, 4
 8fe:	0a c0       	rjmp	.+20     	; 0x914 <vfprintf+0x25c>
 900:	9f 2f       	mov	r25, r31
 902:	96 60       	ori	r25, 0x06	; 6
 904:	b9 2e       	mov	r11, r25
 906:	06 c0       	rjmp	.+12     	; 0x914 <vfprintf+0x25c>
 908:	28 e0       	ldi	r18, 0x08	; 8
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	05 c0       	rjmp	.+10     	; 0x918 <vfprintf+0x260>
 90e:	20 e1       	ldi	r18, 0x10	; 16
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	02 c0       	rjmp	.+4      	; 0x918 <vfprintf+0x260>
 914:	20 e1       	ldi	r18, 0x10	; 16
 916:	32 e0       	ldi	r19, 0x02	; 2
 918:	f8 01       	movw	r30, r16
 91a:	b7 fe       	sbrs	r11, 7
 91c:	07 c0       	rjmp	.+14     	; 0x92c <vfprintf+0x274>
 91e:	60 81       	ld	r22, Z
 920:	71 81       	ldd	r23, Z+1	; 0x01
 922:	82 81       	ldd	r24, Z+2	; 0x02
 924:	93 81       	ldd	r25, Z+3	; 0x03
 926:	0c 5f       	subi	r16, 0xFC	; 252
 928:	1f 4f       	sbci	r17, 0xFF	; 255
 92a:	06 c0       	rjmp	.+12     	; 0x938 <vfprintf+0x280>
 92c:	60 81       	ld	r22, Z
 92e:	71 81       	ldd	r23, Z+1	; 0x01
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 5f       	subi	r16, 0xFE	; 254
 936:	1f 4f       	sbci	r17, 0xFF	; 255
 938:	a4 01       	movw	r20, r8
 93a:	0e 94 44 05 	call	0xa88	; 0xa88 <__ultoa_invert>
 93e:	a8 2e       	mov	r10, r24
 940:	a8 18       	sub	r10, r8
 942:	fb 2d       	mov	r31, r11
 944:	ff 77       	andi	r31, 0x7F	; 127
 946:	bf 2e       	mov	r11, r31
 948:	b6 fe       	sbrs	r11, 6
 94a:	0b c0       	rjmp	.+22     	; 0x962 <vfprintf+0x2aa>
 94c:	2b 2d       	mov	r18, r11
 94e:	2e 7f       	andi	r18, 0xFE	; 254
 950:	a5 14       	cp	r10, r5
 952:	50 f4       	brcc	.+20     	; 0x968 <vfprintf+0x2b0>
 954:	b4 fe       	sbrs	r11, 4
 956:	0a c0       	rjmp	.+20     	; 0x96c <vfprintf+0x2b4>
 958:	b2 fc       	sbrc	r11, 2
 95a:	08 c0       	rjmp	.+16     	; 0x96c <vfprintf+0x2b4>
 95c:	2b 2d       	mov	r18, r11
 95e:	2e 7e       	andi	r18, 0xEE	; 238
 960:	05 c0       	rjmp	.+10     	; 0x96c <vfprintf+0x2b4>
 962:	7a 2c       	mov	r7, r10
 964:	2b 2d       	mov	r18, r11
 966:	03 c0       	rjmp	.+6      	; 0x96e <vfprintf+0x2b6>
 968:	7a 2c       	mov	r7, r10
 96a:	01 c0       	rjmp	.+2      	; 0x96e <vfprintf+0x2b6>
 96c:	75 2c       	mov	r7, r5
 96e:	24 ff       	sbrs	r18, 4
 970:	0d c0       	rjmp	.+26     	; 0x98c <vfprintf+0x2d4>
 972:	fe 01       	movw	r30, r28
 974:	ea 0d       	add	r30, r10
 976:	f1 1d       	adc	r31, r1
 978:	80 81       	ld	r24, Z
 97a:	80 33       	cpi	r24, 0x30	; 48
 97c:	11 f4       	brne	.+4      	; 0x982 <vfprintf+0x2ca>
 97e:	29 7e       	andi	r18, 0xE9	; 233
 980:	09 c0       	rjmp	.+18     	; 0x994 <vfprintf+0x2dc>
 982:	22 ff       	sbrs	r18, 2
 984:	06 c0       	rjmp	.+12     	; 0x992 <vfprintf+0x2da>
 986:	73 94       	inc	r7
 988:	73 94       	inc	r7
 98a:	04 c0       	rjmp	.+8      	; 0x994 <vfprintf+0x2dc>
 98c:	82 2f       	mov	r24, r18
 98e:	86 78       	andi	r24, 0x86	; 134
 990:	09 f0       	breq	.+2      	; 0x994 <vfprintf+0x2dc>
 992:	73 94       	inc	r7
 994:	23 fd       	sbrc	r18, 3
 996:	13 c0       	rjmp	.+38     	; 0x9be <vfprintf+0x306>
 998:	20 ff       	sbrs	r18, 0
 99a:	06 c0       	rjmp	.+12     	; 0x9a8 <vfprintf+0x2f0>
 99c:	5a 2c       	mov	r5, r10
 99e:	73 14       	cp	r7, r3
 9a0:	18 f4       	brcc	.+6      	; 0x9a8 <vfprintf+0x2f0>
 9a2:	53 0c       	add	r5, r3
 9a4:	57 18       	sub	r5, r7
 9a6:	73 2c       	mov	r7, r3
 9a8:	73 14       	cp	r7, r3
 9aa:	68 f4       	brcc	.+26     	; 0x9c6 <vfprintf+0x30e>
 9ac:	b7 01       	movw	r22, r14
 9ae:	80 e2       	ldi	r24, 0x20	; 32
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	2c 87       	std	Y+12, r18	; 0x0c
 9b4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 9b8:	73 94       	inc	r7
 9ba:	2c 85       	ldd	r18, Y+12	; 0x0c
 9bc:	f5 cf       	rjmp	.-22     	; 0x9a8 <vfprintf+0x2f0>
 9be:	73 14       	cp	r7, r3
 9c0:	10 f4       	brcc	.+4      	; 0x9c6 <vfprintf+0x30e>
 9c2:	37 18       	sub	r3, r7
 9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <vfprintf+0x310>
 9c6:	31 2c       	mov	r3, r1
 9c8:	24 ff       	sbrs	r18, 4
 9ca:	12 c0       	rjmp	.+36     	; 0x9f0 <vfprintf+0x338>
 9cc:	b7 01       	movw	r22, r14
 9ce:	80 e3       	ldi	r24, 0x30	; 48
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	2c 87       	std	Y+12, r18	; 0x0c
 9d4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 9d8:	2c 85       	ldd	r18, Y+12	; 0x0c
 9da:	22 ff       	sbrs	r18, 2
 9dc:	17 c0       	rjmp	.+46     	; 0xa0c <vfprintf+0x354>
 9de:	21 ff       	sbrs	r18, 1
 9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <vfprintf+0x330>
 9e2:	88 e5       	ldi	r24, 0x58	; 88
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <vfprintf+0x334>
 9e8:	88 e7       	ldi	r24, 0x78	; 120
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	b7 01       	movw	r22, r14
 9ee:	0c c0       	rjmp	.+24     	; 0xa08 <vfprintf+0x350>
 9f0:	82 2f       	mov	r24, r18
 9f2:	86 78       	andi	r24, 0x86	; 134
 9f4:	59 f0       	breq	.+22     	; 0xa0c <vfprintf+0x354>
 9f6:	21 fd       	sbrc	r18, 1
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <vfprintf+0x346>
 9fa:	80 e2       	ldi	r24, 0x20	; 32
 9fc:	01 c0       	rjmp	.+2      	; 0xa00 <vfprintf+0x348>
 9fe:	8b e2       	ldi	r24, 0x2B	; 43
 a00:	27 fd       	sbrc	r18, 7
 a02:	8d e2       	ldi	r24, 0x2D	; 45
 a04:	b7 01       	movw	r22, r14
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 a0c:	a5 14       	cp	r10, r5
 a0e:	38 f4       	brcc	.+14     	; 0xa1e <vfprintf+0x366>
 a10:	b7 01       	movw	r22, r14
 a12:	80 e3       	ldi	r24, 0x30	; 48
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 a1a:	5a 94       	dec	r5
 a1c:	f7 cf       	rjmp	.-18     	; 0xa0c <vfprintf+0x354>
 a1e:	aa 94       	dec	r10
 a20:	f4 01       	movw	r30, r8
 a22:	ea 0d       	add	r30, r10
 a24:	f1 1d       	adc	r31, r1
 a26:	80 81       	ld	r24, Z
 a28:	b7 01       	movw	r22, r14
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 a30:	a1 10       	cpse	r10, r1
 a32:	f5 cf       	rjmp	.-22     	; 0xa1e <vfprintf+0x366>
 a34:	33 20       	and	r3, r3
 a36:	09 f4       	brne	.+2      	; 0xa3a <vfprintf+0x382>
 a38:	51 ce       	rjmp	.-862    	; 0x6dc <vfprintf+0x24>
 a3a:	b7 01       	movw	r22, r14
 a3c:	80 e2       	ldi	r24, 0x20	; 32
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 a44:	3a 94       	dec	r3
 a46:	f6 cf       	rjmp	.-20     	; 0xa34 <vfprintf+0x37c>
 a48:	f7 01       	movw	r30, r14
 a4a:	86 81       	ldd	r24, Z+6	; 0x06
 a4c:	97 81       	ldd	r25, Z+7	; 0x07
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <vfprintf+0x39c>
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	2c 96       	adiw	r28, 0x0c	; 12
 a56:	e2 e1       	ldi	r30, 0x12	; 18
 a58:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__epilogue_restores__>

00000a5c <strnlen_P>:
 a5c:	fc 01       	movw	r30, r24
 a5e:	05 90       	lpm	r0, Z+
 a60:	61 50       	subi	r22, 0x01	; 1
 a62:	70 40       	sbci	r23, 0x00	; 0
 a64:	01 10       	cpse	r0, r1
 a66:	d8 f7       	brcc	.-10     	; 0xa5e <strnlen_P+0x2>
 a68:	80 95       	com	r24
 a6a:	90 95       	com	r25
 a6c:	8e 0f       	add	r24, r30
 a6e:	9f 1f       	adc	r25, r31
 a70:	08 95       	ret

00000a72 <strnlen>:
 a72:	fc 01       	movw	r30, r24
 a74:	61 50       	subi	r22, 0x01	; 1
 a76:	70 40       	sbci	r23, 0x00	; 0
 a78:	01 90       	ld	r0, Z+
 a7a:	01 10       	cpse	r0, r1
 a7c:	d8 f7       	brcc	.-10     	; 0xa74 <strnlen+0x2>
 a7e:	80 95       	com	r24
 a80:	90 95       	com	r25
 a82:	8e 0f       	add	r24, r30
 a84:	9f 1f       	adc	r25, r31
 a86:	08 95       	ret

00000a88 <__ultoa_invert>:
 a88:	fa 01       	movw	r30, r20
 a8a:	aa 27       	eor	r26, r26
 a8c:	28 30       	cpi	r18, 0x08	; 8
 a8e:	51 f1       	breq	.+84     	; 0xae4 <__ultoa_invert+0x5c>
 a90:	20 31       	cpi	r18, 0x10	; 16
 a92:	81 f1       	breq	.+96     	; 0xaf4 <__ultoa_invert+0x6c>
 a94:	e8 94       	clt
 a96:	6f 93       	push	r22
 a98:	6e 7f       	andi	r22, 0xFE	; 254
 a9a:	6e 5f       	subi	r22, 0xFE	; 254
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	af 4f       	sbci	r26, 0xFF	; 255
 aa4:	b1 e0       	ldi	r27, 0x01	; 1
 aa6:	3e d0       	rcall	.+124    	; 0xb24 <__ultoa_invert+0x9c>
 aa8:	b4 e0       	ldi	r27, 0x04	; 4
 aaa:	3c d0       	rcall	.+120    	; 0xb24 <__ultoa_invert+0x9c>
 aac:	67 0f       	add	r22, r23
 aae:	78 1f       	adc	r23, r24
 ab0:	89 1f       	adc	r24, r25
 ab2:	9a 1f       	adc	r25, r26
 ab4:	a1 1d       	adc	r26, r1
 ab6:	68 0f       	add	r22, r24
 ab8:	79 1f       	adc	r23, r25
 aba:	8a 1f       	adc	r24, r26
 abc:	91 1d       	adc	r25, r1
 abe:	a1 1d       	adc	r26, r1
 ac0:	6a 0f       	add	r22, r26
 ac2:	71 1d       	adc	r23, r1
 ac4:	81 1d       	adc	r24, r1
 ac6:	91 1d       	adc	r25, r1
 ac8:	a1 1d       	adc	r26, r1
 aca:	20 d0       	rcall	.+64     	; 0xb0c <__ultoa_invert+0x84>
 acc:	09 f4       	brne	.+2      	; 0xad0 <__ultoa_invert+0x48>
 ace:	68 94       	set
 ad0:	3f 91       	pop	r19
 ad2:	2a e0       	ldi	r18, 0x0A	; 10
 ad4:	26 9f       	mul	r18, r22
 ad6:	11 24       	eor	r1, r1
 ad8:	30 19       	sub	r19, r0
 ada:	30 5d       	subi	r19, 0xD0	; 208
 adc:	31 93       	st	Z+, r19
 ade:	de f6       	brtc	.-74     	; 0xa96 <__ultoa_invert+0xe>
 ae0:	cf 01       	movw	r24, r30
 ae2:	08 95       	ret
 ae4:	46 2f       	mov	r20, r22
 ae6:	47 70       	andi	r20, 0x07	; 7
 ae8:	40 5d       	subi	r20, 0xD0	; 208
 aea:	41 93       	st	Z+, r20
 aec:	b3 e0       	ldi	r27, 0x03	; 3
 aee:	0f d0       	rcall	.+30     	; 0xb0e <__ultoa_invert+0x86>
 af0:	c9 f7       	brne	.-14     	; 0xae4 <__ultoa_invert+0x5c>
 af2:	f6 cf       	rjmp	.-20     	; 0xae0 <__ultoa_invert+0x58>
 af4:	46 2f       	mov	r20, r22
 af6:	4f 70       	andi	r20, 0x0F	; 15
 af8:	40 5d       	subi	r20, 0xD0	; 208
 afa:	4a 33       	cpi	r20, 0x3A	; 58
 afc:	18 f0       	brcs	.+6      	; 0xb04 <__ultoa_invert+0x7c>
 afe:	49 5d       	subi	r20, 0xD9	; 217
 b00:	31 fd       	sbrc	r19, 1
 b02:	40 52       	subi	r20, 0x20	; 32
 b04:	41 93       	st	Z+, r20
 b06:	02 d0       	rcall	.+4      	; 0xb0c <__ultoa_invert+0x84>
 b08:	a9 f7       	brne	.-22     	; 0xaf4 <__ultoa_invert+0x6c>
 b0a:	ea cf       	rjmp	.-44     	; 0xae0 <__ultoa_invert+0x58>
 b0c:	b4 e0       	ldi	r27, 0x04	; 4
 b0e:	a6 95       	lsr	r26
 b10:	97 95       	ror	r25
 b12:	87 95       	ror	r24
 b14:	77 95       	ror	r23
 b16:	67 95       	ror	r22
 b18:	ba 95       	dec	r27
 b1a:	c9 f7       	brne	.-14     	; 0xb0e <__ultoa_invert+0x86>
 b1c:	00 97       	sbiw	r24, 0x00	; 0
 b1e:	61 05       	cpc	r22, r1
 b20:	71 05       	cpc	r23, r1
 b22:	08 95       	ret
 b24:	9b 01       	movw	r18, r22
 b26:	ac 01       	movw	r20, r24
 b28:	0a 2e       	mov	r0, r26
 b2a:	06 94       	lsr	r0
 b2c:	57 95       	ror	r21
 b2e:	47 95       	ror	r20
 b30:	37 95       	ror	r19
 b32:	27 95       	ror	r18
 b34:	ba 95       	dec	r27
 b36:	c9 f7       	brne	.-14     	; 0xb2a <__ultoa_invert+0xa2>
 b38:	62 0f       	add	r22, r18
 b3a:	73 1f       	adc	r23, r19
 b3c:	84 1f       	adc	r24, r20
 b3e:	95 1f       	adc	r25, r21
 b40:	a0 1d       	adc	r26, r0
 b42:	08 95       	ret

00000b44 <__prologue_saves__>:
 b44:	2f 92       	push	r2
 b46:	3f 92       	push	r3
 b48:	4f 92       	push	r4
 b4a:	5f 92       	push	r5
 b4c:	6f 92       	push	r6
 b4e:	7f 92       	push	r7
 b50:	8f 92       	push	r8
 b52:	9f 92       	push	r9
 b54:	af 92       	push	r10
 b56:	bf 92       	push	r11
 b58:	cf 92       	push	r12
 b5a:	df 92       	push	r13
 b5c:	ef 92       	push	r14
 b5e:	ff 92       	push	r15
 b60:	0f 93       	push	r16
 b62:	1f 93       	push	r17
 b64:	cf 93       	push	r28
 b66:	df 93       	push	r29
 b68:	cd b7       	in	r28, 0x3d	; 61
 b6a:	de b7       	in	r29, 0x3e	; 62
 b6c:	ca 1b       	sub	r28, r26
 b6e:	db 0b       	sbc	r29, r27
 b70:	0f b6       	in	r0, 0x3f	; 63
 b72:	f8 94       	cli
 b74:	de bf       	out	0x3e, r29	; 62
 b76:	0f be       	out	0x3f, r0	; 63
 b78:	cd bf       	out	0x3d, r28	; 61
 b7a:	09 94       	ijmp

00000b7c <__epilogue_restores__>:
 b7c:	2a 88       	ldd	r2, Y+18	; 0x12
 b7e:	39 88       	ldd	r3, Y+17	; 0x11
 b80:	48 88       	ldd	r4, Y+16	; 0x10
 b82:	5f 84       	ldd	r5, Y+15	; 0x0f
 b84:	6e 84       	ldd	r6, Y+14	; 0x0e
 b86:	7d 84       	ldd	r7, Y+13	; 0x0d
 b88:	8c 84       	ldd	r8, Y+12	; 0x0c
 b8a:	9b 84       	ldd	r9, Y+11	; 0x0b
 b8c:	aa 84       	ldd	r10, Y+10	; 0x0a
 b8e:	b9 84       	ldd	r11, Y+9	; 0x09
 b90:	c8 84       	ldd	r12, Y+8	; 0x08
 b92:	df 80       	ldd	r13, Y+7	; 0x07
 b94:	ee 80       	ldd	r14, Y+6	; 0x06
 b96:	fd 80       	ldd	r15, Y+5	; 0x05
 b98:	0c 81       	ldd	r16, Y+4	; 0x04
 b9a:	1b 81       	ldd	r17, Y+3	; 0x03
 b9c:	aa 81       	ldd	r26, Y+2	; 0x02
 b9e:	b9 81       	ldd	r27, Y+1	; 0x01
 ba0:	ce 0f       	add	r28, r30
 ba2:	d1 1d       	adc	r29, r1
 ba4:	0f b6       	in	r0, 0x3f	; 63
 ba6:	f8 94       	cli
 ba8:	de bf       	out	0x3e, r29	; 62
 baa:	0f be       	out	0x3f, r0	; 63
 bac:	cd bf       	out	0x3d, r28	; 61
 bae:	ed 01       	movw	r28, r26
 bb0:	08 95       	ret

00000bb2 <_exit>:
 bb2:	f8 94       	cli

00000bb4 <__stop_program>:
 bb4:	ff cf       	rjmp	.-2      	; 0xbb4 <__stop_program>
