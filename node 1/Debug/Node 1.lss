
Node 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  000010ee  00001182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080023a  0080023a  000012bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002409  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001108  00000000  00000000  000039e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e8d  00000000  00000000  00004af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000062c  00000000  00000000  00005980  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007f8  00000000  00000000  00005fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011e1  00000000  00000000  000067a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  00007985  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <fwrite+0x14>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ee ee       	ldi	r30, 0xEE	; 238
     37c:	f0 e1       	ldi	r31, 0x10	; 16
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 33       	cpi	r26, 0x3A	; 58
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	aa e3       	ldi	r26, 0x3A	; 58
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a6 34       	cpi	r26, 0x46	; 70
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <main>
     39e:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
const uint8_t ADC_mux_channel1 = 0x4;
const uint8_t ADC_mux_channel2 = 0x5;
const uint8_t ADC_mux_channel3 = 0x6;
const uint8_t ADC_mux_channel4 = 0x7;

void adc_init(void){
     3a6:	08 95       	ret

000003a8 <adc_read>:
}

uint8_t adc_read(uint8_t channel){
	uint8_t result = 0;
	
	if(channel == 1){
     3a8:	81 30       	cpi	r24, 0x01	; 1
     3aa:	41 f4       	brne	.+16     	; 0x3bc <adc_read+0x14>
		*ADC_start_adress = ADC_mux_channel1;
     3ac:	84 e0       	ldi	r24, 0x04	; 4
     3ae:	80 93 00 14 	sts	0x1400, r24
		while((PIND & (1 <<PIND2))){
     3b2:	82 99       	sbic	0x10, 2	; 16
     3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <adc_read+0xa>
		}
		
		
		result = *ADC_start_adress;	
     3b6:	80 91 00 14 	lds	r24, 0x1400
     3ba:	08 95       	ret
	}
	
	else if(channel == 2){
     3bc:	82 30       	cpi	r24, 0x02	; 2
     3be:	41 f4       	brne	.+16     	; 0x3d0 <adc_read+0x28>
		*ADC_start_adress = ADC_mux_channel2;
     3c0:	85 e0       	ldi	r24, 0x05	; 5
     3c2:	80 93 00 14 	sts	0x1400, r24
		while((PIND & (1 <<PIND2))){
     3c6:	82 99       	sbic	0x10, 2	; 16
     3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <adc_read+0x1e>
		}
		
		result = *ADC_start_adress;
     3ca:	80 91 00 14 	lds	r24, 0x1400
     3ce:	08 95       	ret
	}
	
	if(channel == 3){
     3d0:	83 30       	cpi	r24, 0x03	; 3
     3d2:	41 f4       	brne	.+16     	; 0x3e4 <adc_read+0x3c>
		*ADC_start_adress = ADC_mux_channel3;
     3d4:	86 e0       	ldi	r24, 0x06	; 6
     3d6:	80 93 00 14 	sts	0x1400, r24
		while((PIND & (1 <<PIND2))){
     3da:	82 99       	sbic	0x10, 2	; 16
     3dc:	fe cf       	rjmp	.-4      	; 0x3da <adc_read+0x32>
		}
		
		
		result = *ADC_start_adress;
     3de:	80 91 00 14 	lds	r24, 0x1400
     3e2:	08 95       	ret
	}
	
	else if(channel == 4){
     3e4:	84 30       	cpi	r24, 0x04	; 4
     3e6:	41 f4       	brne	.+16     	; 0x3f8 <adc_read+0x50>
		*ADC_start_adress = ADC_mux_channel4;
     3e8:	87 e0       	ldi	r24, 0x07	; 7
     3ea:	80 93 00 14 	sts	0x1400, r24
		while((PIND & (1 <<PIND2))){
     3ee:	82 99       	sbic	0x10, 2	; 16
     3f0:	fe cf       	rjmp	.-4      	; 0x3ee <adc_read+0x46>
		}
		
		result = *ADC_start_adress;
     3f2:	80 91 00 14 	lds	r24, 0x1400
     3f6:	08 95       	ret
void adc_init(void){

}

uint8_t adc_read(uint8_t channel){
	uint8_t result = 0;
     3f8:	80 e0       	ldi	r24, 0x00	; 0
		
		result = *ADC_start_adress;
	}	
	
	return result;
     3fa:	08 95       	ret

000003fc <button_init>:
#include "button.h"

#define BUTTON_NUMBER 3

void button_init(void){
	DDRD &= ~((1<<PD1) | (1<<PD0));	//Set touch buttons as input
     3fc:	81 b3       	in	r24, 0x11	; 17
     3fe:	8c 7f       	andi	r24, 0xFC	; 252
     400:	81 bb       	out	0x11, r24	; 17
	
	DDRE &= ~((1<<PE0));			//Set joystick button as input
     402:	30 98       	cbi	0x06, 0	; 6
	PORTE |= (1<<PE0);				//Enable pullup
     404:	38 9a       	sbi	0x07, 0	; 7
     406:	08 95       	ret

00000408 <button_read>:
	
}

uint8_t button_read(buttons_t button){
	uint8_t reading = 0;
	if(button == LEFT_BUTTON ){
     408:	81 11       	cpse	r24, r1
     40a:	03 c0       	rjmp	.+6      	; 0x412 <button_read+0xa>
		reading = !!(PIND & (1<<PIND0));
     40c:	80 b3       	in	r24, 0x10	; 16
     40e:	81 70       	andi	r24, 0x01	; 1
     410:	08 95       	ret
	}
	
	else if (button == RIGHT_BUTTON){
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	21 f4       	brne	.+8      	; 0x41e <button_read+0x16>
		reading = !!(PIND & (1<<PIND1));
     416:	80 b3       	in	r24, 0x10	; 16
     418:	86 95       	lsr	r24
     41a:	81 70       	andi	r24, 0x01	; 1
     41c:	08 95       	ret
		
	}
	
	else if (button == JOYSTICK_BUTTON){
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	21 f4       	brne	.+8      	; 0x42a <button_read+0x22>
		reading = !(PINE & (1<<PINE0));
     422:	85 b1       	in	r24, 0x05	; 5
     424:	80 95       	com	r24
     426:	81 70       	andi	r24, 0x01	; 1
     428:	08 95       	ret
	PORTE |= (1<<PE0);				//Enable pullup
	
}

uint8_t button_read(buttons_t button){
	uint8_t reading = 0;
     42a:	80 e0       	ldi	r24, 0x00	; 0
		reading = !(PINE & (1<<PINE0));
		
	}
	
	return reading;
}
     42c:	08 95       	ret

0000042e <__vector_2>:
#include "mcp2515_registers.h"
#include <stdio.h>

static uint8_t can_message_available_var = 0;

ISR(INT1_vect){
     42e:	1f 92       	push	r1
     430:	0f 92       	push	r0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	0f 92       	push	r0
     436:	11 24       	eor	r1, r1
     438:	8f 93       	push	r24
	can_message_available_var = 1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	80 93 3a 02 	sts	0x023A, r24
}
     440:	8f 91       	pop	r24
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <can_init>:
uint8_t can_message_available(){
	return can_message_available_var;
}

void can_init(){
	mcp2515_init();
     44c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <mcp2515_init>
	mcp2515_reset();
     450:	0e 94 98 03 	call	0x730	; 0x730 <mcp2515_reset>
	
	
	//Enable interrupt on received message in both buffers
	mcp2515_write(CANINTE, (1 <<RX1IE) | (1<<RX0IE));
     454:	66 e0       	ldi	r22, 0x06	; 6
     456:	8b e2       	ldi	r24, 0x2B	; 43
     458:	0e 94 77 03 	call	0x6ee	; 0x6ee <mcp2515_write>
	
// 	Receive every message, no filter
// 		mcp2515_write(RXB0CTRL, RXB_RXM1 | RXB_RXM0);
// 		
	//Set mode to normal operation
	mcp2515_write(CANCTRL,MODE_NORMAL);
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	8f e0       	ldi	r24, 0x0F	; 15
     460:	0e 94 77 03 	call	0x6ee	; 0x6ee <mcp2515_write>
	
	
	//Enable interrupt on falling edge of INT1, PD3
	MCUCR |= (1<<ISC11); 
     464:	85 b7       	in	r24, 0x35	; 53
     466:	88 60       	ori	r24, 0x08	; 8
     468:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT1);
     46a:	8b b7       	in	r24, 0x3b	; 59
     46c:	80 68       	ori	r24, 0x80	; 128
     46e:	8b bf       	out	0x3b, r24	; 59
     470:	08 95       	ret

00000472 <can_transmit>:
}

void can_transmit(can_message_t message){
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	2b 97       	sbiw	r28, 0x0b	; 11
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	e9 82       	std	Y+1, r14	; 0x01
     490:	fa 82       	std	Y+2, r15	; 0x02
     492:	0b 83       	std	Y+3, r16	; 0x03
     494:	1c 83       	std	Y+4, r17	; 0x04
     496:	2d 83       	std	Y+5, r18	; 0x05
     498:	3e 83       	std	Y+6, r19	; 0x06
     49a:	4f 83       	std	Y+7, r20	; 0x07
     49c:	58 87       	std	Y+8, r21	; 0x08
     49e:	69 87       	std	Y+9, r22	; 0x09
     4a0:	7a 87       	std	Y+10, r23	; 0x0a
     4a2:	8b 87       	std	Y+11, r24	; 0x0b
     4a4:	e9 80       	ldd	r14, Y+1	; 0x01
     4a6:	fa 80       	ldd	r15, Y+2	; 0x02
	//Use buffer 0
	
	//Load ID
	mcp2515_write(TXB0SIDH, (0xff & (message.id >> 3))); //load high
     4a8:	b7 01       	movw	r22, r14
     4aa:	76 95       	lsr	r23
     4ac:	67 95       	ror	r22
     4ae:	76 95       	lsr	r23
     4b0:	67 95       	ror	r22
     4b2:	76 95       	lsr	r23
     4b4:	67 95       	ror	r22
     4b6:	81 e3       	ldi	r24, 0x31	; 49
     4b8:	0e 94 77 03 	call	0x6ee	; 0x6ee <mcp2515_write>
	mcp2515_write(TXB0SIDL, 0xe0 & (message.id << 5));
     4bc:	6e 2d       	mov	r22, r14
     4be:	62 95       	swap	r22
     4c0:	66 0f       	add	r22, r22
     4c2:	60 7e       	andi	r22, 0xE0	; 224
     4c4:	82 e3       	ldi	r24, 0x32	; 50
     4c6:	0e 94 77 03 	call	0x6ee	; 0x6ee <mcp2515_write>
	
	//Set length
	mcp2515_write(TXB0DLC, 0x0f & message.length);
     4ca:	60 2f       	mov	r22, r16
     4cc:	6f 70       	andi	r22, 0x0F	; 15
     4ce:	85 e3       	ldi	r24, 0x35	; 53
     4d0:	0e 94 77 03 	call	0x6ee	; 0x6ee <mcp2515_write>
	
	//Load data
	for (uint8_t i = 0; i < message.length; i++){
     4d4:	00 23       	and	r16, r16
     4d6:	79 f0       	breq	.+30     	; 0x4f6 <can_transmit+0x84>
     4d8:	7e 01       	movw	r14, r28
     4da:	84 e0       	ldi	r24, 0x04	; 4
     4dc:	e8 0e       	add	r14, r24
     4de:	f1 1c       	adc	r15, r1
     4e0:	0a 5c       	subi	r16, 0xCA	; 202
     4e2:	16 e3       	ldi	r17, 0x36	; 54
		mcp2515_write(TXB0D0+i, message.data[i]);
     4e4:	f7 01       	movw	r30, r14
     4e6:	61 91       	ld	r22, Z+
     4e8:	7f 01       	movw	r14, r30
     4ea:	81 2f       	mov	r24, r17
     4ec:	0e 94 77 03 	call	0x6ee	; 0x6ee <mcp2515_write>
     4f0:	1f 5f       	subi	r17, 0xFF	; 255
	
	//Set length
	mcp2515_write(TXB0DLC, 0x0f & message.length);
	
	//Load data
	for (uint8_t i = 0; i < message.length; i++){
     4f2:	10 13       	cpse	r17, r16
     4f4:	f7 cf       	rjmp	.-18     	; 0x4e4 <can_transmit+0x72>
		mcp2515_write(TXB0D0+i, message.data[i]);
	}
	
	//Send request to send
	mcp2515_rts(1);
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_rts>
	
}
     4fc:	2b 96       	adiw	r28, 0x0b	; 11
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	08 95       	ret

00000516 <game_run>:


static uint8_t game_started = 0;


void game_run(){
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	2b 97       	sbiw	r28, 0x0b	; 11
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
	if(game_started){
     534:	80 91 3b 02 	lds	r24, 0x023B
     538:	88 23       	and	r24, r24
     53a:	29 f1       	breq	.+74     	; 0x586 <game_run+0x70>
		can_message_t joystick_message;
		
		joystick_pos_t pos = joystick_read(); 
     53c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <joystick_read>
     540:	18 2f       	mov	r17, r24
		uint8_t button = button_read(RIGHT_BUTTON);
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	0e 94 04 02 	call	0x408	; 0x408 <button_read>
     548:	d8 2e       	mov	r13, r24
		
		joystick_message.length = 4;
     54a:	84 e0       	ldi	r24, 0x04	; 4
     54c:	8b 83       	std	Y+3, r24	; 0x03
		joystick_message.data[0] = pos.x;
     54e:	1c 83       	std	Y+4, r17	; 0x04
		joystick_message.data[1] = slider_read(RIGHT_SLIDER);
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	0e 94 16 05 	call	0xa2c	; 0xa2c <slider_read>
     556:	8d 83       	std	Y+5, r24	; 0x05
		joystick_message.data[2] = slider_read(LEFT_SLIDER);
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	0e 94 16 05 	call	0xa2c	; 0xa2c <slider_read>
		joystick_message.data[3] = button;
		
		joystick_message.id = CAN_SENDT_JOYSTICK_POS;
     55e:	99 ee       	ldi	r25, 0xE9	; 233
     560:	e9 2e       	mov	r14, r25
     562:	99 83       	std	Y+1, r25	; 0x01
     564:	93 e0       	ldi	r25, 0x03	; 3
     566:	9a 83       	std	Y+2, r25	; 0x02
		
		can_transmit(joystick_message);
     568:	0f 2e       	mov	r0, r31
     56a:	f3 e0       	ldi	r31, 0x03	; 3
     56c:	ff 2e       	mov	r15, r31
     56e:	f0 2d       	mov	r31, r0
     570:	0b 81       	ldd	r16, Y+3	; 0x03
     572:	1c 81       	ldd	r17, Y+4	; 0x04
     574:	2d 81       	ldd	r18, Y+5	; 0x05
     576:	38 2f       	mov	r19, r24
     578:	4d 2d       	mov	r20, r13
     57a:	58 85       	ldd	r21, Y+8	; 0x08
     57c:	69 85       	ldd	r22, Y+9	; 0x09
     57e:	7a 85       	ldd	r23, Y+10	; 0x0a
     580:	8b 85       	ldd	r24, Y+11	; 0x0b
     582:	0e 94 39 02 	call	0x472	; 0x472 <can_transmit>
			
	}
	
}
     586:	2b 96       	adiw	r28, 0x0b	; 11
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	f8 94       	cli
     58c:	de bf       	out	0x3e, r29	; 62
     58e:	0f be       	out	0x3f, r0	; 63
     590:	cd bf       	out	0x3d, r28	; 61
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	08 95       	ret

000005a2 <game_start>:

void game_start(){
	game_started = 1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	80 93 3b 02 	sts	0x023B, r24
     5a8:	08 95       	ret

000005aa <game_stop>:
}

void game_stop(){
	game_started = 0;
     5aa:	10 92 3b 02 	sts	0x023B, r1
     5ae:	08 95       	ret

000005b0 <joystick_init>:
#define NEUTRAL_RANGE 40

static joystick_pos_t offset = {0, 0};


void joystick_init(void){
     5b0:	08 95       	ret

000005b2 <joystick_read>:

	
}

joystick_pos_t joystick_read(void){
     5b2:	cf 93       	push	r28
	joystick_pos_t reading;
	reading.x = (int8_t)(((int16_t) adc_read(JOYSTICK_X_ADC_CHANNEL)) - 128) + offset.x;
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <adc_read>
     5ba:	c0 91 3c 02 	lds	r28, 0x023C
     5be:	c0 58       	subi	r28, 0x80	; 128
     5c0:	c8 0f       	add	r28, r24
	reading.y = (int8_t)(((int16_t) adc_read(JOYSTICK_Y_ADC_CHANNEL)) - 128) + offset.y;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <adc_read>
     5c8:	90 91 3d 02 	lds	r25, 0x023D
     5cc:	90 58       	subi	r25, 0x80	; 128
     5ce:	98 0f       	add	r25, r24
	
	return reading;
}
     5d0:	8c 2f       	mov	r24, r28
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <joystick_read_direction>:

joystick_direction_t joystick_read_direction(void){
	joystick_pos_t reading= joystick_read();
     5d6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <joystick_read>
     5da:	69 2f       	mov	r22, r25
     5dc:	98 2f       	mov	r25, r24
     5de:	76 2f       	mov	r23, r22
	joystick_direction_t result;
	
	
	
	if(reading.x > NEUTRAL_RANGE &&  abs(reading.y) < abs(reading.x)){
     5e0:	89 32       	cpi	r24, 0x29	; 41
     5e2:	b4 f0       	brlt	.+44     	; 0x610 <joystick_read_direction+0x3a>
     5e4:	46 2f       	mov	r20, r22
     5e6:	55 27       	eor	r21, r21
     5e8:	47 fd       	sbrc	r20, 7
     5ea:	50 95       	com	r21
     5ec:	55 23       	and	r21, r21
     5ee:	1c f4       	brge	.+6      	; 0x5f6 <joystick_read_direction+0x20>
     5f0:	51 95       	neg	r21
     5f2:	41 95       	neg	r20
     5f4:	51 09       	sbc	r21, r1
     5f6:	28 2f       	mov	r18, r24
     5f8:	33 27       	eor	r19, r19
     5fa:	27 fd       	sbrc	r18, 7
     5fc:	30 95       	com	r19
     5fe:	33 23       	and	r19, r19
     600:	1c f4       	brge	.+6      	; 0x608 <joystick_read_direction+0x32>
     602:	31 95       	neg	r19
     604:	21 95       	neg	r18
     606:	31 09       	sbc	r19, r1
     608:	42 17       	cp	r20, r18
     60a:	53 07       	cpc	r21, r19
     60c:	0c f4       	brge	.+2      	; 0x610 <joystick_read_direction+0x3a>
     60e:	46 c0       	rjmp	.+140    	; 0x69c <joystick_read_direction+0xc6>
		result = RIGHT;
	}
	
	else if(reading.x < -NEUTRAL_RANGE && abs(reading.y) < abs(reading.x)){
     610:	98 3d       	cpi	r25, 0xD8	; 216
     612:	ac f4       	brge	.+42     	; 0x63e <joystick_read_direction+0x68>
     614:	46 2f       	mov	r20, r22
     616:	55 27       	eor	r21, r21
     618:	47 fd       	sbrc	r20, 7
     61a:	50 95       	com	r21
     61c:	55 23       	and	r21, r21
     61e:	1c f4       	brge	.+6      	; 0x626 <joystick_read_direction+0x50>
     620:	51 95       	neg	r21
     622:	41 95       	neg	r20
     624:	51 09       	sbc	r21, r1
     626:	28 2f       	mov	r18, r24
     628:	33 27       	eor	r19, r19
     62a:	27 fd       	sbrc	r18, 7
     62c:	30 95       	com	r19
     62e:	33 23       	and	r19, r19
     630:	1c f4       	brge	.+6      	; 0x638 <joystick_read_direction+0x62>
     632:	31 95       	neg	r19
     634:	21 95       	neg	r18
     636:	31 09       	sbc	r19, r1
     638:	42 17       	cp	r20, r18
     63a:	53 07       	cpc	r21, r19
     63c:	8c f1       	brlt	.+98     	; 0x6a0 <joystick_read_direction+0xca>
		result = LEFT;
	}
	
	else if(reading.y > NEUTRAL_RANGE && abs(reading.x) < abs(reading.y)){
     63e:	79 32       	cpi	r23, 0x29	; 41
     640:	ac f0       	brlt	.+42     	; 0x66c <joystick_read_direction+0x96>
     642:	48 2f       	mov	r20, r24
     644:	55 27       	eor	r21, r21
     646:	47 fd       	sbrc	r20, 7
     648:	50 95       	com	r21
     64a:	55 23       	and	r21, r21
     64c:	1c f4       	brge	.+6      	; 0x654 <joystick_read_direction+0x7e>
     64e:	51 95       	neg	r21
     650:	41 95       	neg	r20
     652:	51 09       	sbc	r21, r1
     654:	26 2f       	mov	r18, r22
     656:	33 27       	eor	r19, r19
     658:	27 fd       	sbrc	r18, 7
     65a:	30 95       	com	r19
     65c:	33 23       	and	r19, r19
     65e:	1c f4       	brge	.+6      	; 0x666 <joystick_read_direction+0x90>
     660:	31 95       	neg	r19
     662:	21 95       	neg	r18
     664:	31 09       	sbc	r19, r1
     666:	42 17       	cp	r20, r18
     668:	53 07       	cpc	r21, r19
     66a:	e4 f0       	brlt	.+56     	; 0x6a4 <joystick_read_direction+0xce>
		
		result = UP;
	}
	
	else if(reading.y < -NEUTRAL_RANGE && abs(reading.x) < abs(reading.y)){
     66c:	78 3d       	cpi	r23, 0xD8	; 216
     66e:	e4 f4       	brge	.+56     	; 0x6a8 <joystick_read_direction+0xd2>
     670:	99 27       	eor	r25, r25
     672:	87 fd       	sbrc	r24, 7
     674:	90 95       	com	r25
     676:	99 23       	and	r25, r25
     678:	1c f4       	brge	.+6      	; 0x680 <joystick_read_direction+0xaa>
     67a:	91 95       	neg	r25
     67c:	81 95       	neg	r24
     67e:	91 09       	sbc	r25, r1
     680:	26 2f       	mov	r18, r22
     682:	33 27       	eor	r19, r19
     684:	27 fd       	sbrc	r18, 7
     686:	30 95       	com	r19
     688:	33 23       	and	r19, r19
     68a:	1c f4       	brge	.+6      	; 0x692 <joystick_read_direction+0xbc>
     68c:	31 95       	neg	r19
     68e:	21 95       	neg	r18
     690:	31 09       	sbc	r19, r1
     692:	82 17       	cp	r24, r18
     694:	93 07       	cpc	r25, r19
     696:	54 f0       	brlt	.+20     	; 0x6ac <joystick_read_direction+0xd6>
		
		result = DOWN;
	}
	
	else {
		result = NEUTRAL;
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	08 95       	ret
	joystick_direction_t result;
	
	
	
	if(reading.x > NEUTRAL_RANGE &&  abs(reading.y) < abs(reading.x)){
		result = RIGHT;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	08 95       	ret
	}
	
	else if(reading.x < -NEUTRAL_RANGE && abs(reading.y) < abs(reading.x)){
		result = LEFT;
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	08 95       	ret
	}
	
	else if(reading.y > NEUTRAL_RANGE && abs(reading.x) < abs(reading.y)){
		
		result = UP;
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	08 95       	ret
		
		result = DOWN;
	}
	
	else {
		result = NEUTRAL;
     6a8:	84 e0       	ldi	r24, 0x04	; 4
     6aa:	08 95       	ret
		result = UP;
	}
	
	else if(reading.y < -NEUTRAL_RANGE && abs(reading.x) < abs(reading.y)){
		
		result = DOWN;
     6ac:	83 e0       	ldi	r24, 0x03	; 3
	else {
		result = NEUTRAL;
	}	
	
	return result;
}
     6ae:	08 95       	ret

000006b0 <main>:


int main(void)
{
	//Init systems
	sram_init();
     6b0:	0e 94 32 05 	call	0xa64	; 0xa64 <sram_init>
	adc_init();
     6b4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	button_init();
     6b8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <button_init>
	oled_init();
     6bc:	0e 94 ba 04 	call	0x974	; 0x974 <oled_init>
	uart_init();
     6c0:	0e 94 41 05 	call	0xa82	; 0xa82 <uart_init>
	can_init();
     6c4:	0e 94 26 02 	call	0x44c	; 0x44c <can_init>
	joystick_init();
     6c8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <joystick_init>
	
	//Enable interrupts
	sei();
     6cc:	78 94       	sei


	printf("Init done\n");
     6ce:	8a e1       	ldi	r24, 0x1A	; 26
     6d0:	92 e0       	ldi	r25, 0x02	; 2
     6d2:	0e 94 cb 05 	call	0xb96	; 0xb96 <puts>

	while(1){

		menu_update();
     6d6:	0e 94 24 04 	call	0x848	; 0x848 <menu_update>
		game_run();
     6da:	0e 94 8b 02 	call	0x516	; 0x516 <game_run>
     6de:	fb cf       	rjmp	.-10     	; 0x6d6 <main+0x26>

000006e0 <mcp2515_disable>:
#include "mcp2515.h"
#include "spi.h"

void mcp2515_disable(){
	//Set CS high
	PORTB |= (1<<PB4);
     6e0:	c4 9a       	sbi	0x18, 4	; 24
     6e2:	08 95       	ret

000006e4 <mcp2515_enable>:
}

void mcp2515_enable(){
	//Set CS low
	PORTB &= ~(1<<PB4);	
     6e4:	c4 98       	cbi	0x18, 4	; 24
     6e6:	08 95       	ret

000006e8 <mcp2515_init>:
}

void mcp2515_init(){
	spi_init();
     6e8:	0e 94 24 05 	call	0xa48	; 0xa48 <spi_init>
     6ec:	08 95       	ret

000006ee <mcp2515_write>:
	mcp2515_disable();	
	return data;
}

//Write data to register beginning at selected address.
void mcp2515_write(uint8_t address, uint8_t data){
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	d8 2f       	mov	r29, r24
     6f4:	c6 2f       	mov	r28, r22
	mcp2515_enable();
     6f6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mcp2515_enable>
	spi_transmit(0x02);
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	0e 94 2b 05 	call	0xa56	; 0xa56 <spi_transmit>
	spi_transmit(address);
     700:	8d 2f       	mov	r24, r29
     702:	0e 94 2b 05 	call	0xa56	; 0xa56 <spi_transmit>
	
	//send data
	spi_transmit(data);
     706:	8c 2f       	mov	r24, r28
     708:	0e 94 2b 05 	call	0xa56	; 0xa56 <spi_transmit>
	mcp2515_disable();
     70c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <mcp2515_disable>
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <mcp2515_rts>:

//Instructs controller to begin message transmission sequence for
//any of the transmit buffers
void mcp2515_rts(uint8_t registers){
     716:	cf 93       	push	r28
     718:	c8 2f       	mov	r28, r24
	mcp2515_enable();
     71a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mcp2515_enable>
	spi_transmit(0x80 | (7 & registers));
     71e:	8c 2f       	mov	r24, r28
     720:	87 70       	andi	r24, 0x07	; 7
     722:	80 68       	ori	r24, 0x80	; 128
     724:	0e 94 2b 05 	call	0xa56	; 0xa56 <spi_transmit>
	mcp2515_disable();
     728:	0e 94 70 03 	call	0x6e0	; 0x6e0 <mcp2515_disable>
}
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <mcp2515_reset>:
	mcp2515_disable();
}

//Resets internal registers to default state,
void mcp2515_reset(){
	mcp2515_enable();
     730:	0e 94 72 03 	call	0x6e4	; 0x6e4 <mcp2515_enable>
	spi_transmit(0xc0);
     734:	80 ec       	ldi	r24, 0xC0	; 192
     736:	0e 94 2b 05 	call	0xa56	; 0xa56 <spi_transmit>
	mcp2515_disable();
     73a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <mcp2515_disable>
     73e:	08 95       	ret

00000740 <menu_display>:
	 .function = NULL
 };


//Displays the a menu struct
uint8_t menu_display(Menu *menu){
     740:	bf 92       	push	r11
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	8c 01       	movw	r16, r24
	oled_pos(12, 0);
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	8c e0       	ldi	r24, 0x0C	; 12
     758:	0e 94 ee 04 	call	0x9dc	; 0x9dc <oled_pos>

	fprintf(&oled_str, "%-15s", menu->header);
     75c:	1f 93       	push	r17
     75e:	0f 93       	push	r16
     760:	89 e2       	ldi	r24, 0x29	; 41
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	9f 93       	push	r25
     766:	8f 93       	push	r24
     768:	8e ef       	ldi	r24, 0xFE	; 254
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
     770:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fprintf>
     774:	78 01       	movw	r14, r16
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	c0 e0       	ldi	r28, 0x00	; 0
     784:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i = 0; i < 7; i++){
		oled_pos(12, i+1);
		if(i < menu->number_of_items){
			fprintf(&oled_str, "%-15s", menu->items[i]->header);
     786:	0f 2e       	mov	r0, r31
     788:	f9 e2       	ldi	r31, 0x29	; 41
     78a:	cf 2e       	mov	r12, r31
     78c:	f2 e0       	ldi	r31, 0x02	; 2
     78e:	df 2e       	mov	r13, r31
     790:	f0 2d       	mov	r31, r0
     792:	bc 2e       	mov	r11, r28
     794:	6c 2f       	mov	r22, r28
     796:	6f 5f       	subi	r22, 0xFF	; 255
uint8_t menu_display(Menu *menu){
	oled_pos(12, 0);

	fprintf(&oled_str, "%-15s", menu->header);
	for(uint8_t i = 0; i < 7; i++){
		oled_pos(12, i+1);
     798:	8c e0       	ldi	r24, 0x0C	; 12
     79a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <oled_pos>
		if(i < menu->number_of_items){
     79e:	f8 01       	movw	r30, r16
     7a0:	81 89       	ldd	r24, Z+17	; 0x11
     7a2:	c8 17       	cp	r28, r24
     7a4:	a0 f4       	brcc	.+40     	; 0x7ce <menu_display+0x8e>
			fprintf(&oled_str, "%-15s", menu->items[i]->header);
     7a6:	f7 01       	movw	r30, r14
     7a8:	83 89       	ldd	r24, Z+19	; 0x13
     7aa:	8f 93       	push	r24
     7ac:	82 89       	ldd	r24, Z+18	; 0x12
     7ae:	8f 93       	push	r24
     7b0:	df 92       	push	r13
     7b2:	cf 92       	push	r12
     7b4:	8e ef       	ldi	r24, 0xFE	; 254
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	9f 93       	push	r25
     7ba:	8f 93       	push	r24
     7bc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fprintf>
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0a c0       	rjmp	.+20     	; 0x7e2 <menu_display+0xa2>
		}
		else{
			fprintf(&oled_str,"          ");
     7ce:	2e ef       	ldi	r18, 0xFE	; 254
     7d0:	31 e0       	ldi	r19, 0x01	; 1
     7d2:	4a e0       	ldi	r20, 0x0A	; 10
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	8f e2       	ldi	r24, 0x2F	; 47
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 97 05 	call	0xb2e	; 0xb2e <fwrite>
			//oled_clear_line(i);
		}
		
		oled_pos(0, i);
     7e2:	6b 2d       	mov	r22, r11
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <oled_pos>
		
		if (menu->number_of_items > 0 && menu->selected +1 == i){
     7ea:	f8 01       	movw	r30, r16
     7ec:	81 89       	ldd	r24, Z+17	; 0x11
     7ee:	88 23       	and	r24, r24
     7f0:	91 f0       	breq	.+36     	; 0x816 <menu_display+0xd6>
     7f2:	60 89       	ldd	r22, Z+16	; 0x10
     7f4:	86 2f       	mov	r24, r22
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	8c 17       	cp	r24, r28
     7fc:	9d 07       	cpc	r25, r29
     7fe:	59 f4       	brne	.+22     	; 0x816 <menu_display+0xd6>
			oled_pos(0, menu->selected +1);
     800:	6f 5f       	subi	r22, 0xFF	; 255
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	0e 94 ee 04 	call	0x9dc	; 0x9dc <oled_pos>
			fprintf(&oled_str, "*");
     808:	6e ef       	ldi	r22, 0xFE	; 254
     80a:	71 e0       	ldi	r23, 0x01	; 1
     80c:	8a e2       	ldi	r24, 0x2A	; 42
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
     814:	06 c0       	rjmp	.+12     	; 0x822 <menu_display+0xe2>
		}
		else{
			fprintf(&oled_str, " ");
     816:	6e ef       	ldi	r22, 0xFE	; 254
     818:	71 e0       	ldi	r23, 0x01	; 1
     81a:	80 e2       	ldi	r24, 0x20	; 32
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
     822:	21 96       	adiw	r28, 0x01	; 1
     824:	f2 e0       	ldi	r31, 0x02	; 2
     826:	ef 0e       	add	r14, r31
     828:	f1 1c       	adc	r15, r1
//Displays the a menu struct
uint8_t menu_display(Menu *menu){
	oled_pos(12, 0);

	fprintf(&oled_str, "%-15s", menu->header);
	for(uint8_t i = 0; i < 7; i++){
     82a:	c7 30       	cpi	r28, 0x07	; 7
     82c:	d1 05       	cpc	r29, r1
     82e:	09 f0       	breq	.+2      	; 0x832 <menu_display+0xf2>
     830:	b0 cf       	rjmp	.-160    	; 0x792 <menu_display+0x52>
			fprintf(&oled_str, " ");
		}
	}

	return 0;
}
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	ff 90       	pop	r15
     83e:	ef 90       	pop	r14
     840:	df 90       	pop	r13
     842:	cf 90       	pop	r12
     844:	bf 90       	pop	r11
     846:	08 95       	ret

00000848 <menu_update>:

	
	
	void (*function_temp)() = NULL;

	if(joystick_read_direction() == UP){
     848:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <joystick_read_direction>
     84c:	82 30       	cpi	r24, 0x02	; 2
     84e:	59 f4       	brne	.+22     	; 0x866 <menu_update+0x1e>
		if(0 < currentMenu->selected ){
     850:	e0 91 00 01 	lds	r30, 0x0100
     854:	f0 91 01 01 	lds	r31, 0x0101
     858:	80 89       	ldd	r24, Z+16	; 0x10
     85a:	88 23       	and	r24, r24
     85c:	09 f4       	brne	.+2      	; 0x860 <menu_update+0x18>
     85e:	4f c0       	rjmp	.+158    	; 0x8fe <menu_update+0xb6>
			currentMenu->selected--;
     860:	81 50       	subi	r24, 0x01	; 1
     862:	80 8b       	std	Z+16, r24	; 0x10
     864:	4c c0       	rjmp	.+152    	; 0x8fe <menu_update+0xb6>
		}
			
	}
		
	else if(joystick_read_direction() == DOWN){
     866:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <joystick_read_direction>
     86a:	83 30       	cpi	r24, 0x03	; 3
     86c:	81 f4       	brne	.+32     	; 0x88e <menu_update+0x46>
		if(currentMenu->number_of_items > currentMenu->selected +1){
     86e:	e0 91 00 01 	lds	r30, 0x0100
     872:	f0 91 01 01 	lds	r31, 0x0101
     876:	40 89       	ldd	r20, Z+16	; 0x10
     878:	21 89       	ldd	r18, Z+17	; 0x11
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	84 2f       	mov	r24, r20
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	82 17       	cp	r24, r18
     884:	93 07       	cpc	r25, r19
     886:	dc f5       	brge	.+118    	; 0x8fe <menu_update+0xb6>
			currentMenu->selected++;
     888:	4f 5f       	subi	r20, 0xFF	; 255
     88a:	40 8b       	std	Z+16, r20	; 0x10
     88c:	38 c0       	rjmp	.+112    	; 0x8fe <menu_update+0xb6>
		}
	}
		
	else if(joystick_read_direction() == RIGHT){
     88e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <joystick_read_direction>
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	f9 f4       	brne	.+62     	; 0x8d4 <menu_update+0x8c>
		if(currentMenu->items[currentMenu->selected] != NULL){
     896:	e0 91 00 01 	lds	r30, 0x0100
     89a:	f0 91 01 01 	lds	r31, 0x0101
     89e:	80 89       	ldd	r24, Z+16	; 0x10
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	09 96       	adiw	r24, 0x09	; 9
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	e8 0f       	add	r30, r24
     8aa:	f9 1f       	adc	r31, r25
     8ac:	80 81       	ld	r24, Z
     8ae:	91 81       	ldd	r25, Z+1	; 0x01
     8b0:	00 97       	sbiw	r24, 0x00	; 0
     8b2:	31 f0       	breq	.+12     	; 0x8c0 <menu_update+0x78>
			currentMenu = currentMenu->items[currentMenu->selected];
     8b4:	90 93 01 01 	sts	0x0101, r25
     8b8:	80 93 00 01 	sts	0x0100, r24
			//Clear line if menu is updated
			oled_clear();
     8bc:	0e 94 b0 04 	call	0x960	; 0x960 <oled_clear>
		}
		function_temp = currentMenu->function;
     8c0:	e0 91 00 01 	lds	r30, 0x0100
     8c4:	f0 91 01 01 	lds	r31, 0x0101
     8c8:	02 a0       	ldd	r0, Z+34	; 0x22
     8ca:	f3 a1       	ldd	r31, Z+35	; 0x23
     8cc:	e0 2d       	mov	r30, r0
		}
			
	}
		
	//Run function associated with menu if it exists and button is pressed
	if(function_temp != NULL){
     8ce:	30 97       	sbiw	r30, 0x00	; 0
     8d0:	a1 f4       	brne	.+40     	; 0x8fa <menu_update+0xb2>
     8d2:	15 c0       	rjmp	.+42     	; 0x8fe <menu_update+0xb6>
		function_temp = currentMenu->function;
			

	}
		
	else if(joystick_read_direction() == LEFT){
     8d4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <joystick_read_direction>
     8d8:	81 11       	cpse	r24, r1
     8da:	11 c0       	rjmp	.+34     	; 0x8fe <menu_update+0xb6>
		if(currentMenu->parrent != NULL){
     8dc:	e0 91 00 01 	lds	r30, 0x0100
     8e0:	f0 91 01 01 	lds	r31, 0x0101
     8e4:	80 a1       	ldd	r24, Z+32	; 0x20
     8e6:	91 a1       	ldd	r25, Z+33	; 0x21
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	49 f0       	breq	.+18     	; 0x8fe <menu_update+0xb6>
			currentMenu = currentMenu->parrent;
     8ec:	90 93 01 01 	sts	0x0101, r25
     8f0:	80 93 00 01 	sts	0x0100, r24
			//Clear line if menu is updated
			oled_clear();
     8f4:	0e 94 b0 04 	call	0x960	; 0x960 <oled_clear>
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <menu_update+0xb6>
			
	}
		
	//Run function associated with menu if it exists and button is pressed
	if(function_temp != NULL){
		function_temp();
     8fa:	09 95       	icall
     8fc:	06 c0       	rjmp	.+12     	; 0x90a <menu_update+0xc2>
	}
	else {
		menu_display(currentMenu);
     8fe:	80 91 00 01 	lds	r24, 0x0100
     902:	90 91 01 01 	lds	r25, 0x0101
     906:	0e 94 a0 03 	call	0x740	; 0x740 <menu_display>
	}
		
	//Wait for joystick to be in neutral
	while(joystick_read_direction() != NEUTRAL);
     90a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <joystick_read_direction>
     90e:	84 30       	cpi	r24, 0x04	; 4
     910:	e1 f7       	brne	.-8      	; 0x90a <menu_update+0xc2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     912:	8f ef       	ldi	r24, 0xFF	; 255
     914:	9f e5       	ldi	r25, 0x5F	; 95
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <menu_update+0xce>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <menu_update+0xd4>
     91c:	00 00       	nop
     91e:	08 95       	ret

00000920 <oled_goto_line>:
void oled_home(void){
	
}

void oled_goto_line(uint8_t line){
	oled_state.cursor_y = line & 0x07;
     920:	87 70       	andi	r24, 0x07	; 7
     922:	80 93 3f 02 	sts	0x023F, r24
	
	oled_write_command(0xb0 | (0x07 & oled_state.cursor_y));
     926:	80 6b       	ori	r24, 0xB0	; 176
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
     928:	80 93 00 10 	sts	0x1000, r24
     92c:	08 95       	ret

0000092e <oled_goto_column>:
	
	oled_write_command(0xb0 | (0x07 & oled_state.cursor_y));
}

void oled_goto_column(uint8_t column){
	oled_state.cursor_x = column & 0x8F;
     92e:	ae e3       	ldi	r26, 0x3E	; 62
     930:	b2 e0       	ldi	r27, 0x02	; 2
     932:	98 2f       	mov	r25, r24
     934:	9f 78       	andi	r25, 0x8F	; 143
     936:	9c 93       	st	X, r25
	
	oled_write_command(0x0F & oled_state.cursor_x);
     938:	8f 70       	andi	r24, 0x0F	; 15
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
     93a:	e0 e0       	ldi	r30, 0x00	; 0
     93c:	f0 e1       	ldi	r31, 0x10	; 16
     93e:	80 83       	st	Z, r24

void oled_goto_column(uint8_t column){
	oled_state.cursor_x = column & 0x8F;
	
	oled_write_command(0x0F & oled_state.cursor_x);
	oled_write_command((1<<4) | oled_state.cursor_x >> 4);
     940:	8c 91       	ld	r24, X
     942:	82 95       	swap	r24
     944:	8f 70       	andi	r24, 0x0F	; 15
     946:	80 61       	ori	r24, 0x10	; 16
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
     948:	80 83       	st	Z, r24
     94a:	08 95       	ret

0000094c <oled_clear_line>:
	oled_write_command((1<<4) | oled_state.cursor_x >> 4);
}

//Clear single line(page)
void oled_clear_line(uint8_t line){
	oled_goto_line(line);
     94c:	0e 94 90 04 	call	0x920	; 0x920 <oled_goto_line>
	for(uint8_t i = 0; i < 128; i++){
     950:	80 e0       	ldi	r24, 0x00	; 0
	oled_write_command(0xaf); // display on
}

//Writes data to the display
void oled_write_data(uint8_t data){
	*oled_data_address = data;
     952:	e0 e0       	ldi	r30, 0x00	; 0
     954:	f2 e1       	ldi	r31, 0x12	; 18
     956:	10 82       	st	Z, r1
}

//Clear single line(page)
void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	for(uint8_t i = 0; i < 128; i++){
     958:	8f 5f       	subi	r24, 0xFF	; 255
     95a:	80 38       	cpi	r24, 0x80	; 128
     95c:	e1 f7       	brne	.-8      	; 0x956 <oled_clear_line+0xa>
		oled_write_data(0x00);
	}
}
     95e:	08 95       	ret

00000960 <oled_clear>:

//Clear whole display
void oled_clear(void){
     960:	cf 93       	push	r28
	for(uint8_t j = 0; j < 8; j++){
     962:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clear_line(j);
     964:	8c 2f       	mov	r24, r28
     966:	0e 94 a6 04 	call	0x94c	; 0x94c <oled_clear_line>
	}
}

//Clear whole display
void oled_clear(void){
	for(uint8_t j = 0; j < 8; j++){
     96a:	cf 5f       	subi	r28, 0xFF	; 255
     96c:	c8 30       	cpi	r28, 0x08	; 8
     96e:	d1 f7       	brne	.-12     	; 0x964 <oled_clear+0x4>
		oled_clear_line(j);
	}
}
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <oled_init>:
 
static oled_state_t oled_state = {0};
 

//Initializes the display
void oled_init(void){
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
     978:	c0 e0       	ldi	r28, 0x00	; 0
     97a:	d0 e1       	ldi	r29, 0x10	; 16
     97c:	8e ea       	ldi	r24, 0xAE	; 174
     97e:	88 83       	st	Y, r24
     980:	81 ea       	ldi	r24, 0xA1	; 161
     982:	88 83       	st	Y, r24
     984:	8a ed       	ldi	r24, 0xDA	; 218
     986:	88 83       	st	Y, r24
     988:	82 e1       	ldi	r24, 0x12	; 18
     98a:	88 83       	st	Y, r24
     98c:	88 ec       	ldi	r24, 0xC8	; 200
     98e:	88 83       	st	Y, r24
     990:	88 ea       	ldi	r24, 0xA8	; 168
     992:	88 83       	st	Y, r24
     994:	8f e3       	ldi	r24, 0x3F	; 63
     996:	88 83       	st	Y, r24
     998:	85 ed       	ldi	r24, 0xD5	; 213
     99a:	88 83       	st	Y, r24
     99c:	80 e8       	ldi	r24, 0x80	; 128
     99e:	88 83       	st	Y, r24
     9a0:	81 e8       	ldi	r24, 0x81	; 129
     9a2:	88 83       	st	Y, r24
     9a4:	80 e5       	ldi	r24, 0x50	; 80
     9a6:	88 83       	st	Y, r24
     9a8:	89 ed       	ldi	r24, 0xD9	; 217
     9aa:	88 83       	st	Y, r24
     9ac:	81 e2       	ldi	r24, 0x21	; 33
     9ae:	88 83       	st	Y, r24
     9b0:	80 e2       	ldi	r24, 0x20	; 32
     9b2:	88 83       	st	Y, r24
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	88 83       	st	Y, r24
     9b8:	8b ed       	ldi	r24, 0xDB	; 219
     9ba:	88 83       	st	Y, r24
     9bc:	80 e3       	ldi	r24, 0x30	; 48
     9be:	88 83       	st	Y, r24
     9c0:	8d ea       	ldi	r24, 0xAD	; 173
     9c2:	88 83       	st	Y, r24
     9c4:	18 82       	st	Y, r1
     9c6:	84 ea       	ldi	r24, 0xA4	; 164
     9c8:	88 83       	st	Y, r24
     9ca:	86 ea       	ldi	r24, 0xA6	; 166
     9cc:	88 83       	st	Y, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	
	oled_clear(); //Clear the display
     9ce:	0e 94 b0 04 	call	0x960	; 0x960 <oled_clear>
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
     9d2:	8f ea       	ldi	r24, 0xAF	; 175
     9d4:	88 83       	st	Y, r24
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	
	oled_clear(); //Clear the display
	oled_write_command(0xaf); // display on
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <oled_pos>:
	for(uint8_t j = 0; j < 8; j++){
		oled_clear_line(j);
	}
}

void oled_pos(uint8_t column, uint8_t row){
     9dc:	cf 93       	push	r28
     9de:	c8 2f       	mov	r28, r24
     9e0:	86 2f       	mov	r24, r22
	oled_goto_line(row);
     9e2:	0e 94 90 04 	call	0x920	; 0x920 <oled_goto_line>
	oled_goto_column(column);
     9e6:	8c 2f       	mov	r24, r28
     9e8:	0e 94 97 04 	call	0x92e	; 0x92e <oled_goto_column>
}
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <oled_puts>:


uint8_t oled_puts(char c, FILE* stream){
	if(c == '\n'){
     9f0:	8a 30       	cpi	r24, 0x0A	; 10
     9f2:	39 f4       	brne	.+14     	; 0xa02 <oled_puts+0x12>
		oled_pos(0, oled_state.cursor_y + 1); // Go to new line
     9f4:	60 91 3f 02 	lds	r22, 0x023F
     9f8:	6f 5f       	subi	r22, 0xFF	; 255
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0e 94 ee 04 	call	0x9dc	; 0x9dc <oled_pos>
     a00:	13 c0       	rjmp	.+38     	; 0xa28 <oled_puts+0x38>
     a02:	e8 2f       	mov	r30, r24
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	ee 0f       	add	r30, r30
     a08:	ff 1f       	adc	r31, r31
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	e0 59       	subi	r30, 0x90	; 144
     a14:	f0 40       	sbci	r31, 0x00	; 0
	oled_goto_column(column);
}


uint8_t oled_puts(char c, FILE* stream){
	if(c == '\n'){
     a16:	88 e0       	ldi	r24, 0x08	; 8
	oled_write_command(0xaf); // display on
}

//Writes data to the display
void oled_write_data(uint8_t data){
	*oled_data_address = data;
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b2 e1       	ldi	r27, 0x12	; 18
	}
	
	else{
		for(uint8_t i = 0; i < 8; i++)
		{
			oled_write_data(pgm_read_byte(&font8[c - ' '][i]));
     a1c:	94 91       	lpm	r25, Z
	oled_write_command(0xaf); // display on
}

//Writes data to the display
void oled_write_data(uint8_t data){
	*oled_data_address = data;
     a1e:	9c 93       	st	X, r25
     a20:	81 50       	subi	r24, 0x01	; 1
     a22:	31 96       	adiw	r30, 0x01	; 1
	if(c == '\n'){
		oled_pos(0, oled_state.cursor_y + 1); // Go to new line
	}
	
	else{
		for(uint8_t i = 0; i < 8; i++)
     a24:	81 11       	cpse	r24, r1
     a26:	fa cf       	rjmp	.-12     	; 0xa1c <oled_puts+0x2c>
		{
			oled_write_data(pgm_read_byte(&font8[c - ' '][i]));
		}
	}
	return 0;
}
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	08 95       	ret

00000a2c <slider_read>:
}

uint8_t slider_read(slider_t slider){
	uint8_t result = 0;
	
	if(slider == LEFT_SLIDER){
     a2c:	81 11       	cpse	r24, r1
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <slider_read+0xc>
		result = adc_read(SLIDER_L_ADC_CHANNEL);
     a30:	84 e0       	ldi	r24, 0x04	; 4
     a32:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <adc_read>
     a36:	08 95       	ret
	}
	
	else if(slider == RIGHT_SLIDER){
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	21 f4       	brne	.+8      	; 0xa44 <slider_read+0x18>
		result = adc_read(SLIDER_R_ADC_CHANNEL);
     a3c:	83 e0       	ldi	r24, 0x03	; 3
     a3e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <adc_read>
     a42:	08 95       	ret
void slider_init(void){
	
}

uint8_t slider_read(slider_t slider){
	uint8_t result = 0;
     a44:	80 e0       	ldi	r24, 0x00	; 0
	else if(slider == RIGHT_SLIDER){
		result = adc_read(SLIDER_R_ADC_CHANNEL);
	}
	
	return result;
     a46:	08 95       	ret

00000a48 <spi_init>:

#include "spi.h"

void spi_init(void){
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB7);
     a48:	87 b3       	in	r24, 0x17	; 23
     a4a:	80 6b       	ori	r24, 0xB0	; 176
     a4c:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input
	DDRB &= ~(1<<PB6);
     a4e:	be 98       	cbi	0x17, 6	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     a50:	81 e5       	ldi	r24, 0x51	; 81
     a52:	8d b9       	out	0x0d, r24	; 13
     a54:	08 95       	ret

00000a56 <spi_transmit>:
}

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
     a56:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     a58:	77 99       	sbic	0x0e, 7	; 14
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <spi_transmit+0xc>
	
	data = SPDR;
     a5c:	8f b1       	in	r24, 0x0f	; 15

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     a5e:	77 9b       	sbis	0x0e, 7	; 14
     a60:	fd cf       	rjmp	.-6      	; 0xa5c <spi_transmit+0x6>
	
	data = SPDR;

	return data;
     a62:	08 95       	ret

00000a64 <sram_init>:
#include <stdint.h>
#include <avr/io.h>
#include "sram.h"

void sram_init(void){
	MCUCR |= (1<<SRE);
     a64:	85 b7       	in	r24, 0x35	; 53
     a66:	80 68       	ori	r24, 0x80	; 128
     a68:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     a6a:	80 b7       	in	r24, 0x30	; 48
     a6c:	80 62       	ori	r24, 0x20	; 32
     a6e:	80 bf       	out	0x30, r24	; 48
     a70:	08 95       	ret

00000a72 <uart_transmit>:
	stdout = stdin = &uart_str;
	
}

void uart_transmit(unsigned char data, FILE* stream){
	while ( !( UCSR1A & (1<<UDRE1)) );
     a72:	15 9b       	sbis	0x02, 5	; 2
     a74:	fe cf       	rjmp	.-4      	; 0xa72 <uart_transmit>
	
	UDR1 = data;
     a76:	83 b9       	out	0x03, r24	; 3
     a78:	08 95       	ret

00000a7a <uart_receive>:
}

//Function to receive data
unsigned char uart_receive(FILE* stream){
	while (!(UCSR1A & (1<<RXC1)));
     a7a:	17 9b       	sbis	0x02, 7	; 2
     a7c:	fe cf       	rjmp	.-4      	; 0xa7a <uart_receive>
	return UDR1;
     a7e:	83 b1       	in	r24, 0x03	; 3
}
     a80:	08 95       	ret

00000a82 <uart_init>:

void uart_init(){

	// Set baudrate to 9600

	UBRR1H |= (BAUD_PRESCALE >> 8);
     a82:	8c b7       	in	r24, 0x3c	; 60
     a84:	8c bf       	out	0x3c, r24	; 60
	UBRR1L |= BAUD_PRESCALE;
     a86:	80 b1       	in	r24, 0x00	; 0
     a88:	8f 61       	ori	r24, 0x1F	; 31
     a8a:	80 b9       	out	0x00, r24	; 0
	// Enable TX rx
	UCSR1B = (1<<TXEN1)|(1<<RXEN1);
     a8c:	88 e1       	ldi	r24, 0x18	; 24
     a8e:	81 b9       	out	0x01, r24	; 1
	

	
	//uart_str = fdevopen(uart_transmit, uart_receive);
	stdout = stdin = &uart_str;
     a90:	8c e0       	ldi	r24, 0x0C	; 12
     a92:	92 e0       	ldi	r25, 0x02	; 2
     a94:	90 93 41 02 	sts	0x0241, r25
     a98:	80 93 40 02 	sts	0x0240, r24
     a9c:	90 93 43 02 	sts	0x0243, r25
     aa0:	80 93 42 02 	sts	0x0242, r24
     aa4:	08 95       	ret

00000aa6 <fprintf>:
     aa6:	a0 e0       	ldi	r26, 0x00	; 0
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	e9 e5       	ldi	r30, 0x59	; 89
     aac:	f5 e0       	ldi	r31, 0x05	; 5
     aae:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__prologue_saves__+0x20>
     ab2:	ae 01       	movw	r20, r28
     ab4:	47 5f       	subi	r20, 0xF7	; 247
     ab6:	5f 4f       	sbci	r21, 0xFF	; 255
     ab8:	6f 81       	ldd	r22, Y+7	; 0x07
     aba:	78 85       	ldd	r23, Y+8	; 0x08
     abc:	8d 81       	ldd	r24, Y+5	; 0x05
     abe:	9e 81       	ldd	r25, Y+6	; 0x06
     ac0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <vfprintf>
     ac4:	e2 e0       	ldi	r30, 0x02	; 2
     ac6:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__epilogue_restores__+0x20>

00000aca <fputc>:
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	18 2f       	mov	r17, r24
     ad4:	09 2f       	mov	r16, r25
     ad6:	eb 01       	movw	r28, r22
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	81 fd       	sbrc	r24, 1
     adc:	03 c0       	rjmp	.+6      	; 0xae4 <fputc+0x1a>
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	9f ef       	ldi	r25, 0xFF	; 255
     ae2:	20 c0       	rjmp	.+64     	; 0xb24 <fputc+0x5a>
     ae4:	82 ff       	sbrs	r24, 2
     ae6:	10 c0       	rjmp	.+32     	; 0xb08 <fputc+0x3e>
     ae8:	4e 81       	ldd	r20, Y+6	; 0x06
     aea:	5f 81       	ldd	r21, Y+7	; 0x07
     aec:	2c 81       	ldd	r18, Y+4	; 0x04
     aee:	3d 81       	ldd	r19, Y+5	; 0x05
     af0:	42 17       	cp	r20, r18
     af2:	53 07       	cpc	r21, r19
     af4:	7c f4       	brge	.+30     	; 0xb14 <fputc+0x4a>
     af6:	e8 81       	ld	r30, Y
     af8:	f9 81       	ldd	r31, Y+1	; 0x01
     afa:	9f 01       	movw	r18, r30
     afc:	2f 5f       	subi	r18, 0xFF	; 255
     afe:	3f 4f       	sbci	r19, 0xFF	; 255
     b00:	39 83       	std	Y+1, r19	; 0x01
     b02:	28 83       	st	Y, r18
     b04:	10 83       	st	Z, r17
     b06:	06 c0       	rjmp	.+12     	; 0xb14 <fputc+0x4a>
     b08:	e8 85       	ldd	r30, Y+8	; 0x08
     b0a:	f9 85       	ldd	r31, Y+9	; 0x09
     b0c:	81 2f       	mov	r24, r17
     b0e:	09 95       	icall
     b10:	89 2b       	or	r24, r25
     b12:	29 f7       	brne	.-54     	; 0xade <fputc+0x14>
     b14:	2e 81       	ldd	r18, Y+6	; 0x06
     b16:	3f 81       	ldd	r19, Y+7	; 0x07
     b18:	2f 5f       	subi	r18, 0xFF	; 255
     b1a:	3f 4f       	sbci	r19, 0xFF	; 255
     b1c:	3f 83       	std	Y+7, r19	; 0x07
     b1e:	2e 83       	std	Y+6, r18	; 0x06
     b20:	81 2f       	mov	r24, r17
     b22:	90 2f       	mov	r25, r16
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	08 95       	ret

00000b2e <fwrite>:
     b2e:	a0 e0       	ldi	r26, 0x00	; 0
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	ed e9       	ldi	r30, 0x9D	; 157
     b34:	f5 e0       	ldi	r31, 0x05	; 5
     b36:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__prologue_saves__+0xc>
     b3a:	6b 01       	movw	r12, r22
     b3c:	4a 01       	movw	r8, r20
     b3e:	79 01       	movw	r14, r18
     b40:	d9 01       	movw	r26, r18
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	2c 91       	ld	r18, X
     b46:	21 ff       	sbrs	r18, 1
     b48:	1d c0       	rjmp	.+58     	; 0xb84 <fwrite+0x56>
     b4a:	c0 e0       	ldi	r28, 0x00	; 0
     b4c:	d0 e0       	ldi	r29, 0x00	; 0
     b4e:	c8 15       	cp	r28, r8
     b50:	d9 05       	cpc	r29, r9
     b52:	d9 f0       	breq	.+54     	; 0xb8a <fwrite+0x5c>
     b54:	8c 01       	movw	r16, r24
     b56:	5c 01       	movw	r10, r24
     b58:	ac 0c       	add	r10, r12
     b5a:	bd 1c       	adc	r11, r13
     b5c:	c8 01       	movw	r24, r16
     b5e:	0a 15       	cp	r16, r10
     b60:	1b 05       	cpc	r17, r11
     b62:	71 f0       	breq	.+28     	; 0xb80 <fwrite+0x52>
     b64:	0f 5f       	subi	r16, 0xFF	; 255
     b66:	1f 4f       	sbci	r17, 0xFF	; 255
     b68:	d7 01       	movw	r26, r14
     b6a:	18 96       	adiw	r26, 0x08	; 8
     b6c:	ed 91       	ld	r30, X+
     b6e:	fc 91       	ld	r31, X
     b70:	19 97       	sbiw	r26, 0x09	; 9
     b72:	b7 01       	movw	r22, r14
     b74:	dc 01       	movw	r26, r24
     b76:	8c 91       	ld	r24, X
     b78:	09 95       	icall
     b7a:	89 2b       	or	r24, r25
     b7c:	79 f3       	breq	.-34     	; 0xb5c <fwrite+0x2e>
     b7e:	05 c0       	rjmp	.+10     	; 0xb8a <fwrite+0x5c>
     b80:	21 96       	adiw	r28, 0x01	; 1
     b82:	e5 cf       	rjmp	.-54     	; 0xb4e <fwrite+0x20>
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <fwrite+0x5e>
     b8a:	ce 01       	movw	r24, r28
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	ec e0       	ldi	r30, 0x0C	; 12
     b92:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__epilogue_restores__+0xc>

00000b96 <puts>:
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	e0 91 42 02 	lds	r30, 0x0242
     ba2:	f0 91 43 02 	lds	r31, 0x0243
     ba6:	23 81       	ldd	r18, Z+3	; 0x03
     ba8:	21 ff       	sbrs	r18, 1
     baa:	1b c0       	rjmp	.+54     	; 0xbe2 <puts+0x4c>
     bac:	ec 01       	movw	r28, r24
     bae:	00 e0       	ldi	r16, 0x00	; 0
     bb0:	10 e0       	ldi	r17, 0x00	; 0
     bb2:	89 91       	ld	r24, Y+
     bb4:	60 91 42 02 	lds	r22, 0x0242
     bb8:	70 91 43 02 	lds	r23, 0x0243
     bbc:	db 01       	movw	r26, r22
     bbe:	18 96       	adiw	r26, 0x08	; 8
     bc0:	ed 91       	ld	r30, X+
     bc2:	fc 91       	ld	r31, X
     bc4:	19 97       	sbiw	r26, 0x09	; 9
     bc6:	88 23       	and	r24, r24
     bc8:	31 f0       	breq	.+12     	; 0xbd6 <puts+0x40>
     bca:	09 95       	icall
     bcc:	89 2b       	or	r24, r25
     bce:	89 f3       	breq	.-30     	; 0xbb2 <puts+0x1c>
     bd0:	0f ef       	ldi	r16, 0xFF	; 255
     bd2:	1f ef       	ldi	r17, 0xFF	; 255
     bd4:	ee cf       	rjmp	.-36     	; 0xbb2 <puts+0x1c>
     bd6:	8a e0       	ldi	r24, 0x0A	; 10
     bd8:	09 95       	icall
     bda:	89 2b       	or	r24, r25
     bdc:	11 f4       	brne	.+4      	; 0xbe2 <puts+0x4c>
     bde:	c8 01       	movw	r24, r16
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <puts+0x50>
     be2:	8f ef       	ldi	r24, 0xFF	; 255
     be4:	9f ef       	ldi	r25, 0xFF	; 255
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	08 95       	ret

00000bf0 <vfprintf>:
     bf0:	ac e0       	ldi	r26, 0x0C	; 12
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	ee ef       	ldi	r30, 0xFE	; 254
     bf6:	f5 e0       	ldi	r31, 0x05	; 5
     bf8:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__prologue_saves__>
     bfc:	7c 01       	movw	r14, r24
     bfe:	6b 01       	movw	r12, r22
     c00:	8a 01       	movw	r16, r20
     c02:	fc 01       	movw	r30, r24
     c04:	17 82       	std	Z+7, r1	; 0x07
     c06:	16 82       	std	Z+6, r1	; 0x06
     c08:	83 81       	ldd	r24, Z+3	; 0x03
     c0a:	81 ff       	sbrs	r24, 1
     c0c:	bd c1       	rjmp	.+890    	; 0xf88 <vfprintf+0x398>
     c0e:	ce 01       	movw	r24, r28
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	4c 01       	movw	r8, r24
     c14:	f7 01       	movw	r30, r14
     c16:	93 81       	ldd	r25, Z+3	; 0x03
     c18:	f6 01       	movw	r30, r12
     c1a:	93 fd       	sbrc	r25, 3
     c1c:	85 91       	lpm	r24, Z+
     c1e:	93 ff       	sbrs	r25, 3
     c20:	81 91       	ld	r24, Z+
     c22:	6f 01       	movw	r12, r30
     c24:	88 23       	and	r24, r24
     c26:	09 f4       	brne	.+2      	; 0xc2a <vfprintf+0x3a>
     c28:	ab c1       	rjmp	.+854    	; 0xf80 <vfprintf+0x390>
     c2a:	85 32       	cpi	r24, 0x25	; 37
     c2c:	39 f4       	brne	.+14     	; 0xc3c <vfprintf+0x4c>
     c2e:	93 fd       	sbrc	r25, 3
     c30:	85 91       	lpm	r24, Z+
     c32:	93 ff       	sbrs	r25, 3
     c34:	81 91       	ld	r24, Z+
     c36:	6f 01       	movw	r12, r30
     c38:	85 32       	cpi	r24, 0x25	; 37
     c3a:	29 f4       	brne	.+10     	; 0xc46 <vfprintf+0x56>
     c3c:	b7 01       	movw	r22, r14
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
     c44:	e7 cf       	rjmp	.-50     	; 0xc14 <vfprintf+0x24>
     c46:	51 2c       	mov	r5, r1
     c48:	31 2c       	mov	r3, r1
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	20 32       	cpi	r18, 0x20	; 32
     c4e:	a0 f4       	brcc	.+40     	; 0xc78 <vfprintf+0x88>
     c50:	8b 32       	cpi	r24, 0x2B	; 43
     c52:	69 f0       	breq	.+26     	; 0xc6e <vfprintf+0x7e>
     c54:	30 f4       	brcc	.+12     	; 0xc62 <vfprintf+0x72>
     c56:	80 32       	cpi	r24, 0x20	; 32
     c58:	59 f0       	breq	.+22     	; 0xc70 <vfprintf+0x80>
     c5a:	83 32       	cpi	r24, 0x23	; 35
     c5c:	69 f4       	brne	.+26     	; 0xc78 <vfprintf+0x88>
     c5e:	20 61       	ori	r18, 0x10	; 16
     c60:	2c c0       	rjmp	.+88     	; 0xcba <vfprintf+0xca>
     c62:	8d 32       	cpi	r24, 0x2D	; 45
     c64:	39 f0       	breq	.+14     	; 0xc74 <vfprintf+0x84>
     c66:	80 33       	cpi	r24, 0x30	; 48
     c68:	39 f4       	brne	.+14     	; 0xc78 <vfprintf+0x88>
     c6a:	21 60       	ori	r18, 0x01	; 1
     c6c:	26 c0       	rjmp	.+76     	; 0xcba <vfprintf+0xca>
     c6e:	22 60       	ori	r18, 0x02	; 2
     c70:	24 60       	ori	r18, 0x04	; 4
     c72:	23 c0       	rjmp	.+70     	; 0xcba <vfprintf+0xca>
     c74:	28 60       	ori	r18, 0x08	; 8
     c76:	21 c0       	rjmp	.+66     	; 0xcba <vfprintf+0xca>
     c78:	27 fd       	sbrc	r18, 7
     c7a:	27 c0       	rjmp	.+78     	; 0xcca <vfprintf+0xda>
     c7c:	30 ed       	ldi	r19, 0xD0	; 208
     c7e:	38 0f       	add	r19, r24
     c80:	3a 30       	cpi	r19, 0x0A	; 10
     c82:	78 f4       	brcc	.+30     	; 0xca2 <vfprintf+0xb2>
     c84:	26 ff       	sbrs	r18, 6
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <vfprintf+0xa4>
     c88:	fa e0       	ldi	r31, 0x0A	; 10
     c8a:	5f 9e       	mul	r5, r31
     c8c:	30 0d       	add	r19, r0
     c8e:	11 24       	eor	r1, r1
     c90:	53 2e       	mov	r5, r19
     c92:	13 c0       	rjmp	.+38     	; 0xcba <vfprintf+0xca>
     c94:	8a e0       	ldi	r24, 0x0A	; 10
     c96:	38 9e       	mul	r3, r24
     c98:	30 0d       	add	r19, r0
     c9a:	11 24       	eor	r1, r1
     c9c:	33 2e       	mov	r3, r19
     c9e:	20 62       	ori	r18, 0x20	; 32
     ca0:	0c c0       	rjmp	.+24     	; 0xcba <vfprintf+0xca>
     ca2:	8e 32       	cpi	r24, 0x2E	; 46
     ca4:	21 f4       	brne	.+8      	; 0xcae <vfprintf+0xbe>
     ca6:	26 fd       	sbrc	r18, 6
     ca8:	6b c1       	rjmp	.+726    	; 0xf80 <vfprintf+0x390>
     caa:	20 64       	ori	r18, 0x40	; 64
     cac:	06 c0       	rjmp	.+12     	; 0xcba <vfprintf+0xca>
     cae:	8c 36       	cpi	r24, 0x6C	; 108
     cb0:	11 f4       	brne	.+4      	; 0xcb6 <vfprintf+0xc6>
     cb2:	20 68       	ori	r18, 0x80	; 128
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <vfprintf+0xca>
     cb6:	88 36       	cpi	r24, 0x68	; 104
     cb8:	41 f4       	brne	.+16     	; 0xcca <vfprintf+0xda>
     cba:	f6 01       	movw	r30, r12
     cbc:	93 fd       	sbrc	r25, 3
     cbe:	85 91       	lpm	r24, Z+
     cc0:	93 ff       	sbrs	r25, 3
     cc2:	81 91       	ld	r24, Z+
     cc4:	6f 01       	movw	r12, r30
     cc6:	81 11       	cpse	r24, r1
     cc8:	c1 cf       	rjmp	.-126    	; 0xc4c <vfprintf+0x5c>
     cca:	98 2f       	mov	r25, r24
     ccc:	9f 7d       	andi	r25, 0xDF	; 223
     cce:	95 54       	subi	r25, 0x45	; 69
     cd0:	93 30       	cpi	r25, 0x03	; 3
     cd2:	28 f4       	brcc	.+10     	; 0xcde <vfprintf+0xee>
     cd4:	0c 5f       	subi	r16, 0xFC	; 252
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	ff e3       	ldi	r31, 0x3F	; 63
     cda:	f9 83       	std	Y+1, r31	; 0x01
     cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <vfprintf+0x108>
     cde:	83 36       	cpi	r24, 0x63	; 99
     ce0:	31 f0       	breq	.+12     	; 0xcee <vfprintf+0xfe>
     ce2:	83 37       	cpi	r24, 0x73	; 115
     ce4:	71 f0       	breq	.+28     	; 0xd02 <vfprintf+0x112>
     ce6:	83 35       	cpi	r24, 0x53	; 83
     ce8:	09 f0       	breq	.+2      	; 0xcec <vfprintf+0xfc>
     cea:	5b c0       	rjmp	.+182    	; 0xda2 <vfprintf+0x1b2>
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <vfprintf+0x142>
     cee:	f8 01       	movw	r30, r16
     cf0:	80 81       	ld	r24, Z
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	0e 5f       	subi	r16, 0xFE	; 254
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	44 24       	eor	r4, r4
     cfa:	43 94       	inc	r4
     cfc:	51 2c       	mov	r5, r1
     cfe:	54 01       	movw	r10, r8
     d00:	15 c0       	rjmp	.+42     	; 0xd2c <vfprintf+0x13c>
     d02:	38 01       	movw	r6, r16
     d04:	f2 e0       	ldi	r31, 0x02	; 2
     d06:	6f 0e       	add	r6, r31
     d08:	71 1c       	adc	r7, r1
     d0a:	f8 01       	movw	r30, r16
     d0c:	a0 80       	ld	r10, Z
     d0e:	b1 80       	ldd	r11, Z+1	; 0x01
     d10:	26 ff       	sbrs	r18, 6
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <vfprintf+0x12a>
     d14:	65 2d       	mov	r22, r5
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <vfprintf+0x12e>
     d1a:	6f ef       	ldi	r22, 0xFF	; 255
     d1c:	7f ef       	ldi	r23, 0xFF	; 255
     d1e:	c5 01       	movw	r24, r10
     d20:	2c 87       	std	Y+12, r18	; 0x0c
     d22:	0e 94 d5 07 	call	0xfaa	; 0xfaa <strnlen>
     d26:	2c 01       	movw	r4, r24
     d28:	83 01       	movw	r16, r6
     d2a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d2c:	2f 77       	andi	r18, 0x7F	; 127
     d2e:	22 2e       	mov	r2, r18
     d30:	17 c0       	rjmp	.+46     	; 0xd60 <vfprintf+0x170>
     d32:	38 01       	movw	r6, r16
     d34:	f2 e0       	ldi	r31, 0x02	; 2
     d36:	6f 0e       	add	r6, r31
     d38:	71 1c       	adc	r7, r1
     d3a:	f8 01       	movw	r30, r16
     d3c:	a0 80       	ld	r10, Z
     d3e:	b1 80       	ldd	r11, Z+1	; 0x01
     d40:	26 ff       	sbrs	r18, 6
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <vfprintf+0x15a>
     d44:	65 2d       	mov	r22, r5
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0x15e>
     d4a:	6f ef       	ldi	r22, 0xFF	; 255
     d4c:	7f ef       	ldi	r23, 0xFF	; 255
     d4e:	c5 01       	movw	r24, r10
     d50:	2c 87       	std	Y+12, r18	; 0x0c
     d52:	0e 94 ca 07 	call	0xf94	; 0xf94 <strnlen_P>
     d56:	2c 01       	movw	r4, r24
     d58:	2c 85       	ldd	r18, Y+12	; 0x0c
     d5a:	20 68       	ori	r18, 0x80	; 128
     d5c:	22 2e       	mov	r2, r18
     d5e:	83 01       	movw	r16, r6
     d60:	23 fc       	sbrc	r2, 3
     d62:	1b c0       	rjmp	.+54     	; 0xd9a <vfprintf+0x1aa>
     d64:	83 2d       	mov	r24, r3
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	48 16       	cp	r4, r24
     d6a:	59 06       	cpc	r5, r25
     d6c:	b0 f4       	brcc	.+44     	; 0xd9a <vfprintf+0x1aa>
     d6e:	b7 01       	movw	r22, r14
     d70:	80 e2       	ldi	r24, 0x20	; 32
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
     d78:	3a 94       	dec	r3
     d7a:	f4 cf       	rjmp	.-24     	; 0xd64 <vfprintf+0x174>
     d7c:	f5 01       	movw	r30, r10
     d7e:	27 fc       	sbrc	r2, 7
     d80:	85 91       	lpm	r24, Z+
     d82:	27 fe       	sbrs	r2, 7
     d84:	81 91       	ld	r24, Z+
     d86:	5f 01       	movw	r10, r30
     d88:	b7 01       	movw	r22, r14
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
     d90:	31 10       	cpse	r3, r1
     d92:	3a 94       	dec	r3
     d94:	f1 e0       	ldi	r31, 0x01	; 1
     d96:	4f 1a       	sub	r4, r31
     d98:	51 08       	sbc	r5, r1
     d9a:	41 14       	cp	r4, r1
     d9c:	51 04       	cpc	r5, r1
     d9e:	71 f7       	brne	.-36     	; 0xd7c <vfprintf+0x18c>
     da0:	e5 c0       	rjmp	.+458    	; 0xf6c <vfprintf+0x37c>
     da2:	84 36       	cpi	r24, 0x64	; 100
     da4:	11 f0       	breq	.+4      	; 0xdaa <vfprintf+0x1ba>
     da6:	89 36       	cpi	r24, 0x69	; 105
     da8:	39 f5       	brne	.+78     	; 0xdf8 <vfprintf+0x208>
     daa:	f8 01       	movw	r30, r16
     dac:	27 ff       	sbrs	r18, 7
     dae:	07 c0       	rjmp	.+14     	; 0xdbe <vfprintf+0x1ce>
     db0:	60 81       	ld	r22, Z
     db2:	71 81       	ldd	r23, Z+1	; 0x01
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	0c 5f       	subi	r16, 0xFC	; 252
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	08 c0       	rjmp	.+16     	; 0xdce <vfprintf+0x1de>
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	88 27       	eor	r24, r24
     dc4:	77 fd       	sbrc	r23, 7
     dc6:	80 95       	com	r24
     dc8:	98 2f       	mov	r25, r24
     dca:	0e 5f       	subi	r16, 0xFE	; 254
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	2f 76       	andi	r18, 0x6F	; 111
     dd0:	b2 2e       	mov	r11, r18
     dd2:	97 ff       	sbrs	r25, 7
     dd4:	09 c0       	rjmp	.+18     	; 0xde8 <vfprintf+0x1f8>
     dd6:	90 95       	com	r25
     dd8:	80 95       	com	r24
     dda:	70 95       	com	r23
     ddc:	61 95       	neg	r22
     dde:	7f 4f       	sbci	r23, 0xFF	; 255
     de0:	8f 4f       	sbci	r24, 0xFF	; 255
     de2:	9f 4f       	sbci	r25, 0xFF	; 255
     de4:	20 68       	ori	r18, 0x80	; 128
     de6:	b2 2e       	mov	r11, r18
     de8:	2a e0       	ldi	r18, 0x0A	; 10
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	a4 01       	movw	r20, r8
     dee:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__ultoa_invert>
     df2:	a8 2e       	mov	r10, r24
     df4:	a8 18       	sub	r10, r8
     df6:	44 c0       	rjmp	.+136    	; 0xe80 <vfprintf+0x290>
     df8:	85 37       	cpi	r24, 0x75	; 117
     dfa:	29 f4       	brne	.+10     	; 0xe06 <vfprintf+0x216>
     dfc:	2f 7e       	andi	r18, 0xEF	; 239
     dfe:	b2 2e       	mov	r11, r18
     e00:	2a e0       	ldi	r18, 0x0A	; 10
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	25 c0       	rjmp	.+74     	; 0xe50 <vfprintf+0x260>
     e06:	f2 2f       	mov	r31, r18
     e08:	f9 7f       	andi	r31, 0xF9	; 249
     e0a:	bf 2e       	mov	r11, r31
     e0c:	8f 36       	cpi	r24, 0x6F	; 111
     e0e:	c1 f0       	breq	.+48     	; 0xe40 <vfprintf+0x250>
     e10:	18 f4       	brcc	.+6      	; 0xe18 <vfprintf+0x228>
     e12:	88 35       	cpi	r24, 0x58	; 88
     e14:	79 f0       	breq	.+30     	; 0xe34 <vfprintf+0x244>
     e16:	b4 c0       	rjmp	.+360    	; 0xf80 <vfprintf+0x390>
     e18:	80 37       	cpi	r24, 0x70	; 112
     e1a:	19 f0       	breq	.+6      	; 0xe22 <vfprintf+0x232>
     e1c:	88 37       	cpi	r24, 0x78	; 120
     e1e:	21 f0       	breq	.+8      	; 0xe28 <vfprintf+0x238>
     e20:	af c0       	rjmp	.+350    	; 0xf80 <vfprintf+0x390>
     e22:	2f 2f       	mov	r18, r31
     e24:	20 61       	ori	r18, 0x10	; 16
     e26:	b2 2e       	mov	r11, r18
     e28:	b4 fe       	sbrs	r11, 4
     e2a:	0d c0       	rjmp	.+26     	; 0xe46 <vfprintf+0x256>
     e2c:	8b 2d       	mov	r24, r11
     e2e:	84 60       	ori	r24, 0x04	; 4
     e30:	b8 2e       	mov	r11, r24
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <vfprintf+0x256>
     e34:	24 ff       	sbrs	r18, 4
     e36:	0a c0       	rjmp	.+20     	; 0xe4c <vfprintf+0x25c>
     e38:	9f 2f       	mov	r25, r31
     e3a:	96 60       	ori	r25, 0x06	; 6
     e3c:	b9 2e       	mov	r11, r25
     e3e:	06 c0       	rjmp	.+12     	; 0xe4c <vfprintf+0x25c>
     e40:	28 e0       	ldi	r18, 0x08	; 8
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <vfprintf+0x260>
     e46:	20 e1       	ldi	r18, 0x10	; 16
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0x260>
     e4c:	20 e1       	ldi	r18, 0x10	; 16
     e4e:	32 e0       	ldi	r19, 0x02	; 2
     e50:	f8 01       	movw	r30, r16
     e52:	b7 fe       	sbrs	r11, 7
     e54:	07 c0       	rjmp	.+14     	; 0xe64 <vfprintf+0x274>
     e56:	60 81       	ld	r22, Z
     e58:	71 81       	ldd	r23, Z+1	; 0x01
     e5a:	82 81       	ldd	r24, Z+2	; 0x02
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	0c 5f       	subi	r16, 0xFC	; 252
     e60:	1f 4f       	sbci	r17, 0xFF	; 255
     e62:	06 c0       	rjmp	.+12     	; 0xe70 <vfprintf+0x280>
     e64:	60 81       	ld	r22, Z
     e66:	71 81       	ldd	r23, Z+1	; 0x01
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 5f       	subi	r16, 0xFE	; 254
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	a4 01       	movw	r20, r8
     e72:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__ultoa_invert>
     e76:	a8 2e       	mov	r10, r24
     e78:	a8 18       	sub	r10, r8
     e7a:	fb 2d       	mov	r31, r11
     e7c:	ff 77       	andi	r31, 0x7F	; 127
     e7e:	bf 2e       	mov	r11, r31
     e80:	b6 fe       	sbrs	r11, 6
     e82:	0b c0       	rjmp	.+22     	; 0xe9a <vfprintf+0x2aa>
     e84:	2b 2d       	mov	r18, r11
     e86:	2e 7f       	andi	r18, 0xFE	; 254
     e88:	a5 14       	cp	r10, r5
     e8a:	50 f4       	brcc	.+20     	; 0xea0 <vfprintf+0x2b0>
     e8c:	b4 fe       	sbrs	r11, 4
     e8e:	0a c0       	rjmp	.+20     	; 0xea4 <vfprintf+0x2b4>
     e90:	b2 fc       	sbrc	r11, 2
     e92:	08 c0       	rjmp	.+16     	; 0xea4 <vfprintf+0x2b4>
     e94:	2b 2d       	mov	r18, r11
     e96:	2e 7e       	andi	r18, 0xEE	; 238
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <vfprintf+0x2b4>
     e9a:	7a 2c       	mov	r7, r10
     e9c:	2b 2d       	mov	r18, r11
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <vfprintf+0x2b6>
     ea0:	7a 2c       	mov	r7, r10
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <vfprintf+0x2b6>
     ea4:	75 2c       	mov	r7, r5
     ea6:	24 ff       	sbrs	r18, 4
     ea8:	0d c0       	rjmp	.+26     	; 0xec4 <vfprintf+0x2d4>
     eaa:	fe 01       	movw	r30, r28
     eac:	ea 0d       	add	r30, r10
     eae:	f1 1d       	adc	r31, r1
     eb0:	80 81       	ld	r24, Z
     eb2:	80 33       	cpi	r24, 0x30	; 48
     eb4:	11 f4       	brne	.+4      	; 0xeba <vfprintf+0x2ca>
     eb6:	29 7e       	andi	r18, 0xE9	; 233
     eb8:	09 c0       	rjmp	.+18     	; 0xecc <vfprintf+0x2dc>
     eba:	22 ff       	sbrs	r18, 2
     ebc:	06 c0       	rjmp	.+12     	; 0xeca <vfprintf+0x2da>
     ebe:	73 94       	inc	r7
     ec0:	73 94       	inc	r7
     ec2:	04 c0       	rjmp	.+8      	; 0xecc <vfprintf+0x2dc>
     ec4:	82 2f       	mov	r24, r18
     ec6:	86 78       	andi	r24, 0x86	; 134
     ec8:	09 f0       	breq	.+2      	; 0xecc <vfprintf+0x2dc>
     eca:	73 94       	inc	r7
     ecc:	23 fd       	sbrc	r18, 3
     ece:	13 c0       	rjmp	.+38     	; 0xef6 <vfprintf+0x306>
     ed0:	20 ff       	sbrs	r18, 0
     ed2:	06 c0       	rjmp	.+12     	; 0xee0 <vfprintf+0x2f0>
     ed4:	5a 2c       	mov	r5, r10
     ed6:	73 14       	cp	r7, r3
     ed8:	18 f4       	brcc	.+6      	; 0xee0 <vfprintf+0x2f0>
     eda:	53 0c       	add	r5, r3
     edc:	57 18       	sub	r5, r7
     ede:	73 2c       	mov	r7, r3
     ee0:	73 14       	cp	r7, r3
     ee2:	68 f4       	brcc	.+26     	; 0xefe <vfprintf+0x30e>
     ee4:	b7 01       	movw	r22, r14
     ee6:	80 e2       	ldi	r24, 0x20	; 32
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	2c 87       	std	Y+12, r18	; 0x0c
     eec:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
     ef0:	73 94       	inc	r7
     ef2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ef4:	f5 cf       	rjmp	.-22     	; 0xee0 <vfprintf+0x2f0>
     ef6:	73 14       	cp	r7, r3
     ef8:	10 f4       	brcc	.+4      	; 0xefe <vfprintf+0x30e>
     efa:	37 18       	sub	r3, r7
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <vfprintf+0x310>
     efe:	31 2c       	mov	r3, r1
     f00:	24 ff       	sbrs	r18, 4
     f02:	12 c0       	rjmp	.+36     	; 0xf28 <vfprintf+0x338>
     f04:	b7 01       	movw	r22, r14
     f06:	80 e3       	ldi	r24, 0x30	; 48
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	2c 87       	std	Y+12, r18	; 0x0c
     f0c:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
     f10:	2c 85       	ldd	r18, Y+12	; 0x0c
     f12:	22 ff       	sbrs	r18, 2
     f14:	17 c0       	rjmp	.+46     	; 0xf44 <vfprintf+0x354>
     f16:	21 ff       	sbrs	r18, 1
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <vfprintf+0x330>
     f1a:	88 e5       	ldi	r24, 0x58	; 88
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <vfprintf+0x334>
     f20:	88 e7       	ldi	r24, 0x78	; 120
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	b7 01       	movw	r22, r14
     f26:	0c c0       	rjmp	.+24     	; 0xf40 <vfprintf+0x350>
     f28:	82 2f       	mov	r24, r18
     f2a:	86 78       	andi	r24, 0x86	; 134
     f2c:	59 f0       	breq	.+22     	; 0xf44 <vfprintf+0x354>
     f2e:	21 fd       	sbrc	r18, 1
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <vfprintf+0x346>
     f32:	80 e2       	ldi	r24, 0x20	; 32
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <vfprintf+0x348>
     f36:	8b e2       	ldi	r24, 0x2B	; 43
     f38:	27 fd       	sbrc	r18, 7
     f3a:	8d e2       	ldi	r24, 0x2D	; 45
     f3c:	b7 01       	movw	r22, r14
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
     f44:	a5 14       	cp	r10, r5
     f46:	38 f4       	brcc	.+14     	; 0xf56 <vfprintf+0x366>
     f48:	b7 01       	movw	r22, r14
     f4a:	80 e3       	ldi	r24, 0x30	; 48
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
     f52:	5a 94       	dec	r5
     f54:	f7 cf       	rjmp	.-18     	; 0xf44 <vfprintf+0x354>
     f56:	aa 94       	dec	r10
     f58:	f4 01       	movw	r30, r8
     f5a:	ea 0d       	add	r30, r10
     f5c:	f1 1d       	adc	r31, r1
     f5e:	80 81       	ld	r24, Z
     f60:	b7 01       	movw	r22, r14
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
     f68:	a1 10       	cpse	r10, r1
     f6a:	f5 cf       	rjmp	.-22     	; 0xf56 <vfprintf+0x366>
     f6c:	33 20       	and	r3, r3
     f6e:	09 f4       	brne	.+2      	; 0xf72 <vfprintf+0x382>
     f70:	51 ce       	rjmp	.-862    	; 0xc14 <vfprintf+0x24>
     f72:	b7 01       	movw	r22, r14
     f74:	80 e2       	ldi	r24, 0x20	; 32
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
     f7c:	3a 94       	dec	r3
     f7e:	f6 cf       	rjmp	.-20     	; 0xf6c <vfprintf+0x37c>
     f80:	f7 01       	movw	r30, r14
     f82:	86 81       	ldd	r24, Z+6	; 0x06
     f84:	97 81       	ldd	r25, Z+7	; 0x07
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <vfprintf+0x39c>
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	9f ef       	ldi	r25, 0xFF	; 255
     f8c:	2c 96       	adiw	r28, 0x0c	; 12
     f8e:	e2 e1       	ldi	r30, 0x12	; 18
     f90:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__epilogue_restores__>

00000f94 <strnlen_P>:
     f94:	fc 01       	movw	r30, r24
     f96:	05 90       	lpm	r0, Z+
     f98:	61 50       	subi	r22, 0x01	; 1
     f9a:	70 40       	sbci	r23, 0x00	; 0
     f9c:	01 10       	cpse	r0, r1
     f9e:	d8 f7       	brcc	.-10     	; 0xf96 <strnlen_P+0x2>
     fa0:	80 95       	com	r24
     fa2:	90 95       	com	r25
     fa4:	8e 0f       	add	r24, r30
     fa6:	9f 1f       	adc	r25, r31
     fa8:	08 95       	ret

00000faa <strnlen>:
     faa:	fc 01       	movw	r30, r24
     fac:	61 50       	subi	r22, 0x01	; 1
     fae:	70 40       	sbci	r23, 0x00	; 0
     fb0:	01 90       	ld	r0, Z+
     fb2:	01 10       	cpse	r0, r1
     fb4:	d8 f7       	brcc	.-10     	; 0xfac <strnlen+0x2>
     fb6:	80 95       	com	r24
     fb8:	90 95       	com	r25
     fba:	8e 0f       	add	r24, r30
     fbc:	9f 1f       	adc	r25, r31
     fbe:	08 95       	ret

00000fc0 <__ultoa_invert>:
     fc0:	fa 01       	movw	r30, r20
     fc2:	aa 27       	eor	r26, r26
     fc4:	28 30       	cpi	r18, 0x08	; 8
     fc6:	51 f1       	breq	.+84     	; 0x101c <__ultoa_invert+0x5c>
     fc8:	20 31       	cpi	r18, 0x10	; 16
     fca:	81 f1       	breq	.+96     	; 0x102c <__ultoa_invert+0x6c>
     fcc:	e8 94       	clt
     fce:	6f 93       	push	r22
     fd0:	6e 7f       	andi	r22, 0xFE	; 254
     fd2:	6e 5f       	subi	r22, 0xFE	; 254
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	8f 4f       	sbci	r24, 0xFF	; 255
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	af 4f       	sbci	r26, 0xFF	; 255
     fdc:	b1 e0       	ldi	r27, 0x01	; 1
     fde:	3e d0       	rcall	.+124    	; 0x105c <__ultoa_invert+0x9c>
     fe0:	b4 e0       	ldi	r27, 0x04	; 4
     fe2:	3c d0       	rcall	.+120    	; 0x105c <__ultoa_invert+0x9c>
     fe4:	67 0f       	add	r22, r23
     fe6:	78 1f       	adc	r23, r24
     fe8:	89 1f       	adc	r24, r25
     fea:	9a 1f       	adc	r25, r26
     fec:	a1 1d       	adc	r26, r1
     fee:	68 0f       	add	r22, r24
     ff0:	79 1f       	adc	r23, r25
     ff2:	8a 1f       	adc	r24, r26
     ff4:	91 1d       	adc	r25, r1
     ff6:	a1 1d       	adc	r26, r1
     ff8:	6a 0f       	add	r22, r26
     ffa:	71 1d       	adc	r23, r1
     ffc:	81 1d       	adc	r24, r1
     ffe:	91 1d       	adc	r25, r1
    1000:	a1 1d       	adc	r26, r1
    1002:	20 d0       	rcall	.+64     	; 0x1044 <__ultoa_invert+0x84>
    1004:	09 f4       	brne	.+2      	; 0x1008 <__ultoa_invert+0x48>
    1006:	68 94       	set
    1008:	3f 91       	pop	r19
    100a:	2a e0       	ldi	r18, 0x0A	; 10
    100c:	26 9f       	mul	r18, r22
    100e:	11 24       	eor	r1, r1
    1010:	30 19       	sub	r19, r0
    1012:	30 5d       	subi	r19, 0xD0	; 208
    1014:	31 93       	st	Z+, r19
    1016:	de f6       	brtc	.-74     	; 0xfce <__ultoa_invert+0xe>
    1018:	cf 01       	movw	r24, r30
    101a:	08 95       	ret
    101c:	46 2f       	mov	r20, r22
    101e:	47 70       	andi	r20, 0x07	; 7
    1020:	40 5d       	subi	r20, 0xD0	; 208
    1022:	41 93       	st	Z+, r20
    1024:	b3 e0       	ldi	r27, 0x03	; 3
    1026:	0f d0       	rcall	.+30     	; 0x1046 <__ultoa_invert+0x86>
    1028:	c9 f7       	brne	.-14     	; 0x101c <__ultoa_invert+0x5c>
    102a:	f6 cf       	rjmp	.-20     	; 0x1018 <__ultoa_invert+0x58>
    102c:	46 2f       	mov	r20, r22
    102e:	4f 70       	andi	r20, 0x0F	; 15
    1030:	40 5d       	subi	r20, 0xD0	; 208
    1032:	4a 33       	cpi	r20, 0x3A	; 58
    1034:	18 f0       	brcs	.+6      	; 0x103c <__ultoa_invert+0x7c>
    1036:	49 5d       	subi	r20, 0xD9	; 217
    1038:	31 fd       	sbrc	r19, 1
    103a:	40 52       	subi	r20, 0x20	; 32
    103c:	41 93       	st	Z+, r20
    103e:	02 d0       	rcall	.+4      	; 0x1044 <__ultoa_invert+0x84>
    1040:	a9 f7       	brne	.-22     	; 0x102c <__ultoa_invert+0x6c>
    1042:	ea cf       	rjmp	.-44     	; 0x1018 <__ultoa_invert+0x58>
    1044:	b4 e0       	ldi	r27, 0x04	; 4
    1046:	a6 95       	lsr	r26
    1048:	97 95       	ror	r25
    104a:	87 95       	ror	r24
    104c:	77 95       	ror	r23
    104e:	67 95       	ror	r22
    1050:	ba 95       	dec	r27
    1052:	c9 f7       	brne	.-14     	; 0x1046 <__ultoa_invert+0x86>
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	61 05       	cpc	r22, r1
    1058:	71 05       	cpc	r23, r1
    105a:	08 95       	ret
    105c:	9b 01       	movw	r18, r22
    105e:	ac 01       	movw	r20, r24
    1060:	0a 2e       	mov	r0, r26
    1062:	06 94       	lsr	r0
    1064:	57 95       	ror	r21
    1066:	47 95       	ror	r20
    1068:	37 95       	ror	r19
    106a:	27 95       	ror	r18
    106c:	ba 95       	dec	r27
    106e:	c9 f7       	brne	.-14     	; 0x1062 <__ultoa_invert+0xa2>
    1070:	62 0f       	add	r22, r18
    1072:	73 1f       	adc	r23, r19
    1074:	84 1f       	adc	r24, r20
    1076:	95 1f       	adc	r25, r21
    1078:	a0 1d       	adc	r26, r0
    107a:	08 95       	ret

0000107c <__prologue_saves__>:
    107c:	2f 92       	push	r2
    107e:	3f 92       	push	r3
    1080:	4f 92       	push	r4
    1082:	5f 92       	push	r5
    1084:	6f 92       	push	r6
    1086:	7f 92       	push	r7
    1088:	8f 92       	push	r8
    108a:	9f 92       	push	r9
    108c:	af 92       	push	r10
    108e:	bf 92       	push	r11
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	ca 1b       	sub	r28, r26
    10a6:	db 0b       	sbc	r29, r27
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	09 94       	ijmp

000010b4 <__epilogue_restores__>:
    10b4:	2a 88       	ldd	r2, Y+18	; 0x12
    10b6:	39 88       	ldd	r3, Y+17	; 0x11
    10b8:	48 88       	ldd	r4, Y+16	; 0x10
    10ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    10bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    10be:	7d 84       	ldd	r7, Y+13	; 0x0d
    10c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    10c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    10c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    10c6:	b9 84       	ldd	r11, Y+9	; 0x09
    10c8:	c8 84       	ldd	r12, Y+8	; 0x08
    10ca:	df 80       	ldd	r13, Y+7	; 0x07
    10cc:	ee 80       	ldd	r14, Y+6	; 0x06
    10ce:	fd 80       	ldd	r15, Y+5	; 0x05
    10d0:	0c 81       	ldd	r16, Y+4	; 0x04
    10d2:	1b 81       	ldd	r17, Y+3	; 0x03
    10d4:	aa 81       	ldd	r26, Y+2	; 0x02
    10d6:	b9 81       	ldd	r27, Y+1	; 0x01
    10d8:	ce 0f       	add	r28, r30
    10da:	d1 1d       	adc	r29, r1
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	ed 01       	movw	r28, r26
    10e8:	08 95       	ret

000010ea <_exit>:
    10ea:	f8 94       	cli

000010ec <__stop_program>:
    10ec:	ff cf       	rjmp	.-2      	; 0x10ec <__stop_program>
