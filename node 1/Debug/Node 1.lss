
Node 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  000009c0  00000a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800194  00800194  00000ae8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c2d  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cf0  00000000  00000000  000029b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b8b  00000000  00000000  000036a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004fc  00000000  00000000  0000422c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c4  00000000  00000000  00004728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ef4  00000000  00000000  00004dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  00005ce0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 ec       	ldi	r30, 0xC0	; 192
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 39       	cpi	r26, 0x94	; 148
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a4 e9       	ldi	r26, 0x94	; 148
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ad 39       	cpi	r26, 0x9D	; 157
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  a6:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
const uint8_t ADC_mux_channel1 = 0x4;
const uint8_t ADC_mux_channel2 = 0x5;
const uint8_t ADC_mux_channel3 = 0x6;
const uint8_t ADC_mux_channel4 = 0x7;

void adc_init(void){
  ae:	08 95       	ret

000000b0 <button_init>:
#include "button.h"

#define BUTTON_NUMBER 3

void button_init(void){
	DDRD &= ~((1<<PD1) | (1<<PD0));	//Set touch buttons as input
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	8c 7f       	andi	r24, 0xFC	; 252
  b4:	81 bb       	out	0x11, r24	; 17
	
	DDRE &= ~((1<<PE0));			//Set joystick button as input
  b6:	30 98       	cbi	0x06, 0	; 6
	PORTE |= (1<<PE0);				//Enable pullup
  b8:	38 9a       	sbi	0x07, 0	; 7
  ba:	08 95       	ret

000000bc <__vector_2>:
#include "mcp2515_registers.h"
#include <stdio.h>

static uint8_t can_message_available_var = 0;

ISR(INT1_vect){
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
	can_message_available_var = 1;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 94 01 	sts	0x0194, r24
}
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <can_message_available>:

uint8_t can_message_available(){
	return can_message_available_var;
}
  da:	80 91 94 01 	lds	r24, 0x0194
  de:	08 95       	ret

000000e0 <can_init>:

void can_init(){
	mcp2515_init();
  e0:	0e 94 3e 01 	call	0x27c	; 0x27c <mcp2515_init>
	mcp2515_reset();
  e4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <mcp2515_reset>
	
	
	//Enable interrupt on received message in both buffers
	mcp2515_write(CANINTE, (1 <<RX1IE) | (1<<RX0IE));
  e8:	66 e0       	ldi	r22, 0x06	; 6
  ea:	8b e2       	ldi	r24, 0x2B	; 43
  ec:	0e 94 54 01 	call	0x2a8	; 0x2a8 <mcp2515_write>
	
// 	Receive every message, no filter
// 		mcp2515_write(RXB0CTRL, RXB_RXM1 | RXB_RXM0);
// 		
	//Set mode to normal operation
	mcp2515_write(CANCTRL,MODE_NORMAL);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <mcp2515_write>
	
	
	//Enable interrupt on falling edge of INT1, PD3
	MCUCR |= (1<<ISC11); 
  f8:	85 b7       	in	r24, 0x35	; 53
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT1);
  fe:	8b b7       	in	r24, 0x3b	; 59
 100:	80 68       	ori	r24, 0x80	; 128
 102:	8b bf       	out	0x3b, r24	; 59
 104:	08 95       	ret

00000106 <can_recive>:
	//Send request to send
	mcp2515_rts(1);
	
}

void can_recive(can_message_t *message){
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
	//Read id
	message->id = mcp2515_read(RXB0SIDH) << 3;
 110:	81 e6       	ldi	r24, 0x61	; 97
 112:	0e 94 41 01 	call	0x282	; 0x282 <mcp2515_read>
 116:	98 e0       	ldi	r25, 0x08	; 8
 118:	89 9f       	mul	r24, r25
 11a:	80 01       	movw	r16, r0
 11c:	11 24       	eor	r1, r1
 11e:	19 83       	std	Y+1, r17	; 0x01
 120:	08 83       	st	Y, r16
	message->id |= (7 & (mcp2515_read(RXB0SIDL) >> 5)) ;
 122:	82 e6       	ldi	r24, 0x62	; 98
 124:	0e 94 41 01 	call	0x282	; 0x282 <mcp2515_read>
 128:	82 95       	swap	r24
 12a:	86 95       	lsr	r24
 12c:	87 70       	andi	r24, 0x07	; 7
 12e:	08 2b       	or	r16, r24
 130:	19 83       	std	Y+1, r17	; 0x01
 132:	08 83       	st	Y, r16

	
	//Read length
	message->length = 0x0f & mcp2515_read(RXB0DLC);
 134:	85 e6       	ldi	r24, 0x65	; 101
 136:	0e 94 41 01 	call	0x282	; 0x282 <mcp2515_read>
 13a:	8f 70       	andi	r24, 0x0F	; 15
 13c:	8a 83       	std	Y+2, r24	; 0x02
	
	//Read data
	for (uint8_t i = 0; i < message->length; i++){
 13e:	88 23       	and	r24, r24
 140:	69 f0       	breq	.+26     	; 0x15c <can_recive+0x56>
 142:	10 e0       	ldi	r17, 0x00	; 0
		message->data[i] = mcp2515_read(RXB0D0+i);
 144:	86 e6       	ldi	r24, 0x66	; 102
 146:	81 0f       	add	r24, r17
 148:	0e 94 41 01 	call	0x282	; 0x282 <mcp2515_read>
 14c:	fe 01       	movw	r30, r28
 14e:	e1 0f       	add	r30, r17
 150:	f1 1d       	adc	r31, r1
 152:	83 83       	std	Z+3, r24	; 0x03
	
	//Read length
	message->length = 0x0f & mcp2515_read(RXB0DLC);
	
	//Read data
	for (uint8_t i = 0; i < message->length; i++){
 154:	1f 5f       	subi	r17, 0xFF	; 255
 156:	8a 81       	ldd	r24, Y+2	; 0x02
 158:	18 17       	cp	r17, r24
 15a:	a0 f3       	brcs	.-24     	; 0x144 <can_recive+0x3e>
		message->data[i] = mcp2515_read(RXB0D0+i);
	}
	
	//Clear interrupt flags
	mcp2515_write(CANINTF, 0x00);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	8c e2       	ldi	r24, 0x2C	; 44
 160:	0e 94 54 01 	call	0x2a8	; 0x2a8 <mcp2515_write>
	can_message_available_var = 0;	
 164:	10 92 94 01 	sts	0x0194, r1
/*	return message;*/
	
	
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <joystick_init>:
#define NEUTRAL_RANGE 4

static joystick_pos_t offset = {0, 0};


void joystick_init(void){
 172:	08 95       	ret

00000174 <main>:




int main(void)
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	2b 97       	sbiw	r28, 0x0b	; 11
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	cd bf       	out	0x3d, r28	; 61
	
	sram_init();
 188:	0e 94 cd 01 	call	0x39a	; 0x39a <sram_init>
	adc_init();
 18c:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	button_init();
 190:	0e 94 58 00 	call	0xb0	; 0xb0 <button_init>
	oled_init();
 194:	0e 94 8b 01 	call	0x316	; 0x316 <oled_init>
	uart_init();
 198:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <uart_init>
	can_init();
 19c:	0e 94 70 00 	call	0xe0	; 0xe0 <can_init>
	joystick_init();
 1a0:	0e 94 b9 00 	call	0x172	; 0x172 <joystick_init>
	
	//Enable interrupts
	sei();
 1a4:	78 94       	sei


	printf("Init done\n");
 1a6:	8e e0       	ldi	r24, 0x0E	; 14
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 34 02 	call	0x468	; 0x468 <puts>
// 		joystick_request.id++;
// 		if (joystick_request.id > 2000){
// 			joystick_request.id = 0;
// 		}
		
		printf("Error message = %02x | ", mcp2515_read(EFLG));
 1ae:	0f 2e       	mov	r0, r31
 1b0:	f8 e1       	ldi	r31, 0x18	; 24
 1b2:	af 2e       	mov	r10, r31
 1b4:	f1 e0       	ldi	r31, 0x01	; 1
 1b6:	bf 2e       	mov	r11, r31
 1b8:	f0 2d       	mov	r31, r0
		printf("Receive error counter = %02x | ", mcp2515_read(REC));
 1ba:	0f 2e       	mov	r0, r31
 1bc:	f0 e3       	ldi	r31, 0x30	; 48
 1be:	cf 2e       	mov	r12, r31
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	df 2e       	mov	r13, r31
 1c4:	f0 2d       	mov	r31, r0
		printf("Transmit error counter = %02x | ", mcp2515_read(TEC));
 1c6:	0f 2e       	mov	r0, r31
 1c8:	f0 e5       	ldi	r31, 0x50	; 80
 1ca:	ef 2e       	mov	r14, r31
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	ff 2e       	mov	r15, r31
 1d0:	f0 2d       	mov	r31, r0
		
		
		can_recive(&r);
		printf("Received id = %d \n ", r.id);
 1d2:	01 e7       	ldi	r16, 0x71	; 113
 1d4:	11 e0       	ldi	r17, 0x01	; 1
// 		joystick_request.id++;
// 		if (joystick_request.id > 2000){
// 			joystick_request.id = 0;
// 		}
		
		printf("Error message = %02x | ", mcp2515_read(EFLG));
 1d6:	8d e2       	ldi	r24, 0x2D	; 45
 1d8:	0e 94 41 01 	call	0x282	; 0x282 <mcp2515_read>
 1dc:	1f 92       	push	r1
 1de:	8f 93       	push	r24
 1e0:	bf 92       	push	r11
 1e2:	af 92       	push	r10
 1e4:	0e 94 20 02 	call	0x440	; 0x440 <printf>
		printf("Receive error counter = %02x | ", mcp2515_read(REC));
 1e8:	8d e1       	ldi	r24, 0x1D	; 29
 1ea:	0e 94 41 01 	call	0x282	; 0x282 <mcp2515_read>
 1ee:	1f 92       	push	r1
 1f0:	8f 93       	push	r24
 1f2:	df 92       	push	r13
 1f4:	cf 92       	push	r12
 1f6:	0e 94 20 02 	call	0x440	; 0x440 <printf>
		printf("Transmit error counter = %02x | ", mcp2515_read(TEC));
 1fa:	8c e1       	ldi	r24, 0x1C	; 28
 1fc:	0e 94 41 01 	call	0x282	; 0x282 <mcp2515_read>
 200:	1f 92       	push	r1
 202:	8f 93       	push	r24
 204:	ff 92       	push	r15
 206:	ef 92       	push	r14
 208:	0e 94 20 02 	call	0x440	; 0x440 <printf>
		
		
		can_recive(&r);
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	0e 94 83 00 	call	0x106	; 0x106 <can_recive>
		printf("Received id = %d \n ", r.id);
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	8f 93       	push	r24
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	8f 93       	push	r24
 21c:	1f 93       	push	r17
 21e:	0f 93       	push	r16
 220:	0e 94 20 02 	call	0x440	; 0x440 <printf>
		if(can_message_available()){
 224:	0e 94 6d 00 	call	0xda	; 0xda <can_message_available>
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	88 23       	and	r24, r24
 234:	89 f0       	breq	.+34     	; 0x258 <main+0xe4>
			can_recive(&r);
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	0e 94 83 00 	call	0x106	; 0x106 <can_recive>
			printf("Received id = %d \n ", r.id);
 23e:	8a 81       	ldd	r24, Y+2	; 0x02
 240:	8f 93       	push	r24
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	8f 93       	push	r24
 246:	1f 93       	push	r17
 248:	0f 93       	push	r16
 24a:	0e 94 20 02 	call	0x440	; 0x440 <printf>
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	04 c0       	rjmp	.+8      	; 0x260 <main+0xec>
			
		}
		
		else {
			printf("No new message\n");
 258:	85 e8       	ldi	r24, 0x85	; 133
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 34 02 	call	0x468	; 0x468 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	3f ef       	ldi	r19, 0xFF	; 255
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	31 50       	subi	r19, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0xf2>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0xfc>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0xfe>
 272:	b1 cf       	rjmp	.-158    	; 0x1d6 <main+0x62>

00000274 <mcp2515_disable>:
#include "mcp2515.h"
#include "spi.h"

void mcp2515_disable(){
	//Set CS high
	PORTB |= (1<<PB4);
 274:	c4 9a       	sbi	0x18, 4	; 24
 276:	08 95       	ret

00000278 <mcp2515_enable>:
}

void mcp2515_enable(){
	//Set CS low
	PORTB &= ~(1<<PB4);	
 278:	c4 98       	cbi	0x18, 4	; 24
 27a:	08 95       	ret

0000027c <mcp2515_init>:
}

void mcp2515_init(){
	spi_init();
 27c:	0e 94 bf 01 	call	0x37e	; 0x37e <spi_init>
 280:	08 95       	ret

00000282 <mcp2515_read>:
}

//Read data from register beginning at selected address.
uint8_t mcp2515_read(uint8_t address){
 282:	cf 93       	push	r28
 284:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	mcp2515_enable();
 286:	0e 94 3c 01 	call	0x278	; 0x278 <mcp2515_enable>
	spi_transmit(0x03);
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	0e 94 c6 01 	call	0x38c	; 0x38c <spi_transmit>
	spi_transmit(address);
 290:	8c 2f       	mov	r24, r28
 292:	0e 94 c6 01 	call	0x38c	; 0x38c <spi_transmit>
	
	//recive data
	data = spi_transmit(0);
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 c6 01 	call	0x38c	; 0x38c <spi_transmit>
 29c:	c8 2f       	mov	r28, r24
	mcp2515_disable();	
 29e:	0e 94 3a 01 	call	0x274	; 0x274 <mcp2515_disable>
	return data;
}
 2a2:	8c 2f       	mov	r24, r28
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <mcp2515_write>:

//Write data to register beginning at selected address.
void mcp2515_write(uint8_t address, uint8_t data){
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	d8 2f       	mov	r29, r24
 2ae:	c6 2f       	mov	r28, r22
	mcp2515_enable();
 2b0:	0e 94 3c 01 	call	0x278	; 0x278 <mcp2515_enable>
	spi_transmit(0x02);
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	0e 94 c6 01 	call	0x38c	; 0x38c <spi_transmit>
	spi_transmit(address);
 2ba:	8d 2f       	mov	r24, r29
 2bc:	0e 94 c6 01 	call	0x38c	; 0x38c <spi_transmit>
	
	//send data
	spi_transmit(data);
 2c0:	8c 2f       	mov	r24, r28
 2c2:	0e 94 c6 01 	call	0x38c	; 0x38c <spi_transmit>
	mcp2515_disable();
 2c6:	0e 94 3a 01 	call	0x274	; 0x274 <mcp2515_disable>
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <mcp2515_reset>:
	mcp2515_disable();
}

//Resets internal registers to default state,
void mcp2515_reset(){
	mcp2515_enable();
 2d0:	0e 94 3c 01 	call	0x278	; 0x278 <mcp2515_enable>
	spi_transmit(0xc0);
 2d4:	80 ec       	ldi	r24, 0xC0	; 192
 2d6:	0e 94 c6 01 	call	0x38c	; 0x38c <spi_transmit>
	mcp2515_disable();
 2da:	0e 94 3a 01 	call	0x274	; 0x274 <mcp2515_disable>
 2de:	08 95       	ret

000002e0 <oled_goto_line>:
void oled_home(void){
	
}

void oled_goto_line(uint8_t line){
	oled_state.cursor_y = line & 0x07;
 2e0:	87 70       	andi	r24, 0x07	; 7
 2e2:	80 93 96 01 	sts	0x0196, r24
	
	oled_write_command(0xb0 | (0x07 & oled_state.cursor_y));
 2e6:	80 6b       	ori	r24, 0xB0	; 176
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
 2e8:	80 93 00 10 	sts	0x1000, r24
 2ec:	08 95       	ret

000002ee <oled_clear_line>:
	oled_write_command((1<<4) | oled_state.cursor_x >> 4);
}

//Clear single line(page)
void oled_clear_line(uint8_t line){
	oled_goto_line(line);
 2ee:	0e 94 70 01 	call	0x2e0	; 0x2e0 <oled_goto_line>
	for(uint8_t i = 0; i < 128; i++){
 2f2:	80 e0       	ldi	r24, 0x00	; 0
	oled_write_command(0xaf); // display on
}

//Writes data to the display
void oled_write_data(uint8_t data){
	*oled_data_address = data;
 2f4:	e0 e0       	ldi	r30, 0x00	; 0
 2f6:	f2 e1       	ldi	r31, 0x12	; 18
 2f8:	10 82       	st	Z, r1
}

//Clear single line(page)
void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	for(uint8_t i = 0; i < 128; i++){
 2fa:	8f 5f       	subi	r24, 0xFF	; 255
 2fc:	80 38       	cpi	r24, 0x80	; 128
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <oled_clear_line+0xa>
		oled_write_data(0x00);
	}
}
 300:	08 95       	ret

00000302 <oled_clear>:

//Clear whole display
void oled_clear(void){
 302:	cf 93       	push	r28
	for(uint8_t j = 0; j < 8; j++){
 304:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clear_line(j);
 306:	8c 2f       	mov	r24, r28
 308:	0e 94 77 01 	call	0x2ee	; 0x2ee <oled_clear_line>
	}
}

//Clear whole display
void oled_clear(void){
	for(uint8_t j = 0; j < 8; j++){
 30c:	cf 5f       	subi	r28, 0xFF	; 255
 30e:	c8 30       	cpi	r28, 0x08	; 8
 310:	d1 f7       	brne	.-12     	; 0x306 <oled_clear+0x4>
		oled_clear_line(j);
	}
}
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <oled_init>:
 
static oled_state_t oled_state = {0};
 

//Initializes the display
void oled_init(void){
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
 31a:	c0 e0       	ldi	r28, 0x00	; 0
 31c:	d0 e1       	ldi	r29, 0x10	; 16
 31e:	8e ea       	ldi	r24, 0xAE	; 174
 320:	88 83       	st	Y, r24
 322:	81 ea       	ldi	r24, 0xA1	; 161
 324:	88 83       	st	Y, r24
 326:	8a ed       	ldi	r24, 0xDA	; 218
 328:	88 83       	st	Y, r24
 32a:	82 e1       	ldi	r24, 0x12	; 18
 32c:	88 83       	st	Y, r24
 32e:	88 ec       	ldi	r24, 0xC8	; 200
 330:	88 83       	st	Y, r24
 332:	88 ea       	ldi	r24, 0xA8	; 168
 334:	88 83       	st	Y, r24
 336:	8f e3       	ldi	r24, 0x3F	; 63
 338:	88 83       	st	Y, r24
 33a:	85 ed       	ldi	r24, 0xD5	; 213
 33c:	88 83       	st	Y, r24
 33e:	80 e8       	ldi	r24, 0x80	; 128
 340:	88 83       	st	Y, r24
 342:	81 e8       	ldi	r24, 0x81	; 129
 344:	88 83       	st	Y, r24
 346:	80 e5       	ldi	r24, 0x50	; 80
 348:	88 83       	st	Y, r24
 34a:	89 ed       	ldi	r24, 0xD9	; 217
 34c:	88 83       	st	Y, r24
 34e:	81 e2       	ldi	r24, 0x21	; 33
 350:	88 83       	st	Y, r24
 352:	80 e2       	ldi	r24, 0x20	; 32
 354:	88 83       	st	Y, r24
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	88 83       	st	Y, r24
 35a:	8b ed       	ldi	r24, 0xDB	; 219
 35c:	88 83       	st	Y, r24
 35e:	80 e3       	ldi	r24, 0x30	; 48
 360:	88 83       	st	Y, r24
 362:	8d ea       	ldi	r24, 0xAD	; 173
 364:	88 83       	st	Y, r24
 366:	18 82       	st	Y, r1
 368:	84 ea       	ldi	r24, 0xA4	; 164
 36a:	88 83       	st	Y, r24
 36c:	86 ea       	ldi	r24, 0xA6	; 166
 36e:	88 83       	st	Y, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	
	oled_clear(); //Clear the display
 370:	0e 94 81 01 	call	0x302	; 0x302 <oled_clear>
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
 374:	8f ea       	ldi	r24, 0xAF	; 175
 376:	88 83       	st	Y, r24
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	
	oled_clear(); //Clear the display
	oled_write_command(0xaf); // display on
}
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <spi_init>:

#include "spi.h"

void spi_init(void){
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB7);
 37e:	87 b3       	in	r24, 0x17	; 23
 380:	80 6b       	ori	r24, 0xB0	; 176
 382:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input
	DDRB &= ~(1<<PB6);
 384:	be 98       	cbi	0x17, 6	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 386:	81 e5       	ldi	r24, 0x51	; 81
 388:	8d b9       	out	0x0d, r24	; 13
 38a:	08 95       	ret

0000038c <spi_transmit>:
}

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
 38c:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 38e:	77 99       	sbic	0x0e, 7	; 14
 390:	03 c0       	rjmp	.+6      	; 0x398 <spi_transmit+0xc>
	
	data = SPDR;
 392:	8f b1       	in	r24, 0x0f	; 15

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 394:	77 9b       	sbis	0x0e, 7	; 14
 396:	fd cf       	rjmp	.-6      	; 0x392 <spi_transmit+0x6>
	
	data = SPDR;

	return data;
 398:	08 95       	ret

0000039a <sram_init>:
#include <stdint.h>
#include <avr/io.h>
#include "sram.h"

void sram_init(void){
	MCUCR |= (1<<SRE);
 39a:	85 b7       	in	r24, 0x35	; 53
 39c:	80 68       	ori	r24, 0x80	; 128
 39e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 3a0:	80 b7       	in	r24, 0x30	; 48
 3a2:	80 62       	ori	r24, 0x20	; 32
 3a4:	80 bf       	out	0x30, r24	; 48
 3a6:	08 95       	ret

000003a8 <uart_transmit>:
	stdout = stdin = &uart_str;
	
}

void uart_transmit(unsigned char data, FILE* stream){
	while ( !( UCSR1A & (1<<UDRE1)) );
 3a8:	15 9b       	sbis	0x02, 5	; 2
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <uart_transmit>
	
	UDR1 = data;
 3ac:	83 b9       	out	0x03, r24	; 3
 3ae:	08 95       	ret

000003b0 <uart_receive>:
}

//Function to receive data
unsigned char uart_receive(FILE* stream){
	while (!(UCSR1A & (1<<RXC1)));
 3b0:	17 9b       	sbis	0x02, 7	; 2
 3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <uart_receive>
	return UDR1;
 3b4:	83 b1       	in	r24, 0x03	; 3
}
 3b6:	08 95       	ret

000003b8 <uart_init>:

void uart_init(){

	// Set baudrate to 9600

	UBRR1H |= (BAUD_PRESCALE >> 8);
 3b8:	8c b7       	in	r24, 0x3c	; 60
 3ba:	8c bf       	out	0x3c, r24	; 60
	UBRR1L |= BAUD_PRESCALE;
 3bc:	80 b1       	in	r24, 0x00	; 0
 3be:	8f 61       	ori	r24, 0x1F	; 31
 3c0:	80 b9       	out	0x00, r24	; 0
	// Enable TX rx
	UCSR1B = (1<<TXEN1)|(1<<RXEN1);
 3c2:	88 e1       	ldi	r24, 0x18	; 24
 3c4:	81 b9       	out	0x01, r24	; 1
	

	
	//uart_str = fdevopen(uart_transmit, uart_receive);
	stdout = stdin = &uart_str;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	90 93 98 01 	sts	0x0198, r25
 3ce:	80 93 97 01 	sts	0x0197, r24
 3d2:	90 93 9a 01 	sts	0x019A, r25
 3d6:	80 93 99 01 	sts	0x0199, r24
 3da:	08 95       	ret

000003dc <fputc>:
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	18 2f       	mov	r17, r24
 3e6:	09 2f       	mov	r16, r25
 3e8:	eb 01       	movw	r28, r22
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	81 fd       	sbrc	r24, 1
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <fputc+0x1a>
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	9f ef       	ldi	r25, 0xFF	; 255
 3f4:	20 c0       	rjmp	.+64     	; 0x436 <fputc+0x5a>
 3f6:	82 ff       	sbrs	r24, 2
 3f8:	10 c0       	rjmp	.+32     	; 0x41a <fputc+0x3e>
 3fa:	4e 81       	ldd	r20, Y+6	; 0x06
 3fc:	5f 81       	ldd	r21, Y+7	; 0x07
 3fe:	2c 81       	ldd	r18, Y+4	; 0x04
 400:	3d 81       	ldd	r19, Y+5	; 0x05
 402:	42 17       	cp	r20, r18
 404:	53 07       	cpc	r21, r19
 406:	7c f4       	brge	.+30     	; 0x426 <fputc+0x4a>
 408:	e8 81       	ld	r30, Y
 40a:	f9 81       	ldd	r31, Y+1	; 0x01
 40c:	9f 01       	movw	r18, r30
 40e:	2f 5f       	subi	r18, 0xFF	; 255
 410:	3f 4f       	sbci	r19, 0xFF	; 255
 412:	39 83       	std	Y+1, r19	; 0x01
 414:	28 83       	st	Y, r18
 416:	10 83       	st	Z, r17
 418:	06 c0       	rjmp	.+12     	; 0x426 <fputc+0x4a>
 41a:	e8 85       	ldd	r30, Y+8	; 0x08
 41c:	f9 85       	ldd	r31, Y+9	; 0x09
 41e:	81 2f       	mov	r24, r17
 420:	09 95       	icall
 422:	89 2b       	or	r24, r25
 424:	29 f7       	brne	.-54     	; 0x3f0 <fputc+0x14>
 426:	2e 81       	ldd	r18, Y+6	; 0x06
 428:	3f 81       	ldd	r19, Y+7	; 0x07
 42a:	2f 5f       	subi	r18, 0xFF	; 255
 42c:	3f 4f       	sbci	r19, 0xFF	; 255
 42e:	3f 83       	std	Y+7, r19	; 0x07
 430:	2e 83       	std	Y+6, r18	; 0x06
 432:	81 2f       	mov	r24, r17
 434:	90 2f       	mov	r25, r16
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	08 95       	ret

00000440 <printf>:
 440:	a0 e0       	ldi	r26, 0x00	; 0
 442:	b0 e0       	ldi	r27, 0x00	; 0
 444:	e6 e2       	ldi	r30, 0x26	; 38
 446:	f2 e0       	ldi	r31, 0x02	; 2
 448:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__prologue_saves__+0x20>
 44c:	fe 01       	movw	r30, r28
 44e:	35 96       	adiw	r30, 0x05	; 5
 450:	61 91       	ld	r22, Z+
 452:	71 91       	ld	r23, Z+
 454:	af 01       	movw	r20, r30
 456:	80 91 99 01 	lds	r24, 0x0199
 45a:	90 91 9a 01 	lds	r25, 0x019A
 45e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vfprintf>
 462:	e2 e0       	ldi	r30, 0x02	; 2
 464:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__epilogue_restores__+0x20>

00000468 <puts>:
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	e0 91 99 01 	lds	r30, 0x0199
 474:	f0 91 9a 01 	lds	r31, 0x019A
 478:	23 81       	ldd	r18, Z+3	; 0x03
 47a:	21 ff       	sbrs	r18, 1
 47c:	1b c0       	rjmp	.+54     	; 0x4b4 <puts+0x4c>
 47e:	ec 01       	movw	r28, r24
 480:	00 e0       	ldi	r16, 0x00	; 0
 482:	10 e0       	ldi	r17, 0x00	; 0
 484:	89 91       	ld	r24, Y+
 486:	60 91 99 01 	lds	r22, 0x0199
 48a:	70 91 9a 01 	lds	r23, 0x019A
 48e:	db 01       	movw	r26, r22
 490:	18 96       	adiw	r26, 0x08	; 8
 492:	ed 91       	ld	r30, X+
 494:	fc 91       	ld	r31, X
 496:	19 97       	sbiw	r26, 0x09	; 9
 498:	88 23       	and	r24, r24
 49a:	31 f0       	breq	.+12     	; 0x4a8 <puts+0x40>
 49c:	09 95       	icall
 49e:	89 2b       	or	r24, r25
 4a0:	89 f3       	breq	.-30     	; 0x484 <puts+0x1c>
 4a2:	0f ef       	ldi	r16, 0xFF	; 255
 4a4:	1f ef       	ldi	r17, 0xFF	; 255
 4a6:	ee cf       	rjmp	.-36     	; 0x484 <puts+0x1c>
 4a8:	8a e0       	ldi	r24, 0x0A	; 10
 4aa:	09 95       	icall
 4ac:	89 2b       	or	r24, r25
 4ae:	11 f4       	brne	.+4      	; 0x4b4 <puts+0x4c>
 4b0:	c8 01       	movw	r24, r16
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <puts+0x50>
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	9f ef       	ldi	r25, 0xFF	; 255
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	08 95       	ret

000004c2 <vfprintf>:
 4c2:	ac e0       	ldi	r26, 0x0C	; 12
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	e7 e6       	ldi	r30, 0x67	; 103
 4c8:	f2 e0       	ldi	r31, 0x02	; 2
 4ca:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__prologue_saves__>
 4ce:	7c 01       	movw	r14, r24
 4d0:	6b 01       	movw	r12, r22
 4d2:	8a 01       	movw	r16, r20
 4d4:	fc 01       	movw	r30, r24
 4d6:	17 82       	std	Z+7, r1	; 0x07
 4d8:	16 82       	std	Z+6, r1	; 0x06
 4da:	83 81       	ldd	r24, Z+3	; 0x03
 4dc:	81 ff       	sbrs	r24, 1
 4de:	bd c1       	rjmp	.+890    	; 0x85a <__stack+0x35b>
 4e0:	ce 01       	movw	r24, r28
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	4c 01       	movw	r8, r24
 4e6:	f7 01       	movw	r30, r14
 4e8:	93 81       	ldd	r25, Z+3	; 0x03
 4ea:	f6 01       	movw	r30, r12
 4ec:	93 fd       	sbrc	r25, 3
 4ee:	85 91       	lpm	r24, Z+
 4f0:	93 ff       	sbrs	r25, 3
 4f2:	81 91       	ld	r24, Z+
 4f4:	6f 01       	movw	r12, r30
 4f6:	88 23       	and	r24, r24
 4f8:	09 f4       	brne	.+2      	; 0x4fc <vfprintf+0x3a>
 4fa:	ab c1       	rjmp	.+854    	; 0x852 <__stack+0x353>
 4fc:	85 32       	cpi	r24, 0x25	; 37
 4fe:	39 f4       	brne	.+14     	; 0x50e <__stack+0xf>
 500:	93 fd       	sbrc	r25, 3
 502:	85 91       	lpm	r24, Z+
 504:	93 ff       	sbrs	r25, 3
 506:	81 91       	ld	r24, Z+
 508:	6f 01       	movw	r12, r30
 50a:	85 32       	cpi	r24, 0x25	; 37
 50c:	29 f4       	brne	.+10     	; 0x518 <__stack+0x19>
 50e:	b7 01       	movw	r22, r14
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 ee 01 	call	0x3dc	; 0x3dc <fputc>
 516:	e7 cf       	rjmp	.-50     	; 0x4e6 <vfprintf+0x24>
 518:	51 2c       	mov	r5, r1
 51a:	31 2c       	mov	r3, r1
 51c:	20 e0       	ldi	r18, 0x00	; 0
 51e:	20 32       	cpi	r18, 0x20	; 32
 520:	a0 f4       	brcc	.+40     	; 0x54a <__stack+0x4b>
 522:	8b 32       	cpi	r24, 0x2B	; 43
 524:	69 f0       	breq	.+26     	; 0x540 <__stack+0x41>
 526:	30 f4       	brcc	.+12     	; 0x534 <__stack+0x35>
 528:	80 32       	cpi	r24, 0x20	; 32
 52a:	59 f0       	breq	.+22     	; 0x542 <__stack+0x43>
 52c:	83 32       	cpi	r24, 0x23	; 35
 52e:	69 f4       	brne	.+26     	; 0x54a <__stack+0x4b>
 530:	20 61       	ori	r18, 0x10	; 16
 532:	2c c0       	rjmp	.+88     	; 0x58c <__stack+0x8d>
 534:	8d 32       	cpi	r24, 0x2D	; 45
 536:	39 f0       	breq	.+14     	; 0x546 <__stack+0x47>
 538:	80 33       	cpi	r24, 0x30	; 48
 53a:	39 f4       	brne	.+14     	; 0x54a <__stack+0x4b>
 53c:	21 60       	ori	r18, 0x01	; 1
 53e:	26 c0       	rjmp	.+76     	; 0x58c <__stack+0x8d>
 540:	22 60       	ori	r18, 0x02	; 2
 542:	24 60       	ori	r18, 0x04	; 4
 544:	23 c0       	rjmp	.+70     	; 0x58c <__stack+0x8d>
 546:	28 60       	ori	r18, 0x08	; 8
 548:	21 c0       	rjmp	.+66     	; 0x58c <__stack+0x8d>
 54a:	27 fd       	sbrc	r18, 7
 54c:	27 c0       	rjmp	.+78     	; 0x59c <__stack+0x9d>
 54e:	30 ed       	ldi	r19, 0xD0	; 208
 550:	38 0f       	add	r19, r24
 552:	3a 30       	cpi	r19, 0x0A	; 10
 554:	78 f4       	brcc	.+30     	; 0x574 <__stack+0x75>
 556:	26 ff       	sbrs	r18, 6
 558:	06 c0       	rjmp	.+12     	; 0x566 <__stack+0x67>
 55a:	fa e0       	ldi	r31, 0x0A	; 10
 55c:	5f 9e       	mul	r5, r31
 55e:	30 0d       	add	r19, r0
 560:	11 24       	eor	r1, r1
 562:	53 2e       	mov	r5, r19
 564:	13 c0       	rjmp	.+38     	; 0x58c <__stack+0x8d>
 566:	8a e0       	ldi	r24, 0x0A	; 10
 568:	38 9e       	mul	r3, r24
 56a:	30 0d       	add	r19, r0
 56c:	11 24       	eor	r1, r1
 56e:	33 2e       	mov	r3, r19
 570:	20 62       	ori	r18, 0x20	; 32
 572:	0c c0       	rjmp	.+24     	; 0x58c <__stack+0x8d>
 574:	8e 32       	cpi	r24, 0x2E	; 46
 576:	21 f4       	brne	.+8      	; 0x580 <__stack+0x81>
 578:	26 fd       	sbrc	r18, 6
 57a:	6b c1       	rjmp	.+726    	; 0x852 <__stack+0x353>
 57c:	20 64       	ori	r18, 0x40	; 64
 57e:	06 c0       	rjmp	.+12     	; 0x58c <__stack+0x8d>
 580:	8c 36       	cpi	r24, 0x6C	; 108
 582:	11 f4       	brne	.+4      	; 0x588 <__stack+0x89>
 584:	20 68       	ori	r18, 0x80	; 128
 586:	02 c0       	rjmp	.+4      	; 0x58c <__stack+0x8d>
 588:	88 36       	cpi	r24, 0x68	; 104
 58a:	41 f4       	brne	.+16     	; 0x59c <__stack+0x9d>
 58c:	f6 01       	movw	r30, r12
 58e:	93 fd       	sbrc	r25, 3
 590:	85 91       	lpm	r24, Z+
 592:	93 ff       	sbrs	r25, 3
 594:	81 91       	ld	r24, Z+
 596:	6f 01       	movw	r12, r30
 598:	81 11       	cpse	r24, r1
 59a:	c1 cf       	rjmp	.-126    	; 0x51e <__stack+0x1f>
 59c:	98 2f       	mov	r25, r24
 59e:	9f 7d       	andi	r25, 0xDF	; 223
 5a0:	95 54       	subi	r25, 0x45	; 69
 5a2:	93 30       	cpi	r25, 0x03	; 3
 5a4:	28 f4       	brcc	.+10     	; 0x5b0 <__stack+0xb1>
 5a6:	0c 5f       	subi	r16, 0xFC	; 252
 5a8:	1f 4f       	sbci	r17, 0xFF	; 255
 5aa:	ff e3       	ldi	r31, 0x3F	; 63
 5ac:	f9 83       	std	Y+1, r31	; 0x01
 5ae:	0d c0       	rjmp	.+26     	; 0x5ca <__stack+0xcb>
 5b0:	83 36       	cpi	r24, 0x63	; 99
 5b2:	31 f0       	breq	.+12     	; 0x5c0 <__stack+0xc1>
 5b4:	83 37       	cpi	r24, 0x73	; 115
 5b6:	71 f0       	breq	.+28     	; 0x5d4 <__stack+0xd5>
 5b8:	83 35       	cpi	r24, 0x53	; 83
 5ba:	09 f0       	breq	.+2      	; 0x5be <__stack+0xbf>
 5bc:	5b c0       	rjmp	.+182    	; 0x674 <__stack+0x175>
 5be:	22 c0       	rjmp	.+68     	; 0x604 <__stack+0x105>
 5c0:	f8 01       	movw	r30, r16
 5c2:	80 81       	ld	r24, Z
 5c4:	89 83       	std	Y+1, r24	; 0x01
 5c6:	0e 5f       	subi	r16, 0xFE	; 254
 5c8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ca:	44 24       	eor	r4, r4
 5cc:	43 94       	inc	r4
 5ce:	51 2c       	mov	r5, r1
 5d0:	54 01       	movw	r10, r8
 5d2:	15 c0       	rjmp	.+42     	; 0x5fe <__stack+0xff>
 5d4:	38 01       	movw	r6, r16
 5d6:	f2 e0       	ldi	r31, 0x02	; 2
 5d8:	6f 0e       	add	r6, r31
 5da:	71 1c       	adc	r7, r1
 5dc:	f8 01       	movw	r30, r16
 5de:	a0 80       	ld	r10, Z
 5e0:	b1 80       	ldd	r11, Z+1	; 0x01
 5e2:	26 ff       	sbrs	r18, 6
 5e4:	03 c0       	rjmp	.+6      	; 0x5ec <__stack+0xed>
 5e6:	65 2d       	mov	r22, r5
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <__stack+0xf1>
 5ec:	6f ef       	ldi	r22, 0xFF	; 255
 5ee:	7f ef       	ldi	r23, 0xFF	; 255
 5f0:	c5 01       	movw	r24, r10
 5f2:	2c 87       	std	Y+12, r18	; 0x0c
 5f4:	0e 94 3e 04 	call	0x87c	; 0x87c <strnlen>
 5f8:	2c 01       	movw	r4, r24
 5fa:	83 01       	movw	r16, r6
 5fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 5fe:	2f 77       	andi	r18, 0x7F	; 127
 600:	22 2e       	mov	r2, r18
 602:	17 c0       	rjmp	.+46     	; 0x632 <__stack+0x133>
 604:	38 01       	movw	r6, r16
 606:	f2 e0       	ldi	r31, 0x02	; 2
 608:	6f 0e       	add	r6, r31
 60a:	71 1c       	adc	r7, r1
 60c:	f8 01       	movw	r30, r16
 60e:	a0 80       	ld	r10, Z
 610:	b1 80       	ldd	r11, Z+1	; 0x01
 612:	26 ff       	sbrs	r18, 6
 614:	03 c0       	rjmp	.+6      	; 0x61c <__stack+0x11d>
 616:	65 2d       	mov	r22, r5
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <__stack+0x121>
 61c:	6f ef       	ldi	r22, 0xFF	; 255
 61e:	7f ef       	ldi	r23, 0xFF	; 255
 620:	c5 01       	movw	r24, r10
 622:	2c 87       	std	Y+12, r18	; 0x0c
 624:	0e 94 33 04 	call	0x866	; 0x866 <strnlen_P>
 628:	2c 01       	movw	r4, r24
 62a:	2c 85       	ldd	r18, Y+12	; 0x0c
 62c:	20 68       	ori	r18, 0x80	; 128
 62e:	22 2e       	mov	r2, r18
 630:	83 01       	movw	r16, r6
 632:	23 fc       	sbrc	r2, 3
 634:	1b c0       	rjmp	.+54     	; 0x66c <__stack+0x16d>
 636:	83 2d       	mov	r24, r3
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	48 16       	cp	r4, r24
 63c:	59 06       	cpc	r5, r25
 63e:	b0 f4       	brcc	.+44     	; 0x66c <__stack+0x16d>
 640:	b7 01       	movw	r22, r14
 642:	80 e2       	ldi	r24, 0x20	; 32
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 ee 01 	call	0x3dc	; 0x3dc <fputc>
 64a:	3a 94       	dec	r3
 64c:	f4 cf       	rjmp	.-24     	; 0x636 <__stack+0x137>
 64e:	f5 01       	movw	r30, r10
 650:	27 fc       	sbrc	r2, 7
 652:	85 91       	lpm	r24, Z+
 654:	27 fe       	sbrs	r2, 7
 656:	81 91       	ld	r24, Z+
 658:	5f 01       	movw	r10, r30
 65a:	b7 01       	movw	r22, r14
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <fputc>
 662:	31 10       	cpse	r3, r1
 664:	3a 94       	dec	r3
 666:	f1 e0       	ldi	r31, 0x01	; 1
 668:	4f 1a       	sub	r4, r31
 66a:	51 08       	sbc	r5, r1
 66c:	41 14       	cp	r4, r1
 66e:	51 04       	cpc	r5, r1
 670:	71 f7       	brne	.-36     	; 0x64e <__stack+0x14f>
 672:	e5 c0       	rjmp	.+458    	; 0x83e <__stack+0x33f>
 674:	84 36       	cpi	r24, 0x64	; 100
 676:	11 f0       	breq	.+4      	; 0x67c <__stack+0x17d>
 678:	89 36       	cpi	r24, 0x69	; 105
 67a:	39 f5       	brne	.+78     	; 0x6ca <__stack+0x1cb>
 67c:	f8 01       	movw	r30, r16
 67e:	27 ff       	sbrs	r18, 7
 680:	07 c0       	rjmp	.+14     	; 0x690 <__stack+0x191>
 682:	60 81       	ld	r22, Z
 684:	71 81       	ldd	r23, Z+1	; 0x01
 686:	82 81       	ldd	r24, Z+2	; 0x02
 688:	93 81       	ldd	r25, Z+3	; 0x03
 68a:	0c 5f       	subi	r16, 0xFC	; 252
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	08 c0       	rjmp	.+16     	; 0x6a0 <__stack+0x1a1>
 690:	60 81       	ld	r22, Z
 692:	71 81       	ldd	r23, Z+1	; 0x01
 694:	88 27       	eor	r24, r24
 696:	77 fd       	sbrc	r23, 7
 698:	80 95       	com	r24
 69a:	98 2f       	mov	r25, r24
 69c:	0e 5f       	subi	r16, 0xFE	; 254
 69e:	1f 4f       	sbci	r17, 0xFF	; 255
 6a0:	2f 76       	andi	r18, 0x6F	; 111
 6a2:	b2 2e       	mov	r11, r18
 6a4:	97 ff       	sbrs	r25, 7
 6a6:	09 c0       	rjmp	.+18     	; 0x6ba <__stack+0x1bb>
 6a8:	90 95       	com	r25
 6aa:	80 95       	com	r24
 6ac:	70 95       	com	r23
 6ae:	61 95       	neg	r22
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	8f 4f       	sbci	r24, 0xFF	; 255
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	20 68       	ori	r18, 0x80	; 128
 6b8:	b2 2e       	mov	r11, r18
 6ba:	2a e0       	ldi	r18, 0x0A	; 10
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	a4 01       	movw	r20, r8
 6c0:	0e 94 49 04 	call	0x892	; 0x892 <__ultoa_invert>
 6c4:	a8 2e       	mov	r10, r24
 6c6:	a8 18       	sub	r10, r8
 6c8:	44 c0       	rjmp	.+136    	; 0x752 <__stack+0x253>
 6ca:	85 37       	cpi	r24, 0x75	; 117
 6cc:	29 f4       	brne	.+10     	; 0x6d8 <__stack+0x1d9>
 6ce:	2f 7e       	andi	r18, 0xEF	; 239
 6d0:	b2 2e       	mov	r11, r18
 6d2:	2a e0       	ldi	r18, 0x0A	; 10
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	25 c0       	rjmp	.+74     	; 0x722 <__stack+0x223>
 6d8:	f2 2f       	mov	r31, r18
 6da:	f9 7f       	andi	r31, 0xF9	; 249
 6dc:	bf 2e       	mov	r11, r31
 6de:	8f 36       	cpi	r24, 0x6F	; 111
 6e0:	c1 f0       	breq	.+48     	; 0x712 <__stack+0x213>
 6e2:	18 f4       	brcc	.+6      	; 0x6ea <__stack+0x1eb>
 6e4:	88 35       	cpi	r24, 0x58	; 88
 6e6:	79 f0       	breq	.+30     	; 0x706 <__stack+0x207>
 6e8:	b4 c0       	rjmp	.+360    	; 0x852 <__stack+0x353>
 6ea:	80 37       	cpi	r24, 0x70	; 112
 6ec:	19 f0       	breq	.+6      	; 0x6f4 <__stack+0x1f5>
 6ee:	88 37       	cpi	r24, 0x78	; 120
 6f0:	21 f0       	breq	.+8      	; 0x6fa <__stack+0x1fb>
 6f2:	af c0       	rjmp	.+350    	; 0x852 <__stack+0x353>
 6f4:	2f 2f       	mov	r18, r31
 6f6:	20 61       	ori	r18, 0x10	; 16
 6f8:	b2 2e       	mov	r11, r18
 6fa:	b4 fe       	sbrs	r11, 4
 6fc:	0d c0       	rjmp	.+26     	; 0x718 <__stack+0x219>
 6fe:	8b 2d       	mov	r24, r11
 700:	84 60       	ori	r24, 0x04	; 4
 702:	b8 2e       	mov	r11, r24
 704:	09 c0       	rjmp	.+18     	; 0x718 <__stack+0x219>
 706:	24 ff       	sbrs	r18, 4
 708:	0a c0       	rjmp	.+20     	; 0x71e <__stack+0x21f>
 70a:	9f 2f       	mov	r25, r31
 70c:	96 60       	ori	r25, 0x06	; 6
 70e:	b9 2e       	mov	r11, r25
 710:	06 c0       	rjmp	.+12     	; 0x71e <__stack+0x21f>
 712:	28 e0       	ldi	r18, 0x08	; 8
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	05 c0       	rjmp	.+10     	; 0x722 <__stack+0x223>
 718:	20 e1       	ldi	r18, 0x10	; 16
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	02 c0       	rjmp	.+4      	; 0x722 <__stack+0x223>
 71e:	20 e1       	ldi	r18, 0x10	; 16
 720:	32 e0       	ldi	r19, 0x02	; 2
 722:	f8 01       	movw	r30, r16
 724:	b7 fe       	sbrs	r11, 7
 726:	07 c0       	rjmp	.+14     	; 0x736 <__stack+0x237>
 728:	60 81       	ld	r22, Z
 72a:	71 81       	ldd	r23, Z+1	; 0x01
 72c:	82 81       	ldd	r24, Z+2	; 0x02
 72e:	93 81       	ldd	r25, Z+3	; 0x03
 730:	0c 5f       	subi	r16, 0xFC	; 252
 732:	1f 4f       	sbci	r17, 0xFF	; 255
 734:	06 c0       	rjmp	.+12     	; 0x742 <__stack+0x243>
 736:	60 81       	ld	r22, Z
 738:	71 81       	ldd	r23, Z+1	; 0x01
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 5f       	subi	r16, 0xFE	; 254
 740:	1f 4f       	sbci	r17, 0xFF	; 255
 742:	a4 01       	movw	r20, r8
 744:	0e 94 49 04 	call	0x892	; 0x892 <__ultoa_invert>
 748:	a8 2e       	mov	r10, r24
 74a:	a8 18       	sub	r10, r8
 74c:	fb 2d       	mov	r31, r11
 74e:	ff 77       	andi	r31, 0x7F	; 127
 750:	bf 2e       	mov	r11, r31
 752:	b6 fe       	sbrs	r11, 6
 754:	0b c0       	rjmp	.+22     	; 0x76c <__stack+0x26d>
 756:	2b 2d       	mov	r18, r11
 758:	2e 7f       	andi	r18, 0xFE	; 254
 75a:	a5 14       	cp	r10, r5
 75c:	50 f4       	brcc	.+20     	; 0x772 <__stack+0x273>
 75e:	b4 fe       	sbrs	r11, 4
 760:	0a c0       	rjmp	.+20     	; 0x776 <__stack+0x277>
 762:	b2 fc       	sbrc	r11, 2
 764:	08 c0       	rjmp	.+16     	; 0x776 <__stack+0x277>
 766:	2b 2d       	mov	r18, r11
 768:	2e 7e       	andi	r18, 0xEE	; 238
 76a:	05 c0       	rjmp	.+10     	; 0x776 <__stack+0x277>
 76c:	7a 2c       	mov	r7, r10
 76e:	2b 2d       	mov	r18, r11
 770:	03 c0       	rjmp	.+6      	; 0x778 <__stack+0x279>
 772:	7a 2c       	mov	r7, r10
 774:	01 c0       	rjmp	.+2      	; 0x778 <__stack+0x279>
 776:	75 2c       	mov	r7, r5
 778:	24 ff       	sbrs	r18, 4
 77a:	0d c0       	rjmp	.+26     	; 0x796 <__stack+0x297>
 77c:	fe 01       	movw	r30, r28
 77e:	ea 0d       	add	r30, r10
 780:	f1 1d       	adc	r31, r1
 782:	80 81       	ld	r24, Z
 784:	80 33       	cpi	r24, 0x30	; 48
 786:	11 f4       	brne	.+4      	; 0x78c <__stack+0x28d>
 788:	29 7e       	andi	r18, 0xE9	; 233
 78a:	09 c0       	rjmp	.+18     	; 0x79e <__stack+0x29f>
 78c:	22 ff       	sbrs	r18, 2
 78e:	06 c0       	rjmp	.+12     	; 0x79c <__stack+0x29d>
 790:	73 94       	inc	r7
 792:	73 94       	inc	r7
 794:	04 c0       	rjmp	.+8      	; 0x79e <__stack+0x29f>
 796:	82 2f       	mov	r24, r18
 798:	86 78       	andi	r24, 0x86	; 134
 79a:	09 f0       	breq	.+2      	; 0x79e <__stack+0x29f>
 79c:	73 94       	inc	r7
 79e:	23 fd       	sbrc	r18, 3
 7a0:	13 c0       	rjmp	.+38     	; 0x7c8 <__stack+0x2c9>
 7a2:	20 ff       	sbrs	r18, 0
 7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <__stack+0x2b3>
 7a6:	5a 2c       	mov	r5, r10
 7a8:	73 14       	cp	r7, r3
 7aa:	18 f4       	brcc	.+6      	; 0x7b2 <__stack+0x2b3>
 7ac:	53 0c       	add	r5, r3
 7ae:	57 18       	sub	r5, r7
 7b0:	73 2c       	mov	r7, r3
 7b2:	73 14       	cp	r7, r3
 7b4:	68 f4       	brcc	.+26     	; 0x7d0 <__stack+0x2d1>
 7b6:	b7 01       	movw	r22, r14
 7b8:	80 e2       	ldi	r24, 0x20	; 32
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	2c 87       	std	Y+12, r18	; 0x0c
 7be:	0e 94 ee 01 	call	0x3dc	; 0x3dc <fputc>
 7c2:	73 94       	inc	r7
 7c4:	2c 85       	ldd	r18, Y+12	; 0x0c
 7c6:	f5 cf       	rjmp	.-22     	; 0x7b2 <__stack+0x2b3>
 7c8:	73 14       	cp	r7, r3
 7ca:	10 f4       	brcc	.+4      	; 0x7d0 <__stack+0x2d1>
 7cc:	37 18       	sub	r3, r7
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__stack+0x2d3>
 7d0:	31 2c       	mov	r3, r1
 7d2:	24 ff       	sbrs	r18, 4
 7d4:	12 c0       	rjmp	.+36     	; 0x7fa <__stack+0x2fb>
 7d6:	b7 01       	movw	r22, r14
 7d8:	80 e3       	ldi	r24, 0x30	; 48
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	2c 87       	std	Y+12, r18	; 0x0c
 7de:	0e 94 ee 01 	call	0x3dc	; 0x3dc <fputc>
 7e2:	2c 85       	ldd	r18, Y+12	; 0x0c
 7e4:	22 ff       	sbrs	r18, 2
 7e6:	17 c0       	rjmp	.+46     	; 0x816 <__stack+0x317>
 7e8:	21 ff       	sbrs	r18, 1
 7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <__stack+0x2f3>
 7ec:	88 e5       	ldi	r24, 0x58	; 88
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <__stack+0x2f7>
 7f2:	88 e7       	ldi	r24, 0x78	; 120
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	b7 01       	movw	r22, r14
 7f8:	0c c0       	rjmp	.+24     	; 0x812 <__stack+0x313>
 7fa:	82 2f       	mov	r24, r18
 7fc:	86 78       	andi	r24, 0x86	; 134
 7fe:	59 f0       	breq	.+22     	; 0x816 <__stack+0x317>
 800:	21 fd       	sbrc	r18, 1
 802:	02 c0       	rjmp	.+4      	; 0x808 <__stack+0x309>
 804:	80 e2       	ldi	r24, 0x20	; 32
 806:	01 c0       	rjmp	.+2      	; 0x80a <__stack+0x30b>
 808:	8b e2       	ldi	r24, 0x2B	; 43
 80a:	27 fd       	sbrc	r18, 7
 80c:	8d e2       	ldi	r24, 0x2D	; 45
 80e:	b7 01       	movw	r22, r14
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 ee 01 	call	0x3dc	; 0x3dc <fputc>
 816:	a5 14       	cp	r10, r5
 818:	38 f4       	brcc	.+14     	; 0x828 <__stack+0x329>
 81a:	b7 01       	movw	r22, r14
 81c:	80 e3       	ldi	r24, 0x30	; 48
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 ee 01 	call	0x3dc	; 0x3dc <fputc>
 824:	5a 94       	dec	r5
 826:	f7 cf       	rjmp	.-18     	; 0x816 <__stack+0x317>
 828:	aa 94       	dec	r10
 82a:	f4 01       	movw	r30, r8
 82c:	ea 0d       	add	r30, r10
 82e:	f1 1d       	adc	r31, r1
 830:	80 81       	ld	r24, Z
 832:	b7 01       	movw	r22, r14
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 ee 01 	call	0x3dc	; 0x3dc <fputc>
 83a:	a1 10       	cpse	r10, r1
 83c:	f5 cf       	rjmp	.-22     	; 0x828 <__stack+0x329>
 83e:	33 20       	and	r3, r3
 840:	09 f4       	brne	.+2      	; 0x844 <__stack+0x345>
 842:	51 ce       	rjmp	.-862    	; 0x4e6 <vfprintf+0x24>
 844:	b7 01       	movw	r22, r14
 846:	80 e2       	ldi	r24, 0x20	; 32
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <fputc>
 84e:	3a 94       	dec	r3
 850:	f6 cf       	rjmp	.-20     	; 0x83e <__stack+0x33f>
 852:	f7 01       	movw	r30, r14
 854:	86 81       	ldd	r24, Z+6	; 0x06
 856:	97 81       	ldd	r25, Z+7	; 0x07
 858:	02 c0       	rjmp	.+4      	; 0x85e <__stack+0x35f>
 85a:	8f ef       	ldi	r24, 0xFF	; 255
 85c:	9f ef       	ldi	r25, 0xFF	; 255
 85e:	2c 96       	adiw	r28, 0x0c	; 12
 860:	e2 e1       	ldi	r30, 0x12	; 18
 862:	0c 94 c3 04 	jmp	0x986	; 0x986 <__epilogue_restores__>

00000866 <strnlen_P>:
 866:	fc 01       	movw	r30, r24
 868:	05 90       	lpm	r0, Z+
 86a:	61 50       	subi	r22, 0x01	; 1
 86c:	70 40       	sbci	r23, 0x00	; 0
 86e:	01 10       	cpse	r0, r1
 870:	d8 f7       	brcc	.-10     	; 0x868 <strnlen_P+0x2>
 872:	80 95       	com	r24
 874:	90 95       	com	r25
 876:	8e 0f       	add	r24, r30
 878:	9f 1f       	adc	r25, r31
 87a:	08 95       	ret

0000087c <strnlen>:
 87c:	fc 01       	movw	r30, r24
 87e:	61 50       	subi	r22, 0x01	; 1
 880:	70 40       	sbci	r23, 0x00	; 0
 882:	01 90       	ld	r0, Z+
 884:	01 10       	cpse	r0, r1
 886:	d8 f7       	brcc	.-10     	; 0x87e <strnlen+0x2>
 888:	80 95       	com	r24
 88a:	90 95       	com	r25
 88c:	8e 0f       	add	r24, r30
 88e:	9f 1f       	adc	r25, r31
 890:	08 95       	ret

00000892 <__ultoa_invert>:
 892:	fa 01       	movw	r30, r20
 894:	aa 27       	eor	r26, r26
 896:	28 30       	cpi	r18, 0x08	; 8
 898:	51 f1       	breq	.+84     	; 0x8ee <__ultoa_invert+0x5c>
 89a:	20 31       	cpi	r18, 0x10	; 16
 89c:	81 f1       	breq	.+96     	; 0x8fe <__ultoa_invert+0x6c>
 89e:	e8 94       	clt
 8a0:	6f 93       	push	r22
 8a2:	6e 7f       	andi	r22, 0xFE	; 254
 8a4:	6e 5f       	subi	r22, 0xFE	; 254
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	af 4f       	sbci	r26, 0xFF	; 255
 8ae:	b1 e0       	ldi	r27, 0x01	; 1
 8b0:	3e d0       	rcall	.+124    	; 0x92e <__ultoa_invert+0x9c>
 8b2:	b4 e0       	ldi	r27, 0x04	; 4
 8b4:	3c d0       	rcall	.+120    	; 0x92e <__ultoa_invert+0x9c>
 8b6:	67 0f       	add	r22, r23
 8b8:	78 1f       	adc	r23, r24
 8ba:	89 1f       	adc	r24, r25
 8bc:	9a 1f       	adc	r25, r26
 8be:	a1 1d       	adc	r26, r1
 8c0:	68 0f       	add	r22, r24
 8c2:	79 1f       	adc	r23, r25
 8c4:	8a 1f       	adc	r24, r26
 8c6:	91 1d       	adc	r25, r1
 8c8:	a1 1d       	adc	r26, r1
 8ca:	6a 0f       	add	r22, r26
 8cc:	71 1d       	adc	r23, r1
 8ce:	81 1d       	adc	r24, r1
 8d0:	91 1d       	adc	r25, r1
 8d2:	a1 1d       	adc	r26, r1
 8d4:	20 d0       	rcall	.+64     	; 0x916 <__ultoa_invert+0x84>
 8d6:	09 f4       	brne	.+2      	; 0x8da <__ultoa_invert+0x48>
 8d8:	68 94       	set
 8da:	3f 91       	pop	r19
 8dc:	2a e0       	ldi	r18, 0x0A	; 10
 8de:	26 9f       	mul	r18, r22
 8e0:	11 24       	eor	r1, r1
 8e2:	30 19       	sub	r19, r0
 8e4:	30 5d       	subi	r19, 0xD0	; 208
 8e6:	31 93       	st	Z+, r19
 8e8:	de f6       	brtc	.-74     	; 0x8a0 <__ultoa_invert+0xe>
 8ea:	cf 01       	movw	r24, r30
 8ec:	08 95       	ret
 8ee:	46 2f       	mov	r20, r22
 8f0:	47 70       	andi	r20, 0x07	; 7
 8f2:	40 5d       	subi	r20, 0xD0	; 208
 8f4:	41 93       	st	Z+, r20
 8f6:	b3 e0       	ldi	r27, 0x03	; 3
 8f8:	0f d0       	rcall	.+30     	; 0x918 <__ultoa_invert+0x86>
 8fa:	c9 f7       	brne	.-14     	; 0x8ee <__ultoa_invert+0x5c>
 8fc:	f6 cf       	rjmp	.-20     	; 0x8ea <__ultoa_invert+0x58>
 8fe:	46 2f       	mov	r20, r22
 900:	4f 70       	andi	r20, 0x0F	; 15
 902:	40 5d       	subi	r20, 0xD0	; 208
 904:	4a 33       	cpi	r20, 0x3A	; 58
 906:	18 f0       	brcs	.+6      	; 0x90e <__ultoa_invert+0x7c>
 908:	49 5d       	subi	r20, 0xD9	; 217
 90a:	31 fd       	sbrc	r19, 1
 90c:	40 52       	subi	r20, 0x20	; 32
 90e:	41 93       	st	Z+, r20
 910:	02 d0       	rcall	.+4      	; 0x916 <__ultoa_invert+0x84>
 912:	a9 f7       	brne	.-22     	; 0x8fe <__ultoa_invert+0x6c>
 914:	ea cf       	rjmp	.-44     	; 0x8ea <__ultoa_invert+0x58>
 916:	b4 e0       	ldi	r27, 0x04	; 4
 918:	a6 95       	lsr	r26
 91a:	97 95       	ror	r25
 91c:	87 95       	ror	r24
 91e:	77 95       	ror	r23
 920:	67 95       	ror	r22
 922:	ba 95       	dec	r27
 924:	c9 f7       	brne	.-14     	; 0x918 <__ultoa_invert+0x86>
 926:	00 97       	sbiw	r24, 0x00	; 0
 928:	61 05       	cpc	r22, r1
 92a:	71 05       	cpc	r23, r1
 92c:	08 95       	ret
 92e:	9b 01       	movw	r18, r22
 930:	ac 01       	movw	r20, r24
 932:	0a 2e       	mov	r0, r26
 934:	06 94       	lsr	r0
 936:	57 95       	ror	r21
 938:	47 95       	ror	r20
 93a:	37 95       	ror	r19
 93c:	27 95       	ror	r18
 93e:	ba 95       	dec	r27
 940:	c9 f7       	brne	.-14     	; 0x934 <__ultoa_invert+0xa2>
 942:	62 0f       	add	r22, r18
 944:	73 1f       	adc	r23, r19
 946:	84 1f       	adc	r24, r20
 948:	95 1f       	adc	r25, r21
 94a:	a0 1d       	adc	r26, r0
 94c:	08 95       	ret

0000094e <__prologue_saves__>:
 94e:	2f 92       	push	r2
 950:	3f 92       	push	r3
 952:	4f 92       	push	r4
 954:	5f 92       	push	r5
 956:	6f 92       	push	r6
 958:	7f 92       	push	r7
 95a:	8f 92       	push	r8
 95c:	9f 92       	push	r9
 95e:	af 92       	push	r10
 960:	bf 92       	push	r11
 962:	cf 92       	push	r12
 964:	df 92       	push	r13
 966:	ef 92       	push	r14
 968:	ff 92       	push	r15
 96a:	0f 93       	push	r16
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	cd b7       	in	r28, 0x3d	; 61
 974:	de b7       	in	r29, 0x3e	; 62
 976:	ca 1b       	sub	r28, r26
 978:	db 0b       	sbc	r29, r27
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	f8 94       	cli
 97e:	de bf       	out	0x3e, r29	; 62
 980:	0f be       	out	0x3f, r0	; 63
 982:	cd bf       	out	0x3d, r28	; 61
 984:	09 94       	ijmp

00000986 <__epilogue_restores__>:
 986:	2a 88       	ldd	r2, Y+18	; 0x12
 988:	39 88       	ldd	r3, Y+17	; 0x11
 98a:	48 88       	ldd	r4, Y+16	; 0x10
 98c:	5f 84       	ldd	r5, Y+15	; 0x0f
 98e:	6e 84       	ldd	r6, Y+14	; 0x0e
 990:	7d 84       	ldd	r7, Y+13	; 0x0d
 992:	8c 84       	ldd	r8, Y+12	; 0x0c
 994:	9b 84       	ldd	r9, Y+11	; 0x0b
 996:	aa 84       	ldd	r10, Y+10	; 0x0a
 998:	b9 84       	ldd	r11, Y+9	; 0x09
 99a:	c8 84       	ldd	r12, Y+8	; 0x08
 99c:	df 80       	ldd	r13, Y+7	; 0x07
 99e:	ee 80       	ldd	r14, Y+6	; 0x06
 9a0:	fd 80       	ldd	r15, Y+5	; 0x05
 9a2:	0c 81       	ldd	r16, Y+4	; 0x04
 9a4:	1b 81       	ldd	r17, Y+3	; 0x03
 9a6:	aa 81       	ldd	r26, Y+2	; 0x02
 9a8:	b9 81       	ldd	r27, Y+1	; 0x01
 9aa:	ce 0f       	add	r28, r30
 9ac:	d1 1d       	adc	r29, r1
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	f8 94       	cli
 9b2:	de bf       	out	0x3e, r29	; 62
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	cd bf       	out	0x3d, r28	; 61
 9b8:	ed 01       	movw	r28, r26
 9ba:	08 95       	ret

000009bc <_exit>:
 9bc:	f8 94       	cli

000009be <__stop_program>:
 9be:	ff cf       	rjmp	.-2      	; 0x9be <__stop_program>
