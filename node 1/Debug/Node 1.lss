
Node 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d4  00800100  00001f30  00001fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f30  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  008003d4  008003d4  000022b8  2**0
                  ALLOC
  3 .eeprom       00000007  00810000  00810000  000022b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000022bf  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  0000231b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003224  00000000  00000000  0000267b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014f7  00000000  00000000  0000589f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001306  00000000  00000000  00006d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000878  00000000  00000000  0000809c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae6  00000000  00000000  00008914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018f2  00000000  00000000  000093fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000acec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__ctors_end>
       4:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
       8:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__vector_2>
       c:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      10:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      14:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      18:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      1c:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      20:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      24:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      28:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      2c:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      30:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      34:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      38:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      3c:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      40:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      44:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      48:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      4c:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      50:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      54:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      58:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      5c:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      60:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      64:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      68:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>
      6c:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
     184:	03 0f       	add	r16, r19
     186:	1c 18       	sub	r1, r12
     188:	30 30       	cpi	r19, 0x00	; 0
     18a:	30 18       	sub	r3, r0
     18c:	18 00       	.word	0x0018	; ????
     18e:	00 00       	nop
     190:	00 00       	nop
     192:	00 01       	movw	r0, r0
     194:	03 03       	mulsu	r16, r19
     196:	03 03       	mulsu	r16, r19
     198:	01 00       	.word	0x0001	; ????
     19a:	00 03       	mulsu	r16, r16
     19c:	03 00       	.word	0x0003	; ????
     19e:	01 03       	mulsu	r16, r17
     1a0:	03 03       	mulsu	r16, r19
     1a2:	01 01       	movw	r0, r2
     1a4:	03 03       	mulsu	r16, r19
     1a6:	03 01       	movw	r0, r6
     1a8:	00 00       	nop
     1aa:	00 01       	movw	r0, r0
     1ac:	03 03       	mulsu	r16, r19
     1ae:	03 03       	mulsu	r16, r19
     1b0:	03 01       	movw	r0, r6
	...
     1ba:	01 07       	cpc	r16, r17
     1bc:	0f 1c       	adc	r0, r15
     1be:	18 30       	cpi	r17, 0x08	; 8
     1c0:	30 30       	cpi	r19, 0x00	; 0
     1c2:	30 30       	cpi	r19, 0x00	; 0
     1c4:	18 1f       	adc	r17, r24
     1c6:	07 00       	.word	0x0007	; ????
     1c8:	00 03       	mulsu	r16, r16
     1ca:	03 00       	.word	0x0003	; ????
     1cc:	00 00       	nop
     1ce:	00 03       	mulsu	r16, r16
     1d0:	03 00       	.word	0x0003	; ????
     1d2:	00 01       	movw	r0, r0
     1d4:	03 03       	mulsu	r16, r19
     1d6:	03 03       	mulsu	r16, r19
     1d8:	03 01       	movw	r0, r6
     1da:	00 00       	nop
     1dc:	03 03       	mulsu	r16, r19
     1de:	01 01       	movw	r0, r2
     1e0:	03 03       	mulsu	r16, r19
     1e2:	03 00       	.word	0x0003	; ????
	...
     200:	00 00       	nop
     202:	00 fc       	sbrc	r0, 0
     204:	fe 07       	cpc	r31, r30
     206:	03 63       	ori	r16, 0x33	; 51
     208:	63 c3       	rjmp	.+1734   	; 0x8d0 <font8+0x60>
     20a:	c6 dc       	rcall	.-1652   	; 0xfffffb98 <__eeprom_end+0xff7efb91>
     20c:	f8 f0       	brcs	.+62     	; 0x24c <__trampolines_end+0x1dc>
     20e:	c0 00       	.word	0x00c0	; ????
     210:	00 7c       	andi	r16, 0xC0	; 192
     212:	fe c7       	rjmp	.+4092   	; 0x1210 <joystick_read_direction+0x68>
     214:	83 03       	fmuls	r16, r19
     216:	03 fe       	sbrs	r0, 3
     218:	ff 03       	fmulsu	r23, r23
     21a:	00 ff       	sbrs	r16, 0
     21c:	ff c0       	rjmp	.+510    	; 0x41c <__trampolines_end+0x3ac>
     21e:	80 80       	ld	r8, Z
     220:	00 ff       	sbrs	r16, 0
     222:	ff 80       	ldd	r15, Y+7	; 0x07
     224:	00 00       	nop
     226:	ff ff       	.word	0xffff	; ????
     228:	00 00       	nop
     22a:	fc fe       	.word	0xfefc	; ????
     22c:	9f 1b       	sub	r25, r31
     22e:	33 73       	andi	r19, 0x33	; 51
     230:	e2 c6       	rjmp	.+3524   	; 0xff6 <game_run+0x40>
	...
     23a:	f8 fc       	.word	0xfcf8	; ????
     23c:	0e 06       	cpc	r0, r30
     23e:	03 03       	mulsu	r16, r19
     240:	03 03       	mulsu	r16, r19
     242:	07 0e       	add	r0, r23
     244:	3c f8       	.word	0xf83c	; ????
     246:	e0 00       	.word	0x00e0	; ????
     248:	00 80       	ld	r0, Z
     24a:	f0 7e       	andi	r31, 0xE0	; 224
     24c:	0f 0f       	add	r16, r31
     24e:	7c e0       	ldi	r23, 0x0C	; 12
     250:	80 00       	.word	0x0080	; ????
     252:	fc fe       	.word	0xfefc	; ????
     254:	9f 1b       	sub	r25, r31
     256:	33 73       	andi	r19, 0x33	; 51
     258:	e2 c6       	rjmp	.+3524   	; 0x101e <game_run+0x68>
     25a:	00 00       	nop
     25c:	ff ff       	.word	0xffff	; ????
     25e:	80 00       	.word	0x0080	; ????
     260:	00 c0       	rjmp	.+0      	; 0x262 <__trampolines_end+0x1f2>
     262:	c0 00       	.word	0x00c0	; ????
	...

00000470 <bitmap_test>:
     470:	00 e0 70 58 68 34 1c 06 06 03 01 01 00 00 00 00     ..pXh4..........
	...
     4f8:	00 00 80 80 c0 40 60 70 30 18 08 0c 04 06 02 03     .....@`p0.......
     508:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     588:	80 80 c0 e0 60 30 10 10 08 08 04 06 03 01 01 01     ....`0..........
     598:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     614:	00 00 00 80 c0 c0 c0 60 20 30 10 00 18 08 04 04     .......` 0......
     624:	02 03 03 02 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     6a4:	00 00 00 80 80 40 c0 e0 60 20 30 30 10 10 10 08     .....@..` 00....
     6b4:	08 08 0c 0c 08 06 06 06 03 02 01 01 00 00 00 00     ................
	...
     740:	80 80 c0 40 60 20 10 10 18 04 0c 06 02 03 03 01     ...@` ..........
	...
     7cc:	00 00 00 80 80 c0 40 40 20 30 10 18 08 08 0c 06     ......@@ 0......
     7dc:	06 02 03 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
     7ec:	00 00 00 00 01 01 01 01 01 01 01 01 00 01 00 01     ................
     7fc:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     80c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     81c:	01 01 01 01 01 01 01 01 01 01 01 00 01 01 01 01     ................
     82c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     83c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     84c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     85c:	01 01 01 81 81 c1 e1 21 61 31 11 09 19 19 0d 0d     .......!a1......
     86c:	07 03 03 00                                         ....

00000870 <font8>:
	...
     878:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     888:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     898:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     8a8:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     8b8:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     8c8:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     8d8:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     8e8:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     8f8:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     908:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     918:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     928:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     938:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     948:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     958:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     968:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     978:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     988:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     998:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     9a8:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     9b8:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     9c8:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     9d8:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     9e8:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     9f8:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     a08:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     a18:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     a28:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     a38:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     a48:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     a58:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     a68:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     a78:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     a88:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     a98:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     aa8:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     ab8:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     ac8:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     ad8:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     ae8:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     af8:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     b08:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     b18:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     b28:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     b38:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     b48:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     b58:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

00000b68 <__ctors_end>:
     b68:	11 24       	eor	r1, r1
     b6a:	1f be       	out	0x3f, r1	; 63
     b6c:	cf ef       	ldi	r28, 0xFF	; 255
     b6e:	d4 e0       	ldi	r29, 0x04	; 4
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	cd bf       	out	0x3d, r28	; 61

00000b74 <__do_copy_data>:
     b74:	13 e0       	ldi	r17, 0x03	; 3
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b1 e0       	ldi	r27, 0x01	; 1
     b7a:	e0 e3       	ldi	r30, 0x30	; 48
     b7c:	ff e1       	ldi	r31, 0x1F	; 31
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <__do_copy_data+0x10>
     b80:	05 90       	lpm	r0, Z+
     b82:	0d 92       	st	X+, r0
     b84:	a4 3d       	cpi	r26, 0xD4	; 212
     b86:	b1 07       	cpc	r27, r17
     b88:	d9 f7       	brne	.-10     	; 0xb80 <__do_copy_data+0xc>

00000b8a <__do_clear_bss>:
     b8a:	23 e0       	ldi	r18, 0x03	; 3
     b8c:	a4 ed       	ldi	r26, 0xD4	; 212
     b8e:	b3 e0       	ldi	r27, 0x03	; 3
     b90:	01 c0       	rjmp	.+2      	; 0xb94 <.do_clear_bss_start>

00000b92 <.do_clear_bss_loop>:
     b92:	1d 92       	st	X+, r1

00000b94 <.do_clear_bss_start>:
     b94:	a4 3f       	cpi	r26, 0xF4	; 244
     b96:	b2 07       	cpc	r27, r18
     b98:	e1 f7       	brne	.-8      	; 0xb92 <.do_clear_bss_loop>
     b9a:	0e 94 2a 09 	call	0x1254	; 0x1254 <main>
     b9e:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <_exit>

00000ba2 <__bad_interrupt>:
     ba2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ba6 <adc_init>:
const uint8_t ADC_mux_channel1 = 0x4;
const uint8_t ADC_mux_channel2 = 0x5;
const uint8_t ADC_mux_channel3 = 0x6;
const uint8_t ADC_mux_channel4 = 0x7;

void adc_init(void){
     ba6:	08 95       	ret

00000ba8 <adc_read>:
}

uint8_t adc_read(uint8_t channel){
	uint8_t result = 0;
	
	if(channel == 1){
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	31 f4       	brne	.+12     	; 0xbb8 <adc_read+0x10>
		*ADC_start_adress = ADC_mux_channel1;
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	80 93 00 14 	sts	0x1400, r24
		while((PIND & (1 <<PIND2))){
     bb2:	82 99       	sbic	0x10, 2	; 16
     bb4:	fe cf       	rjmp	.-4      	; 0xbb2 <adc_read+0xa>
     bb6:	17 c0       	rjmp	.+46     	; 0xbe6 <adc_read+0x3e>
		
		
		result = *ADC_start_adress;	
	}
	
	else if(channel == 2){
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	31 f4       	brne	.+12     	; 0xbc8 <adc_read+0x20>
		*ADC_start_adress = ADC_mux_channel2;
     bbc:	85 e0       	ldi	r24, 0x05	; 5
     bbe:	80 93 00 14 	sts	0x1400, r24
		while((PIND & (1 <<PIND2))){
     bc2:	82 99       	sbic	0x10, 2	; 16
     bc4:	fe cf       	rjmp	.-4      	; 0xbc2 <adc_read+0x1a>
     bc6:	0f c0       	rjmp	.+30     	; 0xbe6 <adc_read+0x3e>
		}
		
		result = *ADC_start_adress;
	}
	
	if(channel == 3){
     bc8:	83 30       	cpi	r24, 0x03	; 3
     bca:	31 f4       	brne	.+12     	; 0xbd8 <adc_read+0x30>
		*ADC_start_adress = ADC_mux_channel3;
     bcc:	86 e0       	ldi	r24, 0x06	; 6
     bce:	80 93 00 14 	sts	0x1400, r24
		while((PIND & (1 <<PIND2))){
     bd2:	82 99       	sbic	0x10, 2	; 16
     bd4:	fe cf       	rjmp	.-4      	; 0xbd2 <adc_read+0x2a>
     bd6:	07 c0       	rjmp	.+14     	; 0xbe6 <adc_read+0x3e>
		
		
		result = *ADC_start_adress;
	}
	
	else if(channel == 4){
     bd8:	84 30       	cpi	r24, 0x04	; 4
     bda:	41 f4       	brne	.+16     	; 0xbec <adc_read+0x44>
		*ADC_start_adress = ADC_mux_channel4;
     bdc:	87 e0       	ldi	r24, 0x07	; 7
     bde:	80 93 00 14 	sts	0x1400, r24
		while((PIND & (1 <<PIND2))){
     be2:	82 99       	sbic	0x10, 2	; 16
     be4:	fe cf       	rjmp	.-4      	; 0xbe2 <adc_read+0x3a>
		}
		
		result = *ADC_start_adress;
     be6:	80 91 00 14 	lds	r24, 0x1400
     bea:	08 95       	ret
void adc_init(void){

}

uint8_t adc_read(uint8_t channel){
	uint8_t result = 0;
     bec:	80 e0       	ldi	r24, 0x00	; 0
		
		result = *ADC_start_adress;
	}	
	
	return result;
     bee:	08 95       	ret

00000bf0 <button_init>:
#include "button.h"

#define BUTTON_NUMBER 3

void button_init(void){
	DDRD &= ~((1<<PD1) | (1<<PD0));	//Set touch buttons as input
     bf0:	81 b3       	in	r24, 0x11	; 17
     bf2:	8c 7f       	andi	r24, 0xFC	; 252
     bf4:	81 bb       	out	0x11, r24	; 17
	
	DDRE &= ~((1<<PE0));			//Set joystick button as input
     bf6:	30 98       	cbi	0x06, 0	; 6
	PORTE |= (1<<PE0);				//Enable pullup
     bf8:	38 9a       	sbi	0x07, 0	; 7
     bfa:	08 95       	ret

00000bfc <button_read>:
	
}

uint8_t button_read(buttons_t button){
	uint8_t reading = 0;
	if(button == LEFT_BUTTON ){
     bfc:	81 11       	cpse	r24, r1
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <button_read+0x8>
		reading = !!(PIND & (1<<PIND0));
     c00:	80 b3       	in	r24, 0x10	; 16
     c02:	0a c0       	rjmp	.+20     	; 0xc18 <button_read+0x1c>
	}
	
	else if (button == RIGHT_BUTTON){
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	21 f4       	brne	.+8      	; 0xc10 <button_read+0x14>
		reading = !!(PIND & (1<<PIND1));
     c08:	80 b3       	in	r24, 0x10	; 16
     c0a:	86 95       	lsr	r24
     c0c:	81 70       	andi	r24, 0x01	; 1
     c0e:	08 95       	ret
		
	}
	
	else if (button == JOYSTICK_BUTTON){
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	21 f4       	brne	.+8      	; 0xc1c <button_read+0x20>
		reading = !(PINE & (1<<PINE0));
     c14:	85 b1       	in	r24, 0x05	; 5
     c16:	80 95       	com	r24
     c18:	81 70       	andi	r24, 0x01	; 1
     c1a:	08 95       	ret
	PORTE |= (1<<PE0);				//Enable pullup
	
}

uint8_t button_read(buttons_t button){
	uint8_t reading = 0;
     c1c:	80 e0       	ldi	r24, 0x00	; 0
		reading = !(PINE & (1<<PINE0));
		
	}
	
	return reading;
}
     c1e:	08 95       	ret

00000c20 <button_read_state>:

button_states_t button_read_state(buttons_t button){
     c20:	cf 93       	push	r28
     c22:	c8 2f       	mov	r28, r24
	static button_states_t current_state[BUTTON_NUMBER];
	uint8_t reading = button_read(button);
     c24:	0e 94 fe 05 	call	0xbfc	; 0xbfc <button_read>
     c28:	2c 2f       	mov	r18, r28
     c2a:	30 e0       	ldi	r19, 0x00	; 0
	
	if(reading && (current_state[button] == LOW || current_state[button] == FALLING)){
     c2c:	f9 01       	movw	r30, r18
     c2e:	ec 52       	subi	r30, 0x2C	; 44
     c30:	fc 4f       	sbci	r31, 0xFC	; 252
     c32:	88 23       	and	r24, r24
     c34:	69 f0       	breq	.+26     	; 0xc50 <button_read_state+0x30>
     c36:	80 81       	ld	r24, Z
     c38:	88 23       	and	r24, r24
     c3a:	11 f0       	breq	.+4      	; 0xc40 <button_read_state+0x20>
     c3c:	83 30       	cpi	r24, 0x03	; 3
     c3e:	11 f4       	brne	.+4      	; 0xc44 <button_read_state+0x24>
		current_state[button] = RISING;
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	04 c0       	rjmp	.+8      	; 0xc4c <button_read_state+0x2c>
	}
	
	else if(reading && (current_state[button] == HIGH || current_state[button] == RISING)){
     c44:	81 50       	subi	r24, 0x01	; 1
     c46:	82 30       	cpi	r24, 0x02	; 2
     c48:	78 f4       	brcc	.+30     	; 0xc68 <button_read_state+0x48>
		current_state[button] = HIGH;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 83       	st	Z, r24
     c4e:	0c c0       	rjmp	.+24     	; 0xc68 <button_read_state+0x48>
	}
	
	else if((!reading) && (current_state[button] == HIGH || current_state[button] == RISING)){
     c50:	80 81       	ld	r24, Z
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	98 0f       	add	r25, r24
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	10 f4       	brcc	.+4      	; 0xc5e <button_read_state+0x3e>
		current_state[button] = FALLING;
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	f7 cf       	rjmp	.-18     	; 0xc4c <button_read_state+0x2c>
	}
	
	else if((!reading) && (current_state[button] == LOW || current_state[button] == FALLING)){
     c5e:	88 23       	and	r24, r24
     c60:	11 f0       	breq	.+4      	; 0xc66 <button_read_state+0x46>
     c62:	83 30       	cpi	r24, 0x03	; 3
     c64:	09 f4       	brne	.+2      	; 0xc68 <button_read_state+0x48>
		current_state[button] = LOW;
     c66:	10 82       	st	Z, r1
	}
	
	
	return current_state[button];
     c68:	f9 01       	movw	r30, r18
     c6a:	ec 52       	subi	r30, 0x2C	; 44
     c6c:	fc 4f       	sbci	r31, 0xFC	; 252
     c6e:	80 81       	ld	r24, Z
     c70:	cf 91       	pop	r28
     c72:	08 95       	ret

00000c74 <__vector_2>:
#include "mcp2515_registers.h"
#include <stdio.h>

static uint8_t can_message_available_var = 0;

ISR(INT1_vect){
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	8f 93       	push	r24
	can_message_available_var = 1;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 d7 03 	sts	0x03D7, r24
	//printf("New message\n");
}
     c86:	8f 91       	pop	r24
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <can_message_available>:

uint8_t can_message_available(){
	return can_message_available_var;
}
     c92:	80 91 d7 03 	lds	r24, 0x03D7
     c96:	08 95       	ret

00000c98 <can_init>:

void can_init(){
	mcp2515_init();
     c98:	0e 94 57 09 	call	0x12ae	; 0x12ae <mcp2515_init>
	mcp2515_reset();
     c9c:	0e 94 a0 09 	call	0x1340	; 0x1340 <mcp2515_reset>
	
	
	//Enable interrupt on received message in buffer 0
	mcp2515_write(CANINTE, RX1IE | RX0IE);
     ca0:	63 e0       	ldi	r22, 0x03	; 3
     ca2:	8b e2       	ldi	r24, 0x2B	; 43
     ca4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <mcp2515_write>
	
// 	Receive every message, no filter
// 		mcp2515_write(RXB0CTRL, RXB_RXM1 | RXB_RXM0);
// 		
	//Set mode to normal operation
	mcp2515_write(CANCTRL,MODE_NORMAL);
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	8f e0       	ldi	r24, 0x0F	; 15
     cac:	0e 94 74 09 	call	0x12e8	; 0x12e8 <mcp2515_write>
	
	
	//Enable interrupt on falling edge of INT1, PD3
	MCUCR |= (1<<ISC11); 
     cb0:	85 b7       	in	r24, 0x35	; 53
     cb2:	88 60       	ori	r24, 0x08	; 8
     cb4:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT1);
     cb6:	8b b7       	in	r24, 0x3b	; 59
     cb8:	80 68       	ori	r24, 0x80	; 128
     cba:	8b bf       	out	0x3b, r24	; 59
     cbc:	08 95       	ret

00000cbe <can_transmit>:
}

void can_transmit(can_message_t message){
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	2b 97       	sbiw	r28, 0x0b	; 11
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	e9 82       	std	Y+1, r14	; 0x01
     cdc:	fa 82       	std	Y+2, r15	; 0x02
     cde:	0b 83       	std	Y+3, r16	; 0x03
     ce0:	1c 83       	std	Y+4, r17	; 0x04
     ce2:	2d 83       	std	Y+5, r18	; 0x05
     ce4:	3e 83       	std	Y+6, r19	; 0x06
     ce6:	4f 83       	std	Y+7, r20	; 0x07
     ce8:	58 87       	std	Y+8, r21	; 0x08
     cea:	69 87       	std	Y+9, r22	; 0x09
     cec:	7a 87       	std	Y+10, r23	; 0x0a
     cee:	8b 87       	std	Y+11, r24	; 0x0b
     cf0:	e9 80       	ldd	r14, Y+1	; 0x01
     cf2:	fa 80       	ldd	r15, Y+2	; 0x02
	//Use buffer 0
	
	//Load ID
	mcp2515_write(TXB0SIDH, (0xff & (message.id >> 3))); //load high
     cf4:	b7 01       	movw	r22, r14
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	76 95       	lsr	r23
     cfa:	67 95       	ror	r22
     cfc:	8a 95       	dec	r24
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <can_transmit+0x3a>
     d00:	81 e3       	ldi	r24, 0x31	; 49
     d02:	0e 94 74 09 	call	0x12e8	; 0x12e8 <mcp2515_write>
	mcp2515_write(TXB0SIDL, 0xe0 & (message.id << 5));
     d06:	6e 2d       	mov	r22, r14
     d08:	62 95       	swap	r22
     d0a:	66 0f       	add	r22, r22
     d0c:	60 7e       	andi	r22, 0xE0	; 224
     d0e:	82 e3       	ldi	r24, 0x32	; 50
     d10:	0e 94 74 09 	call	0x12e8	; 0x12e8 <mcp2515_write>
	
	//Set length
	mcp2515_write(TXB0DLC, 0x0f & message.length);
     d14:	60 2f       	mov	r22, r16
     d16:	6f 70       	andi	r22, 0x0F	; 15
     d18:	85 e3       	ldi	r24, 0x35	; 53
     d1a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <mcp2515_write>
     d1e:	7e 01       	movw	r14, r28
     d20:	84 e0       	ldi	r24, 0x04	; 4
     d22:	e8 0e       	add	r14, r24
     d24:	f1 1c       	adc	r15, r1
	
	//Load data
	for (uint8_t i = 0; i < message.length; i++){
     d26:	10 e0       	ldi	r17, 0x00	; 0
     d28:	10 17       	cp	r17, r16
     d2a:	49 f0       	breq	.+18     	; 0xd3e <can_transmit+0x80>
		mcp2515_write(TXB0D0+i, message.data[i]);
     d2c:	f7 01       	movw	r30, r14
     d2e:	61 91       	ld	r22, Z+
     d30:	7f 01       	movw	r14, r30
     d32:	86 e3       	ldi	r24, 0x36	; 54
     d34:	81 0f       	add	r24, r17
     d36:	0e 94 74 09 	call	0x12e8	; 0x12e8 <mcp2515_write>
	
	//Set length
	mcp2515_write(TXB0DLC, 0x0f & message.length);
	
	//Load data
	for (uint8_t i = 0; i < message.length; i++){
     d3a:	1f 5f       	subi	r17, 0xFF	; 255
     d3c:	f5 cf       	rjmp	.-22     	; 0xd28 <can_transmit+0x6a>
		mcp2515_write(TXB0D0+i, message.data[i]);
	}
	
	//Send request to send
	mcp2515_rts(1);
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	0e 94 8e 09 	call	0x131c	; 0x131c <mcp2515_rts>
	
	//printf("CANINTF in transmit = %d \n", mcp2515_read(CANINTF)); 
	
}
     d44:	2b 96       	adiw	r28, 0x0b	; 11
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	08 95       	ret

00000d5e <can_recive>:

void can_recive(can_message_t *message){
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ec 01       	movw	r28, r24
	//Read id
	message->id = mcp2515_read(RXB0SIDH) << 3;
     d68:	81 e6       	ldi	r24, 0x61	; 97
     d6a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <mcp2515_read>
     d6e:	98 e0       	ldi	r25, 0x08	; 8
     d70:	89 9f       	mul	r24, r25
     d72:	80 01       	movw	r16, r0
     d74:	11 24       	eor	r1, r1
     d76:	19 83       	std	Y+1, r17	; 0x01
     d78:	08 83       	st	Y, r16
	message->id |= (7 & (mcp2515_read(RXB0SIDL) >> 5)) ;
     d7a:	82 e6       	ldi	r24, 0x62	; 98
     d7c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <mcp2515_read>
     d80:	82 95       	swap	r24
     d82:	86 95       	lsr	r24
     d84:	87 70       	andi	r24, 0x07	; 7
     d86:	08 2b       	or	r16, r24
     d88:	19 83       	std	Y+1, r17	; 0x01
     d8a:	08 83       	st	Y, r16

	
	//Read length
	message->length = 0x0f & mcp2515_read(RXB0DLC);
     d8c:	85 e6       	ldi	r24, 0x65	; 101
     d8e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <mcp2515_read>
     d92:	8f 70       	andi	r24, 0x0F	; 15
     d94:	8a 83       	std	Y+2, r24	; 0x02
	
	//Read data
	for (uint8_t i = 0; i < message->length; i++){
     d96:	10 e0       	ldi	r17, 0x00	; 0
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	18 17       	cp	r17, r24
     d9c:	50 f4       	brcc	.+20     	; 0xdb2 <can_recive+0x54>
		message->data[i] = mcp2515_read(RXB0D0+i);
     d9e:	86 e6       	ldi	r24, 0x66	; 102
     da0:	81 0f       	add	r24, r17
     da2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <mcp2515_read>
     da6:	fe 01       	movw	r30, r28
     da8:	e1 0f       	add	r30, r17
     daa:	f1 1d       	adc	r31, r1
     dac:	83 83       	std	Z+3, r24	; 0x03
	
	//Read length
	message->length = 0x0f & mcp2515_read(RXB0DLC);
	
	//Read data
	for (uint8_t i = 0; i < message->length; i++){
     dae:	1f 5f       	subi	r17, 0xFF	; 255
     db0:	f3 cf       	rjmp	.-26     	; 0xd98 <can_recive+0x3a>
		message->data[i] = mcp2515_read(RXB0D0+i);
	}
	
	//Clear interrupt flags
	mcp2515_write(CANINTF, 0x00);
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	8c e2       	ldi	r24, 0x2C	; 44
     db6:	0e 94 74 09 	call	0x12e8	; 0x12e8 <mcp2515_write>
/*	printf("CANINTF = %d /n", mcp2515_read(CANINTF));*/
	can_message_available_var = 0;	
     dba:	10 92 d7 03 	sts	0x03D7, r1
/*	return message;*/
	
	
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	08 95       	ret

00000dc8 <game_init>:
//Controll mode
game_control_mode_t game_control_mode = JOYSTICK;

void game_init(){
	//Read in top score stored in eeprom
	eeprom_read_block((void*)game_top_scores, (const void*)game_top_scores_rom, 7);
     dc8:	47 e0       	ldi	r20, 0x07	; 7
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	8b ed       	ldi	r24, 0xDB	; 219
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__eerd_block_m162>

00000dd8 <game_start>:
	}	
}

//Start the game
void game_start(){
	printf("Game started\n");
     dd8:	83 ec       	ldi	r24, 0xC3	; 195
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	0e 94 89 0c 	call	0x1912	; 0x1912 <puts>
	game_started = 1;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	80 93 e4 03 	sts	0x03E4, r24
	game_life_counter = 3;
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	80 93 e5 03 	sts	0x03E5, r24
	game_points = 0;
     dec:	10 92 e3 03 	sts	0x03E3, r1
	game_status = 0;
     df0:	10 92 e2 03 	sts	0x03E2, r1
     df4:	08 95       	ret

00000df6 <game_stop>:
}

//End the game
void game_stop(){
	game_started = 0;
     df6:	10 92 e4 03 	sts	0x03E4, r1
     dfa:	08 95       	ret

00000dfc <game_update_display>:
}

//Screen showed while the game is running, and when game over occurs
void game_update_display(){
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
	if (game_status){
     e00:	80 91 e2 03 	lds	r24, 0x03E2
     e04:	88 23       	and	r24, r24
     e06:	09 f4       	brne	.+2      	; 0xe0a <game_update_display+0xe>
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <game_update_display+0x8c>
		oled_clear();
     e0a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <oled_clear>
		oled_pos(0,0);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
		fprintf(&oled_str, "Game over!      ");
     e16:	67 ea       	ldi	r22, 0xA7	; 167
     e18:	72 e0       	ldi	r23, 0x02	; 2
     e1a:	80 ed       	ldi	r24, 0xD0	; 208
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <fputs>
		oled_pos(0, 1);
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
		fprintf(&oled_str, "You got %d points", game_points);
     e2a:	80 91 e3 03 	lds	r24, 0x03E3
     e2e:	1f 92       	push	r1
     e30:	8f 93       	push	r24
     e32:	81 ee       	ldi	r24, 0xE1	; 225
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	9f 93       	push	r25
     e38:	8f 93       	push	r24
     e3a:	87 ea       	ldi	r24, 0xA7	; 167
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	9f 93       	push	r25
     e40:	8f 93       	push	r24
     e42:	0e 94 3a 0c 	call	0x1874	; 0x1874 <fprintf>
		oled_pos(0,2);
     e46:	62 e0       	ldi	r22, 0x02	; 2
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
		fprintf(&oled_str, "            ");
     e4e:	67 ea       	ldi	r22, 0xA7	; 167
     e50:	72 e0       	ldi	r23, 0x02	; 2
     e52:	83 ef       	ldi	r24, 0xF3	; 243
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	0e 94 4c 0c 	call	0x1898	; 0x1898 <fputs>
		oled_pos(0, 4);
     e5a:	64 e0       	ldi	r22, 0x04	; 4
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
		fprintf(&oled_str, "Right: New game");
     e62:	67 ea       	ldi	r22, 0xA7	; 167
     e64:	72 e0       	ldi	r23, 0x02	; 2
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <fputs>
		oled_pos(0, 5);
     e6e:	65 e0       	ldi	r22, 0x05	; 5
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
		fprintf(&oled_str, "Left: exit");
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	67 ea       	ldi	r22, 0xA7	; 167
     e84:	72 e0       	ldi	r23, 0x02	; 2
     e86:	31 c0       	rjmp	.+98     	; 0xeea <game_update_display+0xee>
	}
	else{
		oled_clear();
     e88:	0e 94 c9 0a 	call	0x1592	; 0x1592 <oled_clear>
		oled_pos(0,0);
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
		fprintf(&oled_str, "Lives left : %3d", game_life_counter);
     e94:	80 91 e5 03 	lds	r24, 0x03E5
     e98:	1f 92       	push	r1
     e9a:	8f 93       	push	r24
     e9c:	8b e1       	ldi	r24, 0x1B	; 27
     e9e:	93 e0       	ldi	r25, 0x03	; 3
     ea0:	9f 93       	push	r25
     ea2:	8f 93       	push	r24
     ea4:	c7 ea       	ldi	r28, 0xA7	; 167
     ea6:	d2 e0       	ldi	r29, 0x02	; 2
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	0e 94 3a 0c 	call	0x1874	; 0x1874 <fprintf>
		oled_pos(0, 1);
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
		fprintf(&oled_str, "Points     : %3d", game_points);
     eb8:	80 91 e3 03 	lds	r24, 0x03E3
     ebc:	1f 92       	push	r1
     ebe:	8f 93       	push	r24
     ec0:	8c e2       	ldi	r24, 0x2C	; 44
     ec2:	93 e0       	ldi	r25, 0x03	; 3
     ec4:	9f 93       	push	r25
     ec6:	8f 93       	push	r24
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	0e 94 3a 0c 	call	0x1874	; 0x1874 <fprintf>
		oled_pos(0, 2);
     ed0:	62 e0       	ldi	r22, 0x02	; 2
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
		fprintf(&oled_str, "Left: exit");
     ed8:	8d b7       	in	r24, 0x3d	; 61
     eda:	9e b7       	in	r25, 0x3e	; 62
     edc:	0c 96       	adiw	r24, 0x0c	; 12
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	9e bf       	out	0x3e, r25	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	8d bf       	out	0x3d, r24	; 61
     ee8:	be 01       	movw	r22, r28
     eea:	80 e1       	ldi	r24, 0x10	; 16
     eec:	93 e0       	ldi	r25, 0x03	; 3
	}
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
		oled_pos(0,0);
		fprintf(&oled_str, "Lives left : %3d", game_life_counter);
		oled_pos(0, 1);
		fprintf(&oled_str, "Points     : %3d", game_points);
		oled_pos(0, 2);
		fprintf(&oled_str, "Left: exit");
     ef2:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <fputs>

00000ef6 <game_display_top_score>:
void game_over(){
	
}

//Show the top score list
void game_display_top_score(){
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
	oled_pos(0,0);
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
	fprintf(&oled_str, "   Top score");
     f0e:	67 ea       	ldi	r22, 0xA7	; 167
     f10:	72 e0       	ldi	r23, 0x02	; 2
     f12:	8d e3       	ldi	r24, 0x3D	; 61
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	0e 94 4c 0c 	call	0x1898	; 0x1898 <fputs>
     f1a:	8b ed       	ldi	r24, 0xDB	; 219
     f1c:	c8 2e       	mov	r12, r24
     f1e:	83 e0       	ldi	r24, 0x03	; 3
     f20:	d8 2e       	mov	r13, r24
     f22:	c1 e0       	ldi	r28, 0x01	; 1
     f24:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i = 0; i < 7; i++){
		oled_pos(0, i+1);
		
		fprintf(&oled_str, "%d.   %3d", i+1,game_top_scores[i]);
     f26:	9a e4       	ldi	r25, 0x4A	; 74
     f28:	e9 2e       	mov	r14, r25
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	f9 2e       	mov	r15, r25
     f2e:	07 ea       	ldi	r16, 0xA7	; 167
     f30:	12 e0       	ldi	r17, 0x02	; 2
//Show the top score list
void game_display_top_score(){
	oled_pos(0,0);
	fprintf(&oled_str, "   Top score");
	for(uint8_t i = 0; i < 7; i++){
		oled_pos(0, i+1);
     f32:	6c 2f       	mov	r22, r28
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
		
		fprintf(&oled_str, "%d.   %3d", i+1,game_top_scores[i]);
     f3a:	f6 01       	movw	r30, r12
     f3c:	81 91       	ld	r24, Z+
     f3e:	6f 01       	movw	r12, r30
     f40:	1f 92       	push	r1
     f42:	8f 93       	push	r24
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	ff 92       	push	r15
     f4a:	ef 92       	push	r14
     f4c:	1f 93       	push	r17
     f4e:	0f 93       	push	r16
     f50:	0e 94 3a 0c 	call	0x1874	; 0x1874 <fprintf>
     f54:	21 96       	adiw	r28, 0x01	; 1

//Show the top score list
void game_display_top_score(){
	oled_pos(0,0);
	fprintf(&oled_str, "   Top score");
	for(uint8_t i = 0; i < 7; i++){
     f56:	ed b7       	in	r30, 0x3d	; 61
     f58:	fe b7       	in	r31, 0x3e	; 62
     f5a:	38 96       	adiw	r30, 0x08	; 8
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	fe bf       	out	0x3e, r31	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	ed bf       	out	0x3d, r30	; 61
     f66:	c8 30       	cpi	r28, 0x08	; 8
     f68:	d1 05       	cpc	r29, r1
     f6a:	19 f7       	brne	.-58     	; 0xf32 <game_display_top_score+0x3c>
		oled_pos(0, i+1);
		
		fprintf(&oled_str, "%d.   %3d", i+1,game_top_scores[i]);
	
	}
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	df 90       	pop	r13
     f7a:	cf 90       	pop	r12
     f7c:	08 95       	ret

00000f7e <game_new_score>:

//Checks the score and adds it to the top score if it is high enough
void game_new_score(uint8_t score){
	
	//Check if score is larger than smallest
	if(score > game_top_scores[7-1]){
     f7e:	90 91 e1 03 	lds	r25, 0x03E1
     f82:	98 17       	cp	r25, r24
     f84:	10 f4       	brcc	.+4      	; 0xf8a <game_new_score+0xc>
		game_top_scores[7-1] = score;
     f86:	80 93 e1 03 	sts	0x03E1, r24
     f8a:	e1 ee       	ldi	r30, 0xE1	; 225
     f8c:	f3 e0       	ldi	r31, 0x03	; 3
     f8e:	a2 ee       	ldi	r26, 0xE2	; 226
     f90:	b3 e0       	ldi	r27, 0x03	; 3
	
	//Sort list by insertion sort
	//One iteration through the list is enough as only one new item is added to a sorted list at a time
	for (uint8_t i = 7-1; i > 0; i--){
		//Switch places if score is larger
		if(game_top_scores[i-1] < game_top_scores[i]){
     f92:	82 91       	ld	r24, -Z
     f94:	9e 91       	ld	r25, -X
     f96:	89 17       	cp	r24, r25
     f98:	10 f4       	brcc	.+4      	; 0xf9e <game_new_score+0x20>
			uint8_t temp = game_top_scores[i-1];
			game_top_scores[i-1] = game_top_scores[i];
     f9a:	90 83       	st	Z, r25
			game_top_scores[i] = temp;
     f9c:	8c 93       	st	X, r24
	}
	
	
	//Sort list by insertion sort
	//One iteration through the list is enough as only one new item is added to a sorted list at a time
	for (uint8_t i = 7-1; i > 0; i--){
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	eb 3d       	cpi	r30, 0xDB	; 219
     fa2:	f8 07       	cpc	r31, r24
     fa4:	b1 f7       	brne	.-20     	; 0xf92 <game_new_score+0x14>
			game_top_scores[i] = temp;
		}
	}
	
	//update eeprom
	eeprom_update_block((const void*)game_top_scores, (void*)game_top_scores_rom, 7);
     fa6:	47 e0       	ldi	r20, 0x07	; 7
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	8b ed       	ldi	r24, 0xDB	; 219
     fb0:	93 e0       	ldi	r25, 0x03	; 3
     fb2:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__eeupd_block_m162>

00000fb6 <game_run>:
	eeprom_read_block((void*)game_top_scores, (const void*)game_top_scores_rom, 7);
}


//Main function that runs the game
void game_run(){
     fb6:	ef 92       	push	r14
     fb8:	ff 92       	push	r15
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	66 97       	sbiw	r28, 0x16	; 22
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
	if(game_started && !game_status){
     fd2:	80 91 e4 03 	lds	r24, 0x03E4
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <game_run+0x26>
     fda:	8e c0       	rjmp	.+284    	; 0x10f8 <game_run+0x142>
     fdc:	80 91 e2 03 	lds	r24, 0x03E2
     fe0:	81 11       	cpse	r24, r1
     fe2:	8a c0       	rjmp	.+276    	; 0x10f8 <game_run+0x142>
		static uint8_t servo = 0;
		static uint8_t motor = 0;
		static uint8_t solinoid = 0;
		
		//Control the game with the sliders
		if (game_control_mode == SLIDER){
     fe4:	10 91 00 01 	lds	r17, 0x0100
     fe8:	11 11       	cpse	r17, r1
     fea:	19 c0       	rjmp	.+50     	; 0x101e <game_run+0x68>
			if(button_read_state(RIGHT_BUTTON) == RISING){
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	0e 94 10 06 	call	0xc20	; 0xc20 <button_read_state>
     ff2:	82 30       	cpi	r24, 0x02	; 2
     ff4:	49 f4       	brne	.+18     	; 0x1008 <game_run+0x52>
				game_points++;
     ff6:	80 91 e3 03 	lds	r24, 0x03E3
     ffa:	8f 5f       	subi	r24, 0xFF	; 255
     ffc:	80 93 e3 03 	sts	0x03E3, r24
				solinoid = 1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	80 93 da 03 	sts	0x03DA, r24
    1006:	02 c0       	rjmp	.+4      	; 0x100c <game_run+0x56>
			}
			else {
				solinoid = 0;
    1008:	10 92 da 03 	sts	0x03DA, r1
			}
			
			servo = slider_read(RIGHT_SLIDER);
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	0e 94 01 0c 	call	0x1802	; 0x1802 <slider_read>
    1012:	80 93 d9 03 	sts	0x03D9, r24
			motor = slider_read(LEFT_SLIDER);
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	0e 94 01 0c 	call	0x1802	; 0x1802 <slider_read>
    101c:	21 c0       	rjmp	.+66     	; 0x1060 <game_run+0xaa>

		}
		
		//Control the game with the joystick
		else if (game_control_mode == JOYSTICK){
    101e:	11 30       	cpi	r17, 0x01	; 1
    1020:	09 f5       	brne	.+66     	; 0x1064 <game_run+0xae>
			//Disable menu control with the joystick while button is not pressed
			if(button_read_state(RIGHT_BUTTON) == HIGH){
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0e 94 10 06 	call	0xc20	; 0xc20 <button_read_state>
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	19 f4       	brne	.+6      	; 0x1032 <game_run+0x7c>
				menu_control_enable();
    102c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <menu_control_enable>
    1030:	19 c0       	rjmp	.+50     	; 0x1064 <game_run+0xae>
			}
			
			else{
				menu_control_disable();
    1032:	0e 94 ad 0a 	call	0x155a	; 0x155a <menu_control_disable>
				
				//Only trigger solinoid on edge of button press
				if(button_read_state(JOYSTICK_BUTTON) == RISING){
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	0e 94 10 06 	call	0xc20	; 0xc20 <button_read_state>
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	41 f4       	brne	.+16     	; 0x1050 <game_run+0x9a>
					game_points++;
    1040:	80 91 e3 03 	lds	r24, 0x03E3
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	80 93 e3 03 	sts	0x03E3, r24
					solinoid = 1;
    104a:	10 93 da 03 	sts	0x03DA, r17
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <game_run+0x9e>
				}
				else {
					solinoid = 0;
    1050:	10 92 da 03 	sts	0x03DA, r1
				}
				
				//Read data from joystick and convert it to unsigned
				joystick_pos_t p = joystick_read();
    1054:	0e 94 c2 08 	call	0x1184	; 0x1184 <joystick_read>
				servo = (uint8_t)(128 + p.y);
    1058:	90 58       	subi	r25, 0x80	; 128
    105a:	90 93 d9 03 	sts	0x03D9, r25
				motor = (uint8_t)(128 + p.x);
    105e:	80 58       	subi	r24, 0x80	; 128
    1060:	80 93 d8 03 	sts	0x03D8, r24
		}
		
		
		//Send control data over can
		can_message_t control_inputs_message;
		control_inputs_message.length = 4;
    1064:	84 e0       	ldi	r24, 0x04	; 4
    1066:	8e 87       	std	Y+14, r24	; 0x0e
		control_inputs_message.data[1] = servo;
    1068:	20 91 d9 03 	lds	r18, 0x03D9
    106c:	28 8b       	std	Y+16, r18	; 0x10
		control_inputs_message.data[2] = motor;
    106e:	30 91 d8 03 	lds	r19, 0x03D8
    1072:	39 8b       	std	Y+17, r19	; 0x11
		control_inputs_message.data[3] = solinoid;
    1074:	40 91 da 03 	lds	r20, 0x03DA
    1078:	4a 8b       	std	Y+18, r20	; 0x12
		control_inputs_message.id = CAN_SENDT_JOYSTICK_POS;
    107a:	89 ee       	ldi	r24, 0xE9	; 233
    107c:	e8 2e       	mov	r14, r24
    107e:	8c 87       	std	Y+12, r24	; 0x0c
    1080:	83 e0       	ldi	r24, 0x03	; 3
    1082:	8d 87       	std	Y+13, r24	; 0x0d
		can_transmit(control_inputs_message);
    1084:	53 e0       	ldi	r21, 0x03	; 3
    1086:	f5 2e       	mov	r15, r21
    1088:	04 e0       	ldi	r16, 0x04	; 4
    108a:	1f 85       	ldd	r17, Y+15	; 0x0f
    108c:	5b 89       	ldd	r21, Y+19	; 0x13
    108e:	6c 89       	ldd	r22, Y+20	; 0x14
    1090:	7d 89       	ldd	r23, Y+21	; 0x15
    1092:	8e 89       	ldd	r24, Y+22	; 0x16
    1094:	0e 94 5f 06 	call	0xcbe	; 0xcbe <can_transmit>
			
	
		
	
		//Check for new messages on can bus
		if(can_message_available()){
    1098:	0e 94 49 06 	call	0xc92	; 0xc92 <can_message_available>
    109c:	88 23       	and	r24, r24
    109e:	51 f1       	breq	.+84     	; 0x10f4 <game_run+0x13e>
			can_message_t r;
			can_recive(&r);
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	0e 94 af 06 	call	0xd5e	; 0xd5e <can_recive>
		
		
			//Ball is down
			if(r.id == CAN_SENDT_BALL_DOWN){
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	8a 3e       	cpi	r24, 0xEA	; 234
    10ae:	93 40       	sbci	r25, 0x03	; 3
    10b0:	09 f5       	brne	.+66     	; 0x10f4 <game_run+0x13e>
				game_life_counter--;
    10b2:	80 91 e5 03 	lds	r24, 0x03E5
    10b6:	81 50       	subi	r24, 0x01	; 1
    10b8:	80 93 e5 03 	sts	0x03E5, r24
				if (game_life_counter == 0){
    10bc:	81 11       	cpse	r24, r1
    10be:	1a c0       	rjmp	.+52     	; 0x10f4 <game_run+0x13e>
					game_status = 1;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	80 93 e2 03 	sts	0x03E2, r24
					menu_control_enable();
    10c6:	0e 94 b1 0a 	call	0x1562	; 0x1562 <menu_control_enable>
					game_new_score(game_points);
    10ca:	80 91 e3 03 	lds	r24, 0x03E3
    10ce:	0e 94 bf 07 	call	0xf7e	; 0xf7e <game_new_score>
					printf("Game stopped\n");
    10d2:	84 e5       	ldi	r24, 0x54	; 84
    10d4:	93 e0       	ldi	r25, 0x03	; 3
    10d6:	0e 94 89 0c 	call	0x1912	; 0x1912 <puts>
					oled_display_bitmap(bitmap_game_over);
    10da:	80 e7       	ldi	r24, 0x70	; 112
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 ca 0b 	call	0x1794	; 0x1794 <oled_display_bitmap>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	9f ef       	ldi	r25, 0xFF	; 255
    10e6:	2e e0       	ldi	r18, 0x0E	; 14
    10e8:	81 50       	subi	r24, 0x01	; 1
    10ea:	90 40       	sbci	r25, 0x00	; 0
    10ec:	20 40       	sbci	r18, 0x00	; 0
    10ee:	e1 f7       	brne	.-8      	; 0x10e8 <game_run+0x132>
    10f0:	00 c0       	rjmp	.+0      	; 0x10f2 <game_run+0x13c>
    10f2:	00 00       	nop
					_delay_ms(1000);
				}
			}
		}
		
		game_update_display();
    10f4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <game_update_display>
	}	
}
    10f8:	66 96       	adiw	r28, 0x16	; 22
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	08 95       	ret

00001112 <game_top_score_clear>:
	eeprom_update_block((const void*)game_top_scores, (void*)game_top_scores_rom, 7);
	
}

//Clear the top scores, both in ram and eeprom
void game_top_score_clear(){
    1112:	eb ed       	ldi	r30, 0xDB	; 219
    1114:	f3 e0       	ldi	r31, 0x03	; 3
	for(uint8_t i = 0; i < 7; i++){
		game_top_scores[i] = 0;
    1116:	11 92       	st	Z+, r1
	
}

//Clear the top scores, both in ram and eeprom
void game_top_score_clear(){
	for(uint8_t i = 0; i < 7; i++){
    1118:	83 e0       	ldi	r24, 0x03	; 3
    111a:	e2 3e       	cpi	r30, 0xE2	; 226
    111c:	f8 07       	cpc	r31, r24
    111e:	d9 f7       	brne	.-10     	; 0x1116 <game_top_score_clear+0x4>
		game_top_scores[i] = 0;
	}
	eeprom_update_block((const void*)game_top_scores, (void*)game_top_scores_rom, 7);
    1120:	47 e0       	ldi	r20, 0x07	; 7
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	8b ed       	ldi	r24, 0xDB	; 219
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__eeupd_block_m162>
	
	oled_clear();
    1130:	0e 94 c9 0a 	call	0x1592	; 0x1592 <oled_clear>
	oled_pos(0,0);
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
	fprintf(&oled_str, "Top score cleared");
    113c:	67 ea       	ldi	r22, 0xA7	; 167
    113e:	72 e0       	ldi	r23, 0x02	; 2
    1140:	81 e6       	ldi	r24, 0x61	; 97
    1142:	93 e0       	ldi	r25, 0x03	; 3
    1144:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <fputs>

00001148 <game_control_set_slider>:
}

//Set the input to the sliders
void game_control_set_slider(){
	game_control_mode = SLIDER;
    1148:	10 92 00 01 	sts	0x0100, r1
	
	oled_clear();
    114c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <oled_clear>
	oled_pos(0,0);
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
	fprintf(&oled_str, "Input set \n to slider");
    1158:	67 ea       	ldi	r22, 0xA7	; 167
    115a:	72 e0       	ldi	r23, 0x02	; 2
    115c:	83 e7       	ldi	r24, 0x73	; 115
    115e:	93 e0       	ldi	r25, 0x03	; 3
    1160:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <fputs>

00001164 <game_control_set_joystick>:
}

//Set the inputs to joystick
void game_control_set_joystick(){
	game_control_mode = JOYSTICK;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	80 93 00 01 	sts	0x0100, r24
	
	oled_clear();
    116a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <oled_clear>
	oled_pos(0,0);
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
	fprintf(&oled_str, "Input set \n to joystick");
    1176:	67 ea       	ldi	r22, 0xA7	; 167
    1178:	72 e0       	ldi	r23, 0x02	; 2
    117a:	89 e8       	ldi	r24, 0x89	; 137
    117c:	93 e0       	ldi	r25, 0x03	; 3
    117e:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <fputs>

00001182 <joystick_init>:
#define NEUTRAL_RANGE 40

static joystick_pos_t offset = {0, 0};


void joystick_init(void){
    1182:	08 95       	ret

00001184 <joystick_read>:

	
}

joystick_pos_t joystick_read(void){
    1184:	cf 93       	push	r28
	joystick_pos_t reading;
	reading.x = (int8_t)(((int16_t) adc_read(JOYSTICK_X_ADC_CHANNEL)) - 128) + offset.x;
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	0e 94 d4 05 	call	0xba8	; 0xba8 <adc_read>
    118c:	c0 91 e6 03 	lds	r28, 0x03E6
    1190:	c0 58       	subi	r28, 0x80	; 128
    1192:	c8 0f       	add	r28, r24
	reading.y = (int8_t)(((int16_t) adc_read(JOYSTICK_Y_ADC_CHANNEL)) - 128) + offset.y;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	0e 94 d4 05 	call	0xba8	; 0xba8 <adc_read>
    119a:	90 91 e7 03 	lds	r25, 0x03E7
    119e:	90 58       	subi	r25, 0x80	; 128
    11a0:	98 0f       	add	r25, r24
	
	return reading;
}
    11a2:	8c 2f       	mov	r24, r28
    11a4:	cf 91       	pop	r28
    11a6:	08 95       	ret

000011a8 <joystick_read_direction>:

joystick_direction_t joystick_read_direction(void){
	joystick_pos_t reading= joystick_read();
    11a8:	0e 94 c2 08 	call	0x1184	; 0x1184 <joystick_read>
    11ac:	69 2f       	mov	r22, r25
	joystick_direction_t result;
	
	
	
	if(reading.x > NEUTRAL_RANGE &&  abs(reading.y) < abs(reading.x)){
    11ae:	89 32       	cpi	r24, 0x29	; 41
    11b0:	8c f0       	brlt	.+34     	; 0x11d4 <joystick_read_direction+0x2c>
    11b2:	29 2f       	mov	r18, r25
    11b4:	33 27       	eor	r19, r19
    11b6:	27 fd       	sbrc	r18, 7
    11b8:	30 95       	com	r19
    11ba:	37 ff       	sbrs	r19, 7
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <joystick_read_direction+0x1c>
    11be:	31 95       	neg	r19
    11c0:	21 95       	neg	r18
    11c2:	31 09       	sbc	r19, r1
    11c4:	48 2f       	mov	r20, r24
    11c6:	55 27       	eor	r21, r21
    11c8:	47 fd       	sbrc	r20, 7
    11ca:	50 95       	com	r21
    11cc:	24 17       	cp	r18, r20
    11ce:	35 07       	cpc	r19, r21
    11d0:	a4 f4       	brge	.+40     	; 0x11fa <joystick_read_direction+0x52>
    11d2:	3a c0       	rjmp	.+116    	; 0x1248 <joystick_read_direction+0xa0>
		result = RIGHT;
	}
	
	else if(reading.x < -NEUTRAL_RANGE && abs(reading.y) < abs(reading.x)){
    11d4:	88 3d       	cpi	r24, 0xD8	; 216
    11d6:	8c f4       	brge	.+34     	; 0x11fa <joystick_read_direction+0x52>
    11d8:	29 2f       	mov	r18, r25
    11da:	33 27       	eor	r19, r19
    11dc:	27 fd       	sbrc	r18, 7
    11de:	30 95       	com	r19
    11e0:	37 ff       	sbrs	r19, 7
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <joystick_read_direction+0x42>
    11e4:	31 95       	neg	r19
    11e6:	21 95       	neg	r18
    11e8:	31 09       	sbc	r19, r1
    11ea:	e8 2f       	mov	r30, r24
    11ec:	ff 27       	eor	r31, r31
    11ee:	e1 95       	neg	r30
    11f0:	0c f4       	brge	.+2      	; 0x11f4 <joystick_read_direction+0x4c>
    11f2:	f0 95       	com	r31
    11f4:	2e 17       	cp	r18, r30
    11f6:	3f 07       	cpc	r19, r31
    11f8:	4c f1       	brlt	.+82     	; 0x124c <joystick_read_direction+0xa4>
		result = LEFT;
	}
	
	else if(reading.y > NEUTRAL_RANGE && abs(reading.x) < abs(reading.y)){
    11fa:	69 32       	cpi	r22, 0x29	; 41
    11fc:	8c f0       	brlt	.+34     	; 0x1220 <joystick_read_direction+0x78>
    11fe:	99 27       	eor	r25, r25
    1200:	87 fd       	sbrc	r24, 7
    1202:	90 95       	com	r25
    1204:	97 ff       	sbrs	r25, 7
    1206:	03 c0       	rjmp	.+6      	; 0x120e <joystick_read_direction+0x66>
    1208:	91 95       	neg	r25
    120a:	81 95       	neg	r24
    120c:	91 09       	sbc	r25, r1
    120e:	26 2f       	mov	r18, r22
    1210:	33 27       	eor	r19, r19
    1212:	27 fd       	sbrc	r18, 7
    1214:	30 95       	com	r19
    1216:	82 17       	cp	r24, r18
    1218:	93 07       	cpc	r25, r19
    121a:	d4 f0       	brlt	.+52     	; 0x1250 <joystick_read_direction+0xa8>
		
		result = DOWN;
	}
	
	else {
		result = NEUTRAL;
    121c:	84 e0       	ldi	r24, 0x04	; 4
    121e:	08 95       	ret
	else if(reading.y > NEUTRAL_RANGE && abs(reading.x) < abs(reading.y)){
		
		result = UP;
	}
	
	else if(reading.y < -NEUTRAL_RANGE && abs(reading.x) < abs(reading.y)){
    1220:	68 3d       	cpi	r22, 0xD8	; 216
    1222:	e4 f7       	brge	.-8      	; 0x121c <joystick_read_direction+0x74>
    1224:	99 27       	eor	r25, r25
    1226:	87 fd       	sbrc	r24, 7
    1228:	90 95       	com	r25
    122a:	97 ff       	sbrs	r25, 7
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <joystick_read_direction+0x8c>
    122e:	91 95       	neg	r25
    1230:	81 95       	neg	r24
    1232:	91 09       	sbc	r25, r1
    1234:	46 2f       	mov	r20, r22
    1236:	55 27       	eor	r21, r21
    1238:	41 95       	neg	r20
    123a:	0c f4       	brge	.+2      	; 0x123e <joystick_read_direction+0x96>
    123c:	50 95       	com	r21
    123e:	84 17       	cp	r24, r20
    1240:	95 07       	cpc	r25, r21
    1242:	64 f7       	brge	.-40     	; 0x121c <joystick_read_direction+0x74>
		
		result = DOWN;
    1244:	83 e0       	ldi	r24, 0x03	; 3
    1246:	08 95       	ret
	joystick_direction_t result;
	
	
	
	if(reading.x > NEUTRAL_RANGE &&  abs(reading.y) < abs(reading.x)){
		result = RIGHT;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	08 95       	ret
	}
	
	else if(reading.x < -NEUTRAL_RANGE && abs(reading.y) < abs(reading.x)){
		result = LEFT;
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	08 95       	ret
	}
	
	else if(reading.y > NEUTRAL_RANGE && abs(reading.x) < abs(reading.y)){
		
		result = UP;
    1250:	82 e0       	ldi	r24, 0x02	; 2
	else {
		result = NEUTRAL;
	}	
	
	return result;
}
    1252:	08 95       	ret

00001254 <main>:


int main(void)
{
	//Init systems
	sram_init();
    1254:	0e 94 19 0c 	call	0x1832	; 0x1832 <sram_init>
	adc_init();
    1258:	0e 94 d3 05 	call	0xba6	; 0xba6 <adc_init>
	button_init();
    125c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <button_init>
	oled_init();
    1260:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <oled_init>
	uart_init();
    1264:	0e 94 28 0c 	call	0x1850	; 0x1850 <uart_init>
	can_init();
    1268:	0e 94 4c 06 	call	0xc98	; 0xc98 <can_init>
	joystick_init();
    126c:	0e 94 c1 08 	call	0x1182	; 0x1182 <joystick_init>
	game_init();
    1270:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <game_init>
	
	//Enable interrupts
	sei();
    1274:	78 94       	sei


	printf("Init done\n");
    1276:	81 ea       	ldi	r24, 0xA1	; 161
    1278:	93 e0       	ldi	r25, 0x03	; 3
    127a:	0e 94 89 0c 	call	0x1912	; 0x1912 <puts>
	//sram_test();
	oled_display_bitmap(bitmap_test);
    127e:	80 e7       	ldi	r24, 0x70	; 112
    1280:	94 e0       	ldi	r25, 0x04	; 4
    1282:	0e 94 ca 0b 	call	0x1794	; 0x1794 <oled_display_bitmap>
    1286:	2f ef       	ldi	r18, 0xFF	; 255
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	9e e0       	ldi	r25, 0x0E	; 14
    128c:	21 50       	subi	r18, 0x01	; 1
    128e:	80 40       	sbci	r24, 0x00	; 0
    1290:	90 40       	sbci	r25, 0x00	; 0
    1292:	e1 f7       	brne	.-8      	; 0x128c <main+0x38>
    1294:	00 c0       	rjmp	.+0      	; 0x1296 <main+0x42>
    1296:	00 00       	nop
	_delay_ms(1000);

	while(1){

		menu_update();
    1298:	0e 94 2a 0a 	call	0x1454	; 0x1454 <menu_update>
		game_run();
    129c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <game_run>
		
		//_delay_ms(100);
		oled_display_buffer();
    12a0:	0e 94 5f 0b 	call	0x16be	; 0x16be <oled_display_buffer>
    12a4:	f9 cf       	rjmp	.-14     	; 0x1298 <main+0x44>

000012a6 <mcp2515_disable>:
#include "mcp2515.h"
#include "spi.h"

void mcp2515_disable(){
	//Set CS high
	PORTB |= (1<<PB4);
    12a6:	c4 9a       	sbi	0x18, 4	; 24
    12a8:	08 95       	ret

000012aa <mcp2515_enable>:
}

void mcp2515_enable(){
	//Set CS low
	PORTB &= ~(1<<PB4);	
    12aa:	c4 98       	cbi	0x18, 4	; 24
    12ac:	08 95       	ret

000012ae <mcp2515_init>:
}

void mcp2515_init(){
	spi_init();
    12ae:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <spi_init>

000012b2 <mcp2515_read>:
}

//Read data from register beginning at selected address.
uint8_t mcp2515_read(uint8_t address){
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	1f 92       	push	r1
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	18 2f       	mov	r17, r24
	uint8_t data;
	
	mcp2515_enable();
    12c0:	0e 94 55 09 	call	0x12aa	; 0x12aa <mcp2515_enable>
	spi_transmit(0x03);
    12c4:	83 e0       	ldi	r24, 0x03	; 3
    12c6:	0e 94 13 0c 	call	0x1826	; 0x1826 <spi_transmit>
	spi_transmit(address);
    12ca:	81 2f       	mov	r24, r17
    12cc:	0e 94 13 0c 	call	0x1826	; 0x1826 <spi_transmit>
	
	//recive data
	data = spi_transmit(0);
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	0e 94 13 0c 	call	0x1826	; 0x1826 <spi_transmit>
	mcp2515_disable();	
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	0e 94 53 09 	call	0x12a6	; 0x12a6 <mcp2515_disable>
	return data;
}
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	0f 90       	pop	r0
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	08 95       	ret

000012e8 <mcp2515_write>:

//Write data to register beginning at selected address.
void mcp2515_write(uint8_t address, uint8_t data){
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	1f 92       	push	r1
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	18 2f       	mov	r17, r24
	mcp2515_enable();
    12f6:	69 83       	std	Y+1, r22	; 0x01
    12f8:	0e 94 55 09 	call	0x12aa	; 0x12aa <mcp2515_enable>
	spi_transmit(0x02);
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	0e 94 13 0c 	call	0x1826	; 0x1826 <spi_transmit>
	spi_transmit(address);
    1302:	81 2f       	mov	r24, r17
    1304:	0e 94 13 0c 	call	0x1826	; 0x1826 <spi_transmit>
	
	//send data
	spi_transmit(data);
    1308:	69 81       	ldd	r22, Y+1	; 0x01
    130a:	86 2f       	mov	r24, r22
    130c:	0e 94 13 0c 	call	0x1826	; 0x1826 <spi_transmit>
	mcp2515_disable();
}
    1310:	0f 90       	pop	r0
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
	spi_transmit(0x02);
	spi_transmit(address);
	
	//send data
	spi_transmit(data);
	mcp2515_disable();
    1318:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <mcp2515_disable>

0000131c <mcp2515_rts>:
}

//Instructs controller to begin message transmission sequence for
//any of the transmit buffers
void mcp2515_rts(uint8_t registers){
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	1f 92       	push	r1
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	mcp2515_enable();
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	0e 94 55 09 	call	0x12aa	; 0x12aa <mcp2515_enable>
	spi_transmit(0x80 | (7 & registers));
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	87 70       	andi	r24, 0x07	; 7
    1330:	80 68       	ori	r24, 0x80	; 128
    1332:	0e 94 13 0c 	call	0x1826	; 0x1826 <spi_transmit>
	mcp2515_disable();
}
    1336:	0f 90       	pop	r0
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
//Instructs controller to begin message transmission sequence for
//any of the transmit buffers
void mcp2515_rts(uint8_t registers){
	mcp2515_enable();
	spi_transmit(0x80 | (7 & registers));
	mcp2515_disable();
    133c:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <mcp2515_disable>

00001340 <mcp2515_reset>:
	mcp2515_disable();
}

//Resets internal registers to default state,
void mcp2515_reset(){
	mcp2515_enable();
    1340:	0e 94 55 09 	call	0x12aa	; 0x12aa <mcp2515_enable>
	spi_transmit(0xc0);
    1344:	80 ec       	ldi	r24, 0xC0	; 192
    1346:	0e 94 13 0c 	call	0x1826	; 0x1826 <spi_transmit>
	mcp2515_disable();
    134a:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <mcp2515_disable>

0000134e <menu_display>:
 



//Displays the a menu struct
uint8_t menu_display(Menu *menu){
    134e:	7f 92       	push	r7
    1350:	8f 92       	push	r8
    1352:	9f 92       	push	r9
    1354:	af 92       	push	r10
    1356:	bf 92       	push	r11
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	8c 01       	movw	r16, r24
	
	//Don't display a menu for menus that call functions
	//These functions are responsible for drawing to the screen them selfs
	if (menu->enter_function != NULL){
    136a:	fc 01       	movw	r30, r24
    136c:	82 a1       	ldd	r24, Z+34	; 0x22
    136e:	93 a1       	ldd	r25, Z+35	; 0x23
    1370:	89 2b       	or	r24, r25
    1372:	09 f0       	breq	.+2      	; 0x1376 <menu_display+0x28>
    1374:	60 c0       	rjmp	.+192    	; 0x1436 <menu_display+0xe8>
		return 0;
	}
	
	oled_pos(0, 0);
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>

	fprintf(&oled_str, "%-16s", menu->header);
    137e:	1f 93       	push	r17
    1380:	0f 93       	push	r16
    1382:	80 eb       	ldi	r24, 0xB0	; 176
    1384:	93 e0       	ldi	r25, 0x03	; 3
    1386:	9f 93       	push	r25
    1388:	8f 93       	push	r24
    138a:	87 ea       	ldi	r24, 0xA7	; 167
    138c:	92 e0       	ldi	r25, 0x02	; 2
    138e:	9f 93       	push	r25
    1390:	8f 93       	push	r24
    1392:	0e 94 3a 0c 	call	0x1874	; 0x1874 <fprintf>
    1396:	78 01       	movw	r14, r16
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	c1 e0       	ldi	r28, 0x01	; 1
    13a6:	d0 e0       	ldi	r29, 0x00	; 0
			
			fprintf(&oled_str, "%-16s", menu->items[i]->header);
		}
		else{
			oled_inverted(0);
			printf("Cleared line %i", i+1);
    13a8:	86 eb       	ldi	r24, 0xB6	; 182
    13aa:	c8 2e       	mov	r12, r24
    13ac:	83 e0       	ldi	r24, 0x03	; 3
    13ae:	d8 2e       	mov	r13, r24
			}
			else{
				oled_inverted(0);
			}
			
			fprintf(&oled_str, "%-16s", menu->items[i]->header);
    13b0:	90 eb       	ldi	r25, 0xB0	; 176
    13b2:	a9 2e       	mov	r10, r25
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	b9 2e       	mov	r11, r25
    13b8:	27 ea       	ldi	r18, 0xA7	; 167
    13ba:	82 2e       	mov	r8, r18
    13bc:	22 e0       	ldi	r18, 0x02	; 2
    13be:	92 2e       	mov	r9, r18
    13c0:	7c 2e       	mov	r7, r28
    13c2:	7a 94       	dec	r7
	
	oled_pos(0, 0);

	fprintf(&oled_str, "%-16s", menu->header);
	for(uint8_t i = 0; i < 7; i++){
		oled_pos(0, i+1);
    13c4:	6c 2f       	mov	r22, r28
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
		if(i < menu->number_of_items){
    13cc:	f8 01       	movw	r30, r16
    13ce:	81 89       	ldd	r24, Z+17	; 0x11
    13d0:	78 16       	cp	r7, r24
    13d2:	d0 f4       	brcc	.+52     	; 0x1408 <menu_display+0xba>
			if (i == menu->selected){
    13d4:	80 89       	ldd	r24, Z+16	; 0x10
    13d6:	78 12       	cpse	r7, r24
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <menu_display+0x90>
				oled_inverted(1);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <menu_display+0x92>
			}
			else{
				oled_inverted(0);
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_inverted>
			}
			
			fprintf(&oled_str, "%-16s", menu->items[i]->header);
    13e4:	f7 01       	movw	r30, r14
    13e6:	83 89       	ldd	r24, Z+19	; 0x13
    13e8:	8f 93       	push	r24
    13ea:	82 89       	ldd	r24, Z+18	; 0x12
    13ec:	8f 93       	push	r24
    13ee:	bf 92       	push	r11
    13f0:	af 92       	push	r10
    13f2:	9f 92       	push	r9
    13f4:	8f 92       	push	r8
    13f6:	0e 94 3a 0c 	call	0x1874	; 0x1874 <fprintf>
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0d c0       	rjmp	.+26     	; 0x1422 <menu_display+0xd4>
		}
		else{
			oled_inverted(0);
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_inverted>
			printf("Cleared line %i", i+1);
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	df 92       	push	r13
    1414:	cf 92       	push	r12
    1416:	0e 94 75 0c 	call	0x18ea	; 0x18ea <printf>
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	e2 e0       	ldi	r30, 0x02	; 2
    1424:	ee 0e       	add	r14, r30
    1426:	f1 1c       	adc	r15, r1
    1428:	21 96       	adiw	r28, 0x01	; 1
	}
	
	oled_pos(0, 0);

	fprintf(&oled_str, "%-16s", menu->header);
	for(uint8_t i = 0; i < 7; i++){
    142a:	c8 30       	cpi	r28, 0x08	; 8
    142c:	d1 05       	cpc	r29, r1
    142e:	41 f6       	brne	.-112    	; 0x13c0 <menu_display+0x72>
			oled_inverted(0);
			printf("Cleared line %i", i+1);
		}
		
	}
	oled_inverted(0);
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	0e 94 18 0b 	call	0x1630	; 0x1630 <oled_inverted>
	return 0;
}
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	bf 90       	pop	r11
    144a:	af 90       	pop	r10
    144c:	9f 90       	pop	r9
    144e:	8f 90       	pop	r8
    1450:	7f 90       	pop	r7
    1452:	08 95       	ret

00001454 <menu_update>:

void menu_update(){

	//Do nothing if the controll inputs are disabled
	if (!menu_control_input_disabled)
    1454:	80 91 e8 03 	lds	r24, 0x03E8
    1458:	81 11       	cpse	r24, r1
    145a:	7e c0       	rjmp	.+252    	; 0x1558 <menu_update+0x104>
	{
		void (*enter_function_temp)() = NULL;
		void (*exit_function_temp)() = NULL;

		if(joystick_read_direction() == UP){
    145c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <joystick_read_direction>
    1460:	82 30       	cpi	r24, 0x02	; 2
    1462:	59 f4       	brne	.+22     	; 0x147a <menu_update+0x26>
			if(0 < currentMenu->selected ){
    1464:	e0 91 01 01 	lds	r30, 0x0101
    1468:	f0 91 02 01 	lds	r31, 0x0102
    146c:	80 89       	ldd	r24, Z+16	; 0x10
    146e:	88 23       	and	r24, r24
    1470:	09 f4       	brne	.+2      	; 0x1474 <menu_update+0x20>
    1472:	59 c0       	rjmp	.+178    	; 0x1526 <menu_update+0xd2>
				currentMenu->selected--;
    1474:	81 50       	subi	r24, 0x01	; 1
    1476:	80 8b       	std	Z+16, r24	; 0x10
    1478:	56 c0       	rjmp	.+172    	; 0x1526 <menu_update+0xd2>
			}
			menu_changed = 1;
			
		}
		
		else if(joystick_read_direction() == DOWN){
    147a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <joystick_read_direction>
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	89 f4       	brne	.+34     	; 0x14a4 <menu_update+0x50>
			if(currentMenu->number_of_items > currentMenu->selected +1){
    1482:	e0 91 01 01 	lds	r30, 0x0101
    1486:	f0 91 02 01 	lds	r31, 0x0102
    148a:	40 89       	ldd	r20, Z+16	; 0x10
    148c:	21 89       	ldd	r18, Z+17	; 0x11
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	84 2f       	mov	r24, r20
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	82 17       	cp	r24, r18
    1498:	93 07       	cpc	r25, r19
    149a:	0c f0       	brlt	.+2      	; 0x149e <menu_update+0x4a>
    149c:	44 c0       	rjmp	.+136    	; 0x1526 <menu_update+0xd2>
				currentMenu->selected++;
    149e:	4f 5f       	subi	r20, 0xFF	; 255
    14a0:	40 8b       	std	Z+16, r20	; 0x10
    14a2:	41 c0       	rjmp	.+130    	; 0x1526 <menu_update+0xd2>
			}
			menu_changed = 1;
		}
		
		else if(joystick_read_direction() == RIGHT){
    14a4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <joystick_read_direction>
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	09 f5       	brne	.+66     	; 0x14ee <menu_update+0x9a>
			if(currentMenu->items[currentMenu->selected] != NULL){
    14ac:	e0 91 01 01 	lds	r30, 0x0101
    14b0:	f0 91 02 01 	lds	r31, 0x0102
    14b4:	80 89       	ldd	r24, Z+16	; 0x10
    14b6:	e8 0f       	add	r30, r24
    14b8:	f1 1d       	adc	r31, r1
    14ba:	e8 0f       	add	r30, r24
    14bc:	f1 1d       	adc	r31, r1
    14be:	82 89       	ldd	r24, Z+18	; 0x12
    14c0:	93 89       	ldd	r25, Z+19	; 0x13
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	31 f0       	breq	.+12     	; 0x14d2 <menu_update+0x7e>
				currentMenu = currentMenu->items[currentMenu->selected];
    14c6:	90 93 02 01 	sts	0x0102, r25
    14ca:	80 93 01 01 	sts	0x0101, r24
				//Clear line if menu is updated
				oled_clear();
    14ce:	0e 94 c9 0a 	call	0x1592	; 0x1592 <oled_clear>
			}
			enter_function_temp = currentMenu->enter_function;
    14d2:	e0 91 01 01 	lds	r30, 0x0101
    14d6:	f0 91 02 01 	lds	r31, 0x0102
    14da:	02 a0       	ldd	r0, Z+34	; 0x22
    14dc:	f3 a1       	ldd	r31, Z+35	; 0x23
    14de:	e0 2d       	mov	r30, r0
			menu_changed = 1;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	80 93 03 01 	sts	0x0103, r24
			menu_changed = 1;
			
		}
		
		//Run function associated with menu if it exists and button is pressed
		if(enter_function_temp != NULL){
    14e6:	30 97       	sbiw	r30, 0x00	; 0
    14e8:	09 f1       	breq	.+66     	; 0x152c <menu_update+0xd8>
			enter_function_temp();
    14ea:	09 95       	icall
    14ec:	1f c0       	rjmp	.+62     	; 0x152c <menu_update+0xd8>
			menu_changed = 1;
			

		}
		
		else if(joystick_read_direction() == LEFT){
    14ee:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <joystick_read_direction>
    14f2:	81 11       	cpse	r24, r1
    14f4:	1b c0       	rjmp	.+54     	; 0x152c <menu_update+0xd8>
			//Run on exit menu, normaly used for cleanup functions
			exit_function_temp = currentMenu->exit_function;
    14f6:	e0 91 01 01 	lds	r30, 0x0101
    14fa:	f0 91 02 01 	lds	r31, 0x0102
    14fe:	04 a0       	ldd	r0, Z+36	; 0x24
    1500:	f5 a1       	ldd	r31, Z+37	; 0x25
    1502:	e0 2d       	mov	r30, r0
			if(exit_function_temp != NULL){
    1504:	30 97       	sbiw	r30, 0x00	; 0
    1506:	09 f0       	breq	.+2      	; 0x150a <menu_update+0xb6>
				exit_function_temp();
    1508:	09 95       	icall
			}
		
			if(currentMenu->parrent != NULL){
    150a:	e0 91 01 01 	lds	r30, 0x0101
    150e:	f0 91 02 01 	lds	r31, 0x0102
    1512:	80 a1       	ldd	r24, Z+32	; 0x20
    1514:	91 a1       	ldd	r25, Z+33	; 0x21
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	31 f0       	breq	.+12     	; 0x1526 <menu_update+0xd2>
				currentMenu = currentMenu->parrent;
    151a:	90 93 02 01 	sts	0x0102, r25
    151e:	80 93 01 01 	sts	0x0101, r24
				//Clear line if menu is updated
				oled_clear();
    1522:	0e 94 c9 0a 	call	0x1592	; 0x1592 <oled_clear>
			}
			menu_changed = 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 93 03 01 	sts	0x0103, r24
		
		//Run function associated with menu if it exists and button is pressed
		if(enter_function_temp != NULL){
			enter_function_temp();
		}
		if(menu_changed) {
    152c:	80 91 03 01 	lds	r24, 0x0103
    1530:	88 23       	and	r24, r24
    1532:	41 f0       	breq	.+16     	; 0x1544 <menu_update+0xf0>
			menu_display(currentMenu);
    1534:	80 91 01 01 	lds	r24, 0x0101
    1538:	90 91 02 01 	lds	r25, 0x0102
    153c:	0e 94 a7 09 	call	0x134e	; 0x134e <menu_display>
			menu_changed = 0;
    1540:	10 92 03 01 	sts	0x0103, r1
		}
	
		
		//Wait for joystick to be in neutral
		while(joystick_read_direction() != NEUTRAL);
    1544:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <joystick_read_direction>
    1548:	84 30       	cpi	r24, 0x04	; 4
    154a:	e1 f7       	brne	.-8      	; 0x1544 <menu_update+0xf0>
    154c:	8f ef       	ldi	r24, 0xFF	; 255
    154e:	9f e5       	ldi	r25, 0x5F	; 95
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <menu_update+0xfc>
    1554:	00 c0       	rjmp	.+0      	; 0x1556 <menu_update+0x102>
    1556:	00 00       	nop
    1558:	08 95       	ret

0000155a <menu_control_disable>:
}

//Make menu handler ignore button inputs
//Has to be re enabled for the menu to work again
void menu_control_disable(){
	menu_control_input_disabled = 1;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	80 93 e8 03 	sts	0x03E8, r24
    1560:	08 95       	ret

00001562 <menu_control_enable>:
}

//Activates button inputs for menu handler
void menu_control_enable(){
	menu_control_input_disabled = 0;
    1562:	10 92 e8 03 	sts	0x03E8, r1
    1566:	08 95       	ret

00001568 <oled_goto_line>:
void oled_home(void){
	
}

void oled_goto_line(uint8_t line){
	oled_state.cursor_y = line & 0x07;
    1568:	87 70       	andi	r24, 0x07	; 7
    156a:	80 93 ea 03 	sts	0x03EA, r24
	
	oled_write_command(0xb0 | (0x07 & oled_state.cursor_y));
    156e:	80 6b       	ori	r24, 0xB0	; 176
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
    1570:	80 93 00 10 	sts	0x1000, r24
    1574:	08 95       	ret

00001576 <oled_goto_column>:
	
	oled_write_command(0xb0 | (0x07 & oled_state.cursor_y));
}

void oled_goto_column(uint8_t column){
	oled_state.cursor_x = column & 0x8F;
    1576:	98 2f       	mov	r25, r24
    1578:	9f 78       	andi	r25, 0x8F	; 143
    157a:	90 93 e9 03 	sts	0x03E9, r25
	
	oled_write_command(0x0F & oled_state.cursor_x);
    157e:	8f 70       	andi	r24, 0x0F	; 15
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
    1580:	e0 e0       	ldi	r30, 0x00	; 0
    1582:	f0 e1       	ldi	r31, 0x10	; 16
    1584:	80 83       	st	Z, r24

void oled_goto_column(uint8_t column){
	oled_state.cursor_x = column & 0x8F;
	
	oled_write_command(0x0F & oled_state.cursor_x);
	oled_write_command((1<<4) | oled_state.cursor_x >> 4);
    1586:	89 2f       	mov	r24, r25
    1588:	82 95       	swap	r24
    158a:	8f 70       	andi	r24, 0x0F	; 15
    158c:	80 61       	ori	r24, 0x10	; 16
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
    158e:	80 83       	st	Z, r24
    1590:	08 95       	ret

00001592 <oled_clear>:
//Clear whole display
void oled_clear(void){
	//for(uint8_t j = 0; j < 8; j++){
	//	oled_clear_line(j);
	//}
	memset((void*)oled_buffer_0_address, 0, 1024);
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	94 e0       	ldi	r25, 0x04	; 4
    1596:	e0 e0       	ldi	r30, 0x00	; 0
    1598:	f8 e1       	ldi	r31, 0x18	; 24
    159a:	df 01       	movw	r26, r30
    159c:	9c 01       	movw	r18, r24
    159e:	1d 92       	st	X+, r1
    15a0:	21 50       	subi	r18, 0x01	; 1
    15a2:	30 40       	sbci	r19, 0x00	; 0
    15a4:	e1 f7       	brne	.-8      	; 0x159e <oled_clear+0xc>
    15a6:	08 95       	ret

000015a8 <oled_init>:
 
static oled_state_t oled_state = {0};
 

//Initializes the display
void oled_init(void){
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
	oled_buffer_current = oled_buffer_0_address;
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	98 e1       	ldi	r25, 0x18	; 24
    15b0:	90 93 ed 03 	sts	0x03ED, r25
    15b4:	80 93 ec 03 	sts	0x03EC, r24
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
    15b8:	c0 e0       	ldi	r28, 0x00	; 0
    15ba:	d0 e1       	ldi	r29, 0x10	; 16
    15bc:	8e ea       	ldi	r24, 0xAE	; 174
    15be:	88 83       	st	Y, r24
    15c0:	81 ea       	ldi	r24, 0xA1	; 161
    15c2:	88 83       	st	Y, r24
    15c4:	8a ed       	ldi	r24, 0xDA	; 218
    15c6:	88 83       	st	Y, r24
    15c8:	82 e1       	ldi	r24, 0x12	; 18
    15ca:	88 83       	st	Y, r24
    15cc:	88 ec       	ldi	r24, 0xC8	; 200
    15ce:	88 83       	st	Y, r24
    15d0:	88 ea       	ldi	r24, 0xA8	; 168
    15d2:	88 83       	st	Y, r24
    15d4:	8f e3       	ldi	r24, 0x3F	; 63
    15d6:	88 83       	st	Y, r24
    15d8:	85 ed       	ldi	r24, 0xD5	; 213
    15da:	88 83       	st	Y, r24
    15dc:	80 e8       	ldi	r24, 0x80	; 128
    15de:	88 83       	st	Y, r24
    15e0:	81 e8       	ldi	r24, 0x81	; 129
    15e2:	88 83       	st	Y, r24
    15e4:	80 e5       	ldi	r24, 0x50	; 80
    15e6:	88 83       	st	Y, r24
    15e8:	89 ed       	ldi	r24, 0xD9	; 217
    15ea:	88 83       	st	Y, r24
    15ec:	81 e2       	ldi	r24, 0x21	; 33
    15ee:	88 83       	st	Y, r24
    15f0:	80 e2       	ldi	r24, 0x20	; 32
    15f2:	88 83       	st	Y, r24
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	88 83       	st	Y, r24
    15f8:	8b ed       	ldi	r24, 0xDB	; 219
    15fa:	88 83       	st	Y, r24
    15fc:	80 e3       	ldi	r24, 0x30	; 48
    15fe:	88 83       	st	Y, r24
    1600:	8d ea       	ldi	r24, 0xAD	; 173
    1602:	88 83       	st	Y, r24
    1604:	18 82       	st	Y, r1
    1606:	84 ea       	ldi	r24, 0xA4	; 164
    1608:	88 83       	st	Y, r24
    160a:	86 ea       	ldi	r24, 0xA6	; 166
    160c:	88 83       	st	Y, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	
	oled_clear(); //Clear the display
    160e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <oled_clear>
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
    1612:	8f ea       	ldi	r24, 0xAF	; 175
    1614:	88 83       	st	Y, r24
	
	
	
	oled_clear(); //Clear the display
	
}
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
	oled_clear(); //Clear the display
	oled_write_command(0xaf); // display on
	
	
	
	oled_clear(); //Clear the display
    161a:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <oled_clear>

0000161e <oled_pos>:
	//}
	memset((void*)oled_buffer_0_address, 0, 1024);
	//memset((void*)oled_buffer_1_address, 0, 1024);
}

void oled_pos(uint8_t column, uint8_t row){
    161e:	cf 93       	push	r28
    1620:	c8 2f       	mov	r28, r24
    1622:	86 2f       	mov	r24, r22
	oled_goto_line(row);
    1624:	0e 94 b4 0a 	call	0x1568	; 0x1568 <oled_goto_line>
	oled_goto_column(column);
    1628:	8c 2f       	mov	r24, r28
}
    162a:	cf 91       	pop	r28
	//memset((void*)oled_buffer_1_address, 0, 1024);
}

void oled_pos(uint8_t column, uint8_t row){
	oled_goto_line(row);
	oled_goto_column(column);
    162c:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <oled_goto_column>

00001630 <oled_inverted>:
}

void oled_inverted(uint8_t inv){
	oled_inverted_state = inv;
    1630:	80 93 eb 03 	sts	0x03EB, r24
    1634:	08 95       	ret

00001636 <oled_write_buffer>:
		
	}
}

void oled_write_buffer(uint8_t data){
	uint16_t offset = oled_state.cursor_x+ ((oled_state.cursor_y)*128);
    1636:	90 91 e9 03 	lds	r25, 0x03E9
    163a:	20 91 ea 03 	lds	r18, 0x03EA
    163e:	40 e8       	ldi	r20, 0x80	; 128
    1640:	24 9f       	mul	r18, r20
    1642:	90 01       	movw	r18, r0
    1644:	11 24       	eor	r1, r1
    1646:	29 0f       	add	r18, r25
    1648:	31 1d       	adc	r19, r1
	if(data != oled_buffer_current[offset]){
    164a:	e0 91 ec 03 	lds	r30, 0x03EC
    164e:	f0 91 ed 03 	lds	r31, 0x03ED
    1652:	e2 0f       	add	r30, r18
    1654:	f3 1f       	adc	r31, r19
    1656:	20 81       	ld	r18, Z
    1658:	82 17       	cp	r24, r18
    165a:	19 f0       	breq	.+6      	; 0x1662 <oled_write_buffer+0x2c>
		oled_changed_content = 1;	
    165c:	21 e0       	ldi	r18, 0x01	; 1
    165e:	20 93 a6 02 	sts	0x02A6, r18
	}
	  
	oled_buffer_current[offset] = data;
    1662:	80 83       	st	Z, r24
	oled_state.cursor_x++;
    1664:	9f 5f       	subi	r25, 0xFF	; 255
    1666:	90 93 e9 03 	sts	0x03E9, r25
    166a:	08 95       	ret

0000166c <oled_puts>:
void oled_inverted(uint8_t inv){
	oled_inverted_state = inv;
}


uint8_t oled_puts(char c, FILE* stream){
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
	if(c == '\n'){
    1674:	8a 30       	cpi	r24, 0x0A	; 10
    1676:	39 f4       	brne	.+14     	; 0x1686 <oled_puts+0x1a>
		oled_pos(0, oled_state.cursor_y + 1); // Go to new line
    1678:	60 91 ea 03 	lds	r22, 0x03EA
    167c:	6f 5f       	subi	r22, 0xFF	; 255
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
    1684:	16 c0       	rjmp	.+44     	; 0x16b2 <oled_puts+0x46>
    1686:	98 e0       	ldi	r25, 0x08	; 8
    1688:	89 9f       	mul	r24, r25
    168a:	80 01       	movw	r16, r0
    168c:	11 24       	eor	r1, r1
	oled_inverted_state = inv;
}


uint8_t oled_puts(char c, FILE* stream){
	if(c == '\n'){
    168e:	c0 e0       	ldi	r28, 0x00	; 0
    1690:	d0 e0       	ldi	r29, 0x00	; 0
    1692:	00 59       	subi	r16, 0x90	; 144
    1694:	18 4f       	sbci	r17, 0xF8	; 248
    1696:	f8 01       	movw	r30, r16
    1698:	ec 0f       	add	r30, r28
    169a:	fd 1f       	adc	r31, r29
	}
	
	else{
		for(uint8_t i = 0; i < 8; i++)
		{
			uint8_t data = pgm_read_byte(&font8[c - ' '][i]);
    169c:	84 91       	lpm	r24, Z
			if(oled_inverted_state){
    169e:	90 91 eb 03 	lds	r25, 0x03EB
    16a2:	91 11       	cpse	r25, r1
				data = ~data;
    16a4:	80 95       	com	r24
			}
			oled_write_buffer(data);
    16a6:	0e 94 1b 0b 	call	0x1636	; 0x1636 <oled_write_buffer>
    16aa:	21 96       	adiw	r28, 0x01	; 1
	if(c == '\n'){
		oled_pos(0, oled_state.cursor_y + 1); // Go to new line
	}
	
	else{
		for(uint8_t i = 0; i < 8; i++)
    16ac:	c8 30       	cpi	r28, 0x08	; 8
    16ae:	d1 05       	cpc	r29, r1
    16b0:	91 f7       	brne	.-28     	; 0x1696 <oled_puts+0x2a>
			//oled_write_data(data);
			
		}
	}
	return 0;
}
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	08 95       	ret

000016be <oled_display_buffer>:
//	printf("Offset = %d\n", offset);
// 	printf("Wrote %d to %x, read back %d ", data, (uint16_t)oled_buffer_current, (uint16_t)&oled_buffer_current[offset]);
// 	printf("address = %d at x = %d, y = %d \n",oled_state.cursor_x+ (oled_state.cursor_y*128), oled_state.cursor_x, oled_state.cursor_y);
}

void oled_display_buffer(){
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
	if(oled_changed_content){
    16c8:	80 91 a6 02 	lds	r24, 0x02A6
    16cc:	88 23       	and	r24, r24
    16ce:	49 f1       	breq	.+82     	; 0x1722 <oled_display_buffer+0x64>
		oled_pos(0,0);
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
    16d8:	c0 e0       	ldi	r28, 0x00	; 0
    16da:	d0 e0       	ldi	r29, 0x00	; 0
		for(uint8_t y = 0; y<8; y++){
    16dc:	f1 2c       	mov	r15, r1
    16de:	01 e8       	ldi	r16, 0x81	; 129
    16e0:	18 e1       	ldi	r17, 0x18	; 24
			oled_pos(0, y);
    16e2:	6f 2d       	mov	r22, r15
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
			for (uint8_t x = 0;x < 128; x++){
    16ea:	81 e8       	ldi	r24, 0x81	; 129
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9c 01       	movw	r18, r24
    16f0:	21 50       	subi	r18, 0x01	; 1
    16f2:	31 09       	sbc	r19, r1
    16f4:	21 15       	cp	r18, r1
    16f6:	31 05       	cpc	r19, r1
    16f8:	51 f0       	breq	.+20     	; 0x170e <oled_display_buffer+0x50>
    16fa:	f8 01       	movw	r30, r16
    16fc:	e8 1b       	sub	r30, r24
    16fe:	f9 0b       	sbc	r31, r25
    1700:	ec 0f       	add	r30, r28
    1702:	fd 1f       	adc	r31, r29
				uint8_t data = oled_buffer_0_address[x+ ((y)*128)];
    1704:	80 81       	ld	r24, Z
	
}

//Writes data to the display
void oled_write_data(uint8_t data){
	*oled_data_address = data;
    1706:	80 93 00 12 	sts	0x1200, r24
    170a:	c9 01       	movw	r24, r18
    170c:	f0 cf       	rjmp	.-32     	; 0x16ee <oled_display_buffer+0x30>
}

void oled_display_buffer(){
	if(oled_changed_content){
		oled_pos(0,0);
		for(uint8_t y = 0; y<8; y++){
    170e:	f3 94       	inc	r15
    1710:	c0 58       	subi	r28, 0x80	; 128
    1712:	df 4f       	sbci	r29, 0xFF	; 255
    1714:	88 e0       	ldi	r24, 0x08	; 8
    1716:	f8 12       	cpse	r15, r24
    1718:	e4 cf       	rjmp	.-56     	; 0x16e2 <oled_display_buffer+0x24>
				oled_write_data(data);
			}
			
			
		}
		printf("Wrote buffer\n");
    171a:	86 ec       	ldi	r24, 0xC6	; 198
    171c:	93 e0       	ldi	r25, 0x03	; 3
    171e:	0e 94 89 0c 	call	0x1912	; 0x1912 <puts>
	}
	oled_changed_content = 0;
    1722:	10 92 a6 02 	sts	0x02A6, r1
// 	else{
// 		oled_buffer_current = oled_buffer_0_address;
// 	}
	//printf("Current buffer is %x \n", (uint16_t)oled_buffer_current);
	
}
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	08 95       	ret

00001732 <oled_reverse_bits>:

//Swaps the order of bits
uint8_t oled_reverse_bits(uint8_t a){
	return ((a & 0x1)  << 7) | ((a & 0x2)  << 5) |
    1732:	90 e8       	ldi	r25, 0x80	; 128
    1734:	89 9f       	mul	r24, r25
    1736:	90 01       	movw	r18, r0
    1738:	11 24       	eor	r1, r1
	((a & 0x4)  << 3) | ((a & 0x8)  << 1) |
	((a & 0x10) >> 1) | ((a & 0x20) >> 3) |
	((a & 0x40) >> 5) | ((a & 0x80)  >> 7);
    173a:	98 2f       	mov	r25, r24
    173c:	99 1f       	adc	r25, r25
    173e:	99 27       	eor	r25, r25
    1740:	99 1f       	adc	r25, r25
	
}

//Swaps the order of bits
uint8_t oled_reverse_bits(uint8_t a){
	return ((a & 0x1)  << 7) | ((a & 0x2)  << 5) |
    1742:	92 2b       	or	r25, r18
    1744:	28 2f       	mov	r18, r24
    1746:	22 70       	andi	r18, 0x02	; 2
    1748:	22 95       	swap	r18
    174a:	22 0f       	add	r18, r18
    174c:	20 7e       	andi	r18, 0xE0	; 224
    174e:	29 2b       	or	r18, r25
	((a & 0x4)  << 3) | ((a & 0x8)  << 1) |
    1750:	98 2f       	mov	r25, r24
    1752:	94 70       	andi	r25, 0x04	; 4
    1754:	99 0f       	add	r25, r25
    1756:	99 0f       	add	r25, r25
    1758:	99 0f       	add	r25, r25
	
}

//Swaps the order of bits
uint8_t oled_reverse_bits(uint8_t a){
	return ((a & 0x1)  << 7) | ((a & 0x2)  << 5) |
    175a:	92 2b       	or	r25, r18
	((a & 0x4)  << 3) | ((a & 0x8)  << 1) |
    175c:	48 2f       	mov	r20, r24
    175e:	48 70       	andi	r20, 0x08	; 8
    1760:	44 0f       	add	r20, r20
	
}

//Swaps the order of bits
uint8_t oled_reverse_bits(uint8_t a){
	return ((a & 0x1)  << 7) | ((a & 0x2)  << 5) |
    1762:	49 2b       	or	r20, r25
	((a & 0x4)  << 3) | ((a & 0x8)  << 1) |
	((a & 0x10) >> 1) | ((a & 0x20) >> 3) |
    1764:	28 2f       	mov	r18, r24
    1766:	20 71       	andi	r18, 0x10	; 16
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	35 95       	asr	r19
    176c:	27 95       	ror	r18
	
}

//Swaps the order of bits
uint8_t oled_reverse_bits(uint8_t a){
	return ((a & 0x1)  << 7) | ((a & 0x2)  << 5) |
    176e:	42 2b       	or	r20, r18
	((a & 0x4)  << 3) | ((a & 0x8)  << 1) |
	((a & 0x10) >> 1) | ((a & 0x20) >> 3) |
    1770:	28 2f       	mov	r18, r24
    1772:	20 72       	andi	r18, 0x20	; 32
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	53 e0       	ldi	r21, 0x03	; 3
    1778:	35 95       	asr	r19
    177a:	27 95       	ror	r18
    177c:	5a 95       	dec	r21
    177e:	e1 f7       	brne	.-8      	; 0x1778 <oled_reverse_bits+0x46>
	
}

//Swaps the order of bits
uint8_t oled_reverse_bits(uint8_t a){
	return ((a & 0x1)  << 7) | ((a & 0x2)  << 5) |
    1780:	42 2b       	or	r20, r18
	((a & 0x4)  << 3) | ((a & 0x8)  << 1) |
	((a & 0x10) >> 1) | ((a & 0x20) >> 3) |
	((a & 0x40) >> 5) | ((a & 0x80)  >> 7);
    1782:	80 74       	andi	r24, 0x40	; 64
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	65 e0       	ldi	r22, 0x05	; 5
    1788:	95 95       	asr	r25
    178a:	87 95       	ror	r24
    178c:	6a 95       	dec	r22
    178e:	e1 f7       	brne	.-8      	; 0x1788 <oled_reverse_bits+0x56>
}
    1790:	84 2b       	or	r24, r20
    1792:	08 95       	ret

00001794 <oled_display_bitmap>:
		}
	}
	return 0;
}

void oled_display_bitmap(const unsigned char* bitmap){
    1794:	cf 92       	push	r12
    1796:	df 92       	push	r13
    1798:	ff 92       	push	r15
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	1f 92       	push	r1
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	18 2f       	mov	r17, r24
	oled_pos(0,0);
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	99 83       	std	Y+1, r25	; 0x01
    17b0:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
    17b4:	c1 2e       	mov	r12, r17
    17b6:	99 81       	ldd	r25, Y+1	; 0x01
    17b8:	d9 2e       	mov	r13, r25
	for(uint8_t y = 0; y<8; y++){
    17ba:	f1 2c       	mov	r15, r1
		}
	}
	return 0;
}

void oled_display_bitmap(const unsigned char* bitmap){
    17bc:	00 e0       	ldi	r16, 0x00	; 0
    17be:	10 e0       	ldi	r17, 0x00	; 0
    17c0:	f8 01       	movw	r30, r16
    17c2:	ec 0d       	add	r30, r12
    17c4:	fd 1d       	adc	r31, r13
	oled_pos(0,0);
	for(uint8_t y = 0; y<8; y++){
		for (uint8_t x = 0;x < 128; x++){
			uint8_t data = oled_reverse_bits(pgm_read_byte(bitmap + (x) + (y*128)));
    17c6:	84 91       	lpm	r24, Z
    17c8:	0e 94 99 0b 	call	0x1732	; 0x1732 <oled_reverse_bits>
	
}

//Writes data to the display
void oled_write_data(uint8_t data){
	*oled_data_address = data;
    17cc:	80 93 00 12 	sts	0x1200, r24
    17d0:	0f 5f       	subi	r16, 0xFF	; 255
    17d2:	1f 4f       	sbci	r17, 0xFF	; 255
}

void oled_display_bitmap(const unsigned char* bitmap){
	oled_pos(0,0);
	for(uint8_t y = 0; y<8; y++){
		for (uint8_t x = 0;x < 128; x++){
    17d4:	00 38       	cpi	r16, 0x80	; 128
    17d6:	11 05       	cpc	r17, r1
    17d8:	99 f7       	brne	.-26     	; 0x17c0 <oled_display_bitmap+0x2c>
			uint8_t data = oled_reverse_bits(pgm_read_byte(bitmap + (x) + (y*128)));
			oled_write_data(data);
		}
		oled_pos(0, y);
    17da:	6f 2d       	mov	r22, r15
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	0e 94 0f 0b 	call	0x161e	; 0x161e <oled_pos>
	return 0;
}

void oled_display_bitmap(const unsigned char* bitmap){
	oled_pos(0,0);
	for(uint8_t y = 0; y<8; y++){
    17e2:	f3 94       	inc	r15
    17e4:	80 e8       	ldi	r24, 0x80	; 128
    17e6:	c8 0e       	add	r12, r24
    17e8:	d1 1c       	adc	r13, r1
    17ea:	e8 e0       	ldi	r30, 0x08	; 8
    17ec:	fe 12       	cpse	r15, r30
    17ee:	e6 cf       	rjmp	.-52     	; 0x17bc <oled_display_bitmap+0x28>
			oled_write_data(data);
		}
		oled_pos(0, y);
		
	}
}
    17f0:	0f 90       	pop	r0
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	08 95       	ret

00001802 <slider_read>:
}

uint8_t slider_read(slider_t slider){
	uint8_t result = 0;
	
	if(slider == LEFT_SLIDER){
    1802:	81 11       	cpse	r24, r1
    1804:	02 c0       	rjmp	.+4      	; 0x180a <slider_read+0x8>
		result = adc_read(SLIDER_L_ADC_CHANNEL);
    1806:	84 e0       	ldi	r24, 0x04	; 4
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <slider_read+0xe>
	}
	
	else if(slider == RIGHT_SLIDER){
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	19 f4       	brne	.+6      	; 0x1814 <slider_read+0x12>
		result = adc_read(SLIDER_R_ADC_CHANNEL);
    180e:	83 e0       	ldi	r24, 0x03	; 3
    1810:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <adc_read>
	}
	
	return result;
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	08 95       	ret

00001818 <spi_init>:

#include "spi.h"

void spi_init(void){
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB7);
    1818:	87 b3       	in	r24, 0x17	; 23
    181a:	80 6b       	ori	r24, 0xB0	; 176
    181c:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input
	DDRB &= ~(1<<PB6);
    181e:	be 98       	cbi	0x17, 6	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1820:	81 e5       	ldi	r24, 0x51	; 81
    1822:	8d b9       	out	0x0d, r24	; 13
    1824:	08 95       	ret

00001826 <spi_transmit>:
}

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
    1826:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
    1828:	77 99       	sbic	0x0e, 7	; 14
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <spi_transmit+0xa>
	
	data = SPDR;
    182c:	8f b1       	in	r24, 0x0f	; 15
    182e:	fc cf       	rjmp	.-8      	; 0x1828 <spi_transmit+0x2>

	return data;
    1830:	08 95       	ret

00001832 <sram_init>:
#include <stdint.h>
#include <avr/io.h>
#include "sram.h"

void sram_init(void){
	MCUCR |= (1<<SRE);
    1832:	85 b7       	in	r24, 0x35	; 53
    1834:	80 68       	ori	r24, 0x80	; 128
    1836:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    1838:	80 b7       	in	r24, 0x30	; 48
    183a:	80 62       	ori	r24, 0x20	; 32
    183c:	80 bf       	out	0x30, r24	; 48
    183e:	08 95       	ret

00001840 <uart_transmit>:
	stdout = stdin = &uart_str;
	
}

void uart_transmit(unsigned char data, FILE* stream){
	while ( !( UCSR1A & (1<<UDRE1)) );
    1840:	15 9b       	sbis	0x02, 5	; 2
    1842:	fe cf       	rjmp	.-4      	; 0x1840 <uart_transmit>
	
	UDR1 = data;
    1844:	83 b9       	out	0x03, r24	; 3
    1846:	08 95       	ret

00001848 <uart_receive>:
}

//Function to receive data
unsigned char uart_receive(FILE* stream){
	while (!(UCSR1A & (1<<RXC1)));
    1848:	17 9b       	sbis	0x02, 7	; 2
    184a:	fe cf       	rjmp	.-4      	; 0x1848 <uart_receive>
	return UDR1;
    184c:	83 b1       	in	r24, 0x03	; 3
}
    184e:	08 95       	ret

00001850 <uart_init>:

void uart_init(){

	// Set baudrate to 9600

	UBRR1H |= (BAUD_PRESCALE >> 8);
    1850:	8c b7       	in	r24, 0x3c	; 60
    1852:	8c bf       	out	0x3c, r24	; 60
	UBRR1L |= BAUD_PRESCALE;
    1854:	80 b1       	in	r24, 0x00	; 0
    1856:	8f 61       	ori	r24, 0x1F	; 31
    1858:	80 b9       	out	0x00, r24	; 0
	// Enable TX rx
	UCSR1B = (1<<TXEN1)|(1<<RXEN1);
    185a:	88 e1       	ldi	r24, 0x18	; 24
    185c:	81 b9       	out	0x01, r24	; 1
	

	
	//uart_str = fdevopen(uart_transmit, uart_receive);
	stdout = stdin = &uart_str;
    185e:	85 eb       	ldi	r24, 0xB5	; 181
    1860:	92 e0       	ldi	r25, 0x02	; 2
    1862:	90 93 ef 03 	sts	0x03EF, r25
    1866:	80 93 ee 03 	sts	0x03EE, r24
    186a:	90 93 f1 03 	sts	0x03F1, r25
    186e:	80 93 f0 03 	sts	0x03F0, r24
    1872:	08 95       	ret

00001874 <fprintf>:
    1874:	a0 e0       	ldi	r26, 0x00	; 0
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e0 e4       	ldi	r30, 0x40	; 64
    187a:	fc e0       	ldi	r31, 0x0C	; 12
    187c:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__prologue_saves__+0x20>
    1880:	ae 01       	movw	r20, r28
    1882:	47 5f       	subi	r20, 0xF7	; 247
    1884:	5f 4f       	sbci	r21, 0xFF	; 255
    1886:	6f 81       	ldd	r22, Y+7	; 0x07
    1888:	78 85       	ldd	r23, Y+8	; 0x08
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	0e 94 b6 0c 	call	0x196c	; 0x196c <vfprintf>
    1892:	e2 e0       	ldi	r30, 0x02	; 2
    1894:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__epilogue_restores__+0x20>

00001898 <fputs>:
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	8b 01       	movw	r16, r22
    18a6:	db 01       	movw	r26, r22
    18a8:	13 96       	adiw	r26, 0x03	; 3
    18aa:	2c 91       	ld	r18, X
    18ac:	21 ff       	sbrs	r18, 1
    18ae:	16 c0       	rjmp	.+44     	; 0x18dc <fputs+0x44>
    18b0:	ec 01       	movw	r28, r24
    18b2:	e1 2c       	mov	r14, r1
    18b4:	f1 2c       	mov	r15, r1
    18b6:	89 91       	ld	r24, Y+
    18b8:	88 23       	and	r24, r24
    18ba:	71 f0       	breq	.+28     	; 0x18d8 <fputs+0x40>
    18bc:	d8 01       	movw	r26, r16
    18be:	18 96       	adiw	r26, 0x08	; 8
    18c0:	ed 91       	ld	r30, X+
    18c2:	fc 91       	ld	r31, X
    18c4:	19 97       	sbiw	r26, 0x09	; 9
    18c6:	b8 01       	movw	r22, r16
    18c8:	09 95       	icall
    18ca:	89 2b       	or	r24, r25
    18cc:	a1 f3       	breq	.-24     	; 0x18b6 <fputs+0x1e>
    18ce:	ee 24       	eor	r14, r14
    18d0:	ea 94       	dec	r14
    18d2:	ff 24       	eor	r15, r15
    18d4:	fa 94       	dec	r15
    18d6:	ef cf       	rjmp	.-34     	; 0x18b6 <fputs+0x1e>
    18d8:	c7 01       	movw	r24, r14
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <fputs+0x48>
    18dc:	8f ef       	ldi	r24, 0xFF	; 255
    18de:	9f ef       	ldi	r25, 0xFF	; 255
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	e6 e0       	ldi	r30, 0x06	; 6
    18e6:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__epilogue_restores__+0x18>

000018ea <printf>:
    18ea:	a0 e0       	ldi	r26, 0x00	; 0
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	eb e7       	ldi	r30, 0x7B	; 123
    18f0:	fc e0       	ldi	r31, 0x0C	; 12
    18f2:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__prologue_saves__+0x20>
    18f6:	fe 01       	movw	r30, r28
    18f8:	35 96       	adiw	r30, 0x05	; 5
    18fa:	61 91       	ld	r22, Z+
    18fc:	71 91       	ld	r23, Z+
    18fe:	af 01       	movw	r20, r30
    1900:	80 91 f0 03 	lds	r24, 0x03F0
    1904:	90 91 f1 03 	lds	r25, 0x03F1
    1908:	0e 94 b6 0c 	call	0x196c	; 0x196c <vfprintf>
    190c:	e2 e0       	ldi	r30, 0x02	; 2
    190e:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__epilogue_restores__+0x20>

00001912 <puts>:
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	e0 91 f0 03 	lds	r30, 0x03F0
    191e:	f0 91 f1 03 	lds	r31, 0x03F1
    1922:	23 81       	ldd	r18, Z+3	; 0x03
    1924:	21 ff       	sbrs	r18, 1
    1926:	1b c0       	rjmp	.+54     	; 0x195e <puts+0x4c>
    1928:	ec 01       	movw	r28, r24
    192a:	00 e0       	ldi	r16, 0x00	; 0
    192c:	10 e0       	ldi	r17, 0x00	; 0
    192e:	89 91       	ld	r24, Y+
    1930:	60 91 f0 03 	lds	r22, 0x03F0
    1934:	70 91 f1 03 	lds	r23, 0x03F1
    1938:	db 01       	movw	r26, r22
    193a:	18 96       	adiw	r26, 0x08	; 8
    193c:	ed 91       	ld	r30, X+
    193e:	fc 91       	ld	r31, X
    1940:	19 97       	sbiw	r26, 0x09	; 9
    1942:	88 23       	and	r24, r24
    1944:	31 f0       	breq	.+12     	; 0x1952 <puts+0x40>
    1946:	09 95       	icall
    1948:	89 2b       	or	r24, r25
    194a:	89 f3       	breq	.-30     	; 0x192e <puts+0x1c>
    194c:	0f ef       	ldi	r16, 0xFF	; 255
    194e:	1f ef       	ldi	r17, 0xFF	; 255
    1950:	ee cf       	rjmp	.-36     	; 0x192e <puts+0x1c>
    1952:	8a e0       	ldi	r24, 0x0A	; 10
    1954:	09 95       	icall
    1956:	89 2b       	or	r24, r25
    1958:	11 f4       	brne	.+4      	; 0x195e <puts+0x4c>
    195a:	c8 01       	movw	r24, r16
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <puts+0x50>
    195e:	8f ef       	ldi	r24, 0xFF	; 255
    1960:	9f ef       	ldi	r25, 0xFF	; 255
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	08 95       	ret

0000196c <vfprintf>:
    196c:	ac e0       	ldi	r26, 0x0C	; 12
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ec eb       	ldi	r30, 0xBC	; 188
    1972:	fc e0       	ldi	r31, 0x0C	; 12
    1974:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__prologue_saves__>
    1978:	7c 01       	movw	r14, r24
    197a:	6b 01       	movw	r12, r22
    197c:	8a 01       	movw	r16, r20
    197e:	fc 01       	movw	r30, r24
    1980:	17 82       	std	Z+7, r1	; 0x07
    1982:	16 82       	std	Z+6, r1	; 0x06
    1984:	83 81       	ldd	r24, Z+3	; 0x03
    1986:	81 ff       	sbrs	r24, 1
    1988:	bd c1       	rjmp	.+890    	; 0x1d04 <vfprintf+0x398>
    198a:	ce 01       	movw	r24, r28
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	4c 01       	movw	r8, r24
    1990:	f7 01       	movw	r30, r14
    1992:	93 81       	ldd	r25, Z+3	; 0x03
    1994:	f6 01       	movw	r30, r12
    1996:	93 fd       	sbrc	r25, 3
    1998:	85 91       	lpm	r24, Z+
    199a:	93 ff       	sbrs	r25, 3
    199c:	81 91       	ld	r24, Z+
    199e:	6f 01       	movw	r12, r30
    19a0:	88 23       	and	r24, r24
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <vfprintf+0x3a>
    19a4:	ab c1       	rjmp	.+854    	; 0x1cfc <vfprintf+0x390>
    19a6:	85 32       	cpi	r24, 0x25	; 37
    19a8:	39 f4       	brne	.+14     	; 0x19b8 <vfprintf+0x4c>
    19aa:	93 fd       	sbrc	r25, 3
    19ac:	85 91       	lpm	r24, Z+
    19ae:	93 ff       	sbrs	r25, 3
    19b0:	81 91       	ld	r24, Z+
    19b2:	6f 01       	movw	r12, r30
    19b4:	85 32       	cpi	r24, 0x25	; 37
    19b6:	29 f4       	brne	.+10     	; 0x19c2 <vfprintf+0x56>
    19b8:	b7 01       	movw	r22, r14
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <fputc>
    19c0:	e7 cf       	rjmp	.-50     	; 0x1990 <vfprintf+0x24>
    19c2:	51 2c       	mov	r5, r1
    19c4:	31 2c       	mov	r3, r1
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	20 32       	cpi	r18, 0x20	; 32
    19ca:	a0 f4       	brcc	.+40     	; 0x19f4 <vfprintf+0x88>
    19cc:	8b 32       	cpi	r24, 0x2B	; 43
    19ce:	69 f0       	breq	.+26     	; 0x19ea <vfprintf+0x7e>
    19d0:	30 f4       	brcc	.+12     	; 0x19de <vfprintf+0x72>
    19d2:	80 32       	cpi	r24, 0x20	; 32
    19d4:	59 f0       	breq	.+22     	; 0x19ec <vfprintf+0x80>
    19d6:	83 32       	cpi	r24, 0x23	; 35
    19d8:	69 f4       	brne	.+26     	; 0x19f4 <vfprintf+0x88>
    19da:	20 61       	ori	r18, 0x10	; 16
    19dc:	2c c0       	rjmp	.+88     	; 0x1a36 <vfprintf+0xca>
    19de:	8d 32       	cpi	r24, 0x2D	; 45
    19e0:	39 f0       	breq	.+14     	; 0x19f0 <vfprintf+0x84>
    19e2:	80 33       	cpi	r24, 0x30	; 48
    19e4:	39 f4       	brne	.+14     	; 0x19f4 <vfprintf+0x88>
    19e6:	21 60       	ori	r18, 0x01	; 1
    19e8:	26 c0       	rjmp	.+76     	; 0x1a36 <vfprintf+0xca>
    19ea:	22 60       	ori	r18, 0x02	; 2
    19ec:	24 60       	ori	r18, 0x04	; 4
    19ee:	23 c0       	rjmp	.+70     	; 0x1a36 <vfprintf+0xca>
    19f0:	28 60       	ori	r18, 0x08	; 8
    19f2:	21 c0       	rjmp	.+66     	; 0x1a36 <vfprintf+0xca>
    19f4:	27 fd       	sbrc	r18, 7
    19f6:	27 c0       	rjmp	.+78     	; 0x1a46 <vfprintf+0xda>
    19f8:	30 ed       	ldi	r19, 0xD0	; 208
    19fa:	38 0f       	add	r19, r24
    19fc:	3a 30       	cpi	r19, 0x0A	; 10
    19fe:	78 f4       	brcc	.+30     	; 0x1a1e <vfprintf+0xb2>
    1a00:	26 ff       	sbrs	r18, 6
    1a02:	06 c0       	rjmp	.+12     	; 0x1a10 <vfprintf+0xa4>
    1a04:	fa e0       	ldi	r31, 0x0A	; 10
    1a06:	5f 9e       	mul	r5, r31
    1a08:	30 0d       	add	r19, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	53 2e       	mov	r5, r19
    1a0e:	13 c0       	rjmp	.+38     	; 0x1a36 <vfprintf+0xca>
    1a10:	8a e0       	ldi	r24, 0x0A	; 10
    1a12:	38 9e       	mul	r3, r24
    1a14:	30 0d       	add	r19, r0
    1a16:	11 24       	eor	r1, r1
    1a18:	33 2e       	mov	r3, r19
    1a1a:	20 62       	ori	r18, 0x20	; 32
    1a1c:	0c c0       	rjmp	.+24     	; 0x1a36 <vfprintf+0xca>
    1a1e:	8e 32       	cpi	r24, 0x2E	; 46
    1a20:	21 f4       	brne	.+8      	; 0x1a2a <vfprintf+0xbe>
    1a22:	26 fd       	sbrc	r18, 6
    1a24:	6b c1       	rjmp	.+726    	; 0x1cfc <vfprintf+0x390>
    1a26:	20 64       	ori	r18, 0x40	; 64
    1a28:	06 c0       	rjmp	.+12     	; 0x1a36 <vfprintf+0xca>
    1a2a:	8c 36       	cpi	r24, 0x6C	; 108
    1a2c:	11 f4       	brne	.+4      	; 0x1a32 <vfprintf+0xc6>
    1a2e:	20 68       	ori	r18, 0x80	; 128
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <vfprintf+0xca>
    1a32:	88 36       	cpi	r24, 0x68	; 104
    1a34:	41 f4       	brne	.+16     	; 0x1a46 <vfprintf+0xda>
    1a36:	f6 01       	movw	r30, r12
    1a38:	93 fd       	sbrc	r25, 3
    1a3a:	85 91       	lpm	r24, Z+
    1a3c:	93 ff       	sbrs	r25, 3
    1a3e:	81 91       	ld	r24, Z+
    1a40:	6f 01       	movw	r12, r30
    1a42:	81 11       	cpse	r24, r1
    1a44:	c1 cf       	rjmp	.-126    	; 0x19c8 <vfprintf+0x5c>
    1a46:	98 2f       	mov	r25, r24
    1a48:	9f 7d       	andi	r25, 0xDF	; 223
    1a4a:	95 54       	subi	r25, 0x45	; 69
    1a4c:	93 30       	cpi	r25, 0x03	; 3
    1a4e:	28 f4       	brcc	.+10     	; 0x1a5a <vfprintf+0xee>
    1a50:	0c 5f       	subi	r16, 0xFC	; 252
    1a52:	1f 4f       	sbci	r17, 0xFF	; 255
    1a54:	ff e3       	ldi	r31, 0x3F	; 63
    1a56:	f9 83       	std	Y+1, r31	; 0x01
    1a58:	0d c0       	rjmp	.+26     	; 0x1a74 <vfprintf+0x108>
    1a5a:	83 36       	cpi	r24, 0x63	; 99
    1a5c:	31 f0       	breq	.+12     	; 0x1a6a <vfprintf+0xfe>
    1a5e:	83 37       	cpi	r24, 0x73	; 115
    1a60:	71 f0       	breq	.+28     	; 0x1a7e <vfprintf+0x112>
    1a62:	83 35       	cpi	r24, 0x53	; 83
    1a64:	09 f0       	breq	.+2      	; 0x1a68 <vfprintf+0xfc>
    1a66:	5b c0       	rjmp	.+182    	; 0x1b1e <vfprintf+0x1b2>
    1a68:	22 c0       	rjmp	.+68     	; 0x1aae <vfprintf+0x142>
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	80 81       	ld	r24, Z
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	0e 5f       	subi	r16, 0xFE	; 254
    1a72:	1f 4f       	sbci	r17, 0xFF	; 255
    1a74:	44 24       	eor	r4, r4
    1a76:	43 94       	inc	r4
    1a78:	51 2c       	mov	r5, r1
    1a7a:	54 01       	movw	r10, r8
    1a7c:	15 c0       	rjmp	.+42     	; 0x1aa8 <vfprintf+0x13c>
    1a7e:	38 01       	movw	r6, r16
    1a80:	f2 e0       	ldi	r31, 0x02	; 2
    1a82:	6f 0e       	add	r6, r31
    1a84:	71 1c       	adc	r7, r1
    1a86:	f8 01       	movw	r30, r16
    1a88:	a0 80       	ld	r10, Z
    1a8a:	b1 80       	ldd	r11, Z+1	; 0x01
    1a8c:	26 ff       	sbrs	r18, 6
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <vfprintf+0x12a>
    1a90:	65 2d       	mov	r22, r5
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <vfprintf+0x12e>
    1a96:	6f ef       	ldi	r22, 0xFF	; 255
    1a98:	7f ef       	ldi	r23, 0xFF	; 255
    1a9a:	c5 01       	movw	r24, r10
    1a9c:	2c 87       	std	Y+12, r18	; 0x0c
    1a9e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <strnlen>
    1aa2:	2c 01       	movw	r4, r24
    1aa4:	83 01       	movw	r16, r6
    1aa6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1aa8:	2f 77       	andi	r18, 0x7F	; 127
    1aaa:	22 2e       	mov	r2, r18
    1aac:	17 c0       	rjmp	.+46     	; 0x1adc <vfprintf+0x170>
    1aae:	38 01       	movw	r6, r16
    1ab0:	f2 e0       	ldi	r31, 0x02	; 2
    1ab2:	6f 0e       	add	r6, r31
    1ab4:	71 1c       	adc	r7, r1
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	a0 80       	ld	r10, Z
    1aba:	b1 80       	ldd	r11, Z+1	; 0x01
    1abc:	26 ff       	sbrs	r18, 6
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <vfprintf+0x15a>
    1ac0:	65 2d       	mov	r22, r5
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <vfprintf+0x15e>
    1ac6:	6f ef       	ldi	r22, 0xFF	; 255
    1ac8:	7f ef       	ldi	r23, 0xFF	; 255
    1aca:	c5 01       	movw	r24, r10
    1acc:	2c 87       	std	Y+12, r18	; 0x0c
    1ace:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <strnlen_P>
    1ad2:	2c 01       	movw	r4, r24
    1ad4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ad6:	20 68       	ori	r18, 0x80	; 128
    1ad8:	22 2e       	mov	r2, r18
    1ada:	83 01       	movw	r16, r6
    1adc:	23 fc       	sbrc	r2, 3
    1ade:	1b c0       	rjmp	.+54     	; 0x1b16 <vfprintf+0x1aa>
    1ae0:	83 2d       	mov	r24, r3
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	48 16       	cp	r4, r24
    1ae6:	59 06       	cpc	r5, r25
    1ae8:	b0 f4       	brcc	.+44     	; 0x1b16 <vfprintf+0x1aa>
    1aea:	b7 01       	movw	r22, r14
    1aec:	80 e2       	ldi	r24, 0x20	; 32
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <fputc>
    1af4:	3a 94       	dec	r3
    1af6:	f4 cf       	rjmp	.-24     	; 0x1ae0 <vfprintf+0x174>
    1af8:	f5 01       	movw	r30, r10
    1afa:	27 fc       	sbrc	r2, 7
    1afc:	85 91       	lpm	r24, Z+
    1afe:	27 fe       	sbrs	r2, 7
    1b00:	81 91       	ld	r24, Z+
    1b02:	5f 01       	movw	r10, r30
    1b04:	b7 01       	movw	r22, r14
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <fputc>
    1b0c:	31 10       	cpse	r3, r1
    1b0e:	3a 94       	dec	r3
    1b10:	f1 e0       	ldi	r31, 0x01	; 1
    1b12:	4f 1a       	sub	r4, r31
    1b14:	51 08       	sbc	r5, r1
    1b16:	41 14       	cp	r4, r1
    1b18:	51 04       	cpc	r5, r1
    1b1a:	71 f7       	brne	.-36     	; 0x1af8 <vfprintf+0x18c>
    1b1c:	e5 c0       	rjmp	.+458    	; 0x1ce8 <vfprintf+0x37c>
    1b1e:	84 36       	cpi	r24, 0x64	; 100
    1b20:	11 f0       	breq	.+4      	; 0x1b26 <vfprintf+0x1ba>
    1b22:	89 36       	cpi	r24, 0x69	; 105
    1b24:	39 f5       	brne	.+78     	; 0x1b74 <vfprintf+0x208>
    1b26:	f8 01       	movw	r30, r16
    1b28:	27 ff       	sbrs	r18, 7
    1b2a:	07 c0       	rjmp	.+14     	; 0x1b3a <vfprintf+0x1ce>
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	0c 5f       	subi	r16, 0xFC	; 252
    1b36:	1f 4f       	sbci	r17, 0xFF	; 255
    1b38:	08 c0       	rjmp	.+16     	; 0x1b4a <vfprintf+0x1de>
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	88 27       	eor	r24, r24
    1b40:	77 fd       	sbrc	r23, 7
    1b42:	80 95       	com	r24
    1b44:	98 2f       	mov	r25, r24
    1b46:	0e 5f       	subi	r16, 0xFE	; 254
    1b48:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4a:	2f 76       	andi	r18, 0x6F	; 111
    1b4c:	b2 2e       	mov	r11, r18
    1b4e:	97 ff       	sbrs	r25, 7
    1b50:	09 c0       	rjmp	.+18     	; 0x1b64 <vfprintf+0x1f8>
    1b52:	90 95       	com	r25
    1b54:	80 95       	com	r24
    1b56:	70 95       	com	r23
    1b58:	61 95       	neg	r22
    1b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b60:	20 68       	ori	r18, 0x80	; 128
    1b62:	b2 2e       	mov	r11, r18
    1b64:	2a e0       	ldi	r18, 0x0A	; 10
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	a4 01       	movw	r20, r8
    1b6a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__ultoa_invert>
    1b6e:	a8 2e       	mov	r10, r24
    1b70:	a8 18       	sub	r10, r8
    1b72:	44 c0       	rjmp	.+136    	; 0x1bfc <vfprintf+0x290>
    1b74:	85 37       	cpi	r24, 0x75	; 117
    1b76:	29 f4       	brne	.+10     	; 0x1b82 <vfprintf+0x216>
    1b78:	2f 7e       	andi	r18, 0xEF	; 239
    1b7a:	b2 2e       	mov	r11, r18
    1b7c:	2a e0       	ldi	r18, 0x0A	; 10
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	25 c0       	rjmp	.+74     	; 0x1bcc <vfprintf+0x260>
    1b82:	f2 2f       	mov	r31, r18
    1b84:	f9 7f       	andi	r31, 0xF9	; 249
    1b86:	bf 2e       	mov	r11, r31
    1b88:	8f 36       	cpi	r24, 0x6F	; 111
    1b8a:	c1 f0       	breq	.+48     	; 0x1bbc <vfprintf+0x250>
    1b8c:	18 f4       	brcc	.+6      	; 0x1b94 <vfprintf+0x228>
    1b8e:	88 35       	cpi	r24, 0x58	; 88
    1b90:	79 f0       	breq	.+30     	; 0x1bb0 <vfprintf+0x244>
    1b92:	b4 c0       	rjmp	.+360    	; 0x1cfc <vfprintf+0x390>
    1b94:	80 37       	cpi	r24, 0x70	; 112
    1b96:	19 f0       	breq	.+6      	; 0x1b9e <vfprintf+0x232>
    1b98:	88 37       	cpi	r24, 0x78	; 120
    1b9a:	21 f0       	breq	.+8      	; 0x1ba4 <vfprintf+0x238>
    1b9c:	af c0       	rjmp	.+350    	; 0x1cfc <vfprintf+0x390>
    1b9e:	2f 2f       	mov	r18, r31
    1ba0:	20 61       	ori	r18, 0x10	; 16
    1ba2:	b2 2e       	mov	r11, r18
    1ba4:	b4 fe       	sbrs	r11, 4
    1ba6:	0d c0       	rjmp	.+26     	; 0x1bc2 <vfprintf+0x256>
    1ba8:	8b 2d       	mov	r24, r11
    1baa:	84 60       	ori	r24, 0x04	; 4
    1bac:	b8 2e       	mov	r11, r24
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <vfprintf+0x256>
    1bb0:	24 ff       	sbrs	r18, 4
    1bb2:	0a c0       	rjmp	.+20     	; 0x1bc8 <vfprintf+0x25c>
    1bb4:	9f 2f       	mov	r25, r31
    1bb6:	96 60       	ori	r25, 0x06	; 6
    1bb8:	b9 2e       	mov	r11, r25
    1bba:	06 c0       	rjmp	.+12     	; 0x1bc8 <vfprintf+0x25c>
    1bbc:	28 e0       	ldi	r18, 0x08	; 8
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	05 c0       	rjmp	.+10     	; 0x1bcc <vfprintf+0x260>
    1bc2:	20 e1       	ldi	r18, 0x10	; 16
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <vfprintf+0x260>
    1bc8:	20 e1       	ldi	r18, 0x10	; 16
    1bca:	32 e0       	ldi	r19, 0x02	; 2
    1bcc:	f8 01       	movw	r30, r16
    1bce:	b7 fe       	sbrs	r11, 7
    1bd0:	07 c0       	rjmp	.+14     	; 0x1be0 <vfprintf+0x274>
    1bd2:	60 81       	ld	r22, Z
    1bd4:	71 81       	ldd	r23, Z+1	; 0x01
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	0c 5f       	subi	r16, 0xFC	; 252
    1bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bde:	06 c0       	rjmp	.+12     	; 0x1bec <vfprintf+0x280>
    1be0:	60 81       	ld	r22, Z
    1be2:	71 81       	ldd	r23, Z+1	; 0x01
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 5f       	subi	r16, 0xFE	; 254
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
    1bec:	a4 01       	movw	r20, r8
    1bee:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__ultoa_invert>
    1bf2:	a8 2e       	mov	r10, r24
    1bf4:	a8 18       	sub	r10, r8
    1bf6:	fb 2d       	mov	r31, r11
    1bf8:	ff 77       	andi	r31, 0x7F	; 127
    1bfa:	bf 2e       	mov	r11, r31
    1bfc:	b6 fe       	sbrs	r11, 6
    1bfe:	0b c0       	rjmp	.+22     	; 0x1c16 <vfprintf+0x2aa>
    1c00:	2b 2d       	mov	r18, r11
    1c02:	2e 7f       	andi	r18, 0xFE	; 254
    1c04:	a5 14       	cp	r10, r5
    1c06:	50 f4       	brcc	.+20     	; 0x1c1c <vfprintf+0x2b0>
    1c08:	b4 fe       	sbrs	r11, 4
    1c0a:	0a c0       	rjmp	.+20     	; 0x1c20 <vfprintf+0x2b4>
    1c0c:	b2 fc       	sbrc	r11, 2
    1c0e:	08 c0       	rjmp	.+16     	; 0x1c20 <vfprintf+0x2b4>
    1c10:	2b 2d       	mov	r18, r11
    1c12:	2e 7e       	andi	r18, 0xEE	; 238
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <vfprintf+0x2b4>
    1c16:	7a 2c       	mov	r7, r10
    1c18:	2b 2d       	mov	r18, r11
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <vfprintf+0x2b6>
    1c1c:	7a 2c       	mov	r7, r10
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <vfprintf+0x2b6>
    1c20:	75 2c       	mov	r7, r5
    1c22:	24 ff       	sbrs	r18, 4
    1c24:	0d c0       	rjmp	.+26     	; 0x1c40 <vfprintf+0x2d4>
    1c26:	fe 01       	movw	r30, r28
    1c28:	ea 0d       	add	r30, r10
    1c2a:	f1 1d       	adc	r31, r1
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 33       	cpi	r24, 0x30	; 48
    1c30:	11 f4       	brne	.+4      	; 0x1c36 <vfprintf+0x2ca>
    1c32:	29 7e       	andi	r18, 0xE9	; 233
    1c34:	09 c0       	rjmp	.+18     	; 0x1c48 <vfprintf+0x2dc>
    1c36:	22 ff       	sbrs	r18, 2
    1c38:	06 c0       	rjmp	.+12     	; 0x1c46 <vfprintf+0x2da>
    1c3a:	73 94       	inc	r7
    1c3c:	73 94       	inc	r7
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <vfprintf+0x2dc>
    1c40:	82 2f       	mov	r24, r18
    1c42:	86 78       	andi	r24, 0x86	; 134
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <vfprintf+0x2dc>
    1c46:	73 94       	inc	r7
    1c48:	23 fd       	sbrc	r18, 3
    1c4a:	13 c0       	rjmp	.+38     	; 0x1c72 <vfprintf+0x306>
    1c4c:	20 ff       	sbrs	r18, 0
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <vfprintf+0x2f0>
    1c50:	5a 2c       	mov	r5, r10
    1c52:	73 14       	cp	r7, r3
    1c54:	18 f4       	brcc	.+6      	; 0x1c5c <vfprintf+0x2f0>
    1c56:	53 0c       	add	r5, r3
    1c58:	57 18       	sub	r5, r7
    1c5a:	73 2c       	mov	r7, r3
    1c5c:	73 14       	cp	r7, r3
    1c5e:	68 f4       	brcc	.+26     	; 0x1c7a <vfprintf+0x30e>
    1c60:	b7 01       	movw	r22, r14
    1c62:	80 e2       	ldi	r24, 0x20	; 32
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	2c 87       	std	Y+12, r18	; 0x0c
    1c68:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <fputc>
    1c6c:	73 94       	inc	r7
    1c6e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c70:	f5 cf       	rjmp	.-22     	; 0x1c5c <vfprintf+0x2f0>
    1c72:	73 14       	cp	r7, r3
    1c74:	10 f4       	brcc	.+4      	; 0x1c7a <vfprintf+0x30e>
    1c76:	37 18       	sub	r3, r7
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <vfprintf+0x310>
    1c7a:	31 2c       	mov	r3, r1
    1c7c:	24 ff       	sbrs	r18, 4
    1c7e:	12 c0       	rjmp	.+36     	; 0x1ca4 <vfprintf+0x338>
    1c80:	b7 01       	movw	r22, r14
    1c82:	80 e3       	ldi	r24, 0x30	; 48
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	2c 87       	std	Y+12, r18	; 0x0c
    1c88:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <fputc>
    1c8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c8e:	22 ff       	sbrs	r18, 2
    1c90:	17 c0       	rjmp	.+46     	; 0x1cc0 <vfprintf+0x354>
    1c92:	21 ff       	sbrs	r18, 1
    1c94:	03 c0       	rjmp	.+6      	; 0x1c9c <vfprintf+0x330>
    1c96:	88 e5       	ldi	r24, 0x58	; 88
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <vfprintf+0x334>
    1c9c:	88 e7       	ldi	r24, 0x78	; 120
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	b7 01       	movw	r22, r14
    1ca2:	0c c0       	rjmp	.+24     	; 0x1cbc <vfprintf+0x350>
    1ca4:	82 2f       	mov	r24, r18
    1ca6:	86 78       	andi	r24, 0x86	; 134
    1ca8:	59 f0       	breq	.+22     	; 0x1cc0 <vfprintf+0x354>
    1caa:	21 fd       	sbrc	r18, 1
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <vfprintf+0x346>
    1cae:	80 e2       	ldi	r24, 0x20	; 32
    1cb0:	01 c0       	rjmp	.+2      	; 0x1cb4 <vfprintf+0x348>
    1cb2:	8b e2       	ldi	r24, 0x2B	; 43
    1cb4:	27 fd       	sbrc	r18, 7
    1cb6:	8d e2       	ldi	r24, 0x2D	; 45
    1cb8:	b7 01       	movw	r22, r14
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <fputc>
    1cc0:	a5 14       	cp	r10, r5
    1cc2:	38 f4       	brcc	.+14     	; 0x1cd2 <vfprintf+0x366>
    1cc4:	b7 01       	movw	r22, r14
    1cc6:	80 e3       	ldi	r24, 0x30	; 48
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <fputc>
    1cce:	5a 94       	dec	r5
    1cd0:	f7 cf       	rjmp	.-18     	; 0x1cc0 <vfprintf+0x354>
    1cd2:	aa 94       	dec	r10
    1cd4:	f4 01       	movw	r30, r8
    1cd6:	ea 0d       	add	r30, r10
    1cd8:	f1 1d       	adc	r31, r1
    1cda:	80 81       	ld	r24, Z
    1cdc:	b7 01       	movw	r22, r14
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <fputc>
    1ce4:	a1 10       	cpse	r10, r1
    1ce6:	f5 cf       	rjmp	.-22     	; 0x1cd2 <vfprintf+0x366>
    1ce8:	33 20       	and	r3, r3
    1cea:	09 f4       	brne	.+2      	; 0x1cee <vfprintf+0x382>
    1cec:	51 ce       	rjmp	.-862    	; 0x1990 <vfprintf+0x24>
    1cee:	b7 01       	movw	r22, r14
    1cf0:	80 e2       	ldi	r24, 0x20	; 32
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <fputc>
    1cf8:	3a 94       	dec	r3
    1cfa:	f6 cf       	rjmp	.-20     	; 0x1ce8 <vfprintf+0x37c>
    1cfc:	f7 01       	movw	r30, r14
    1cfe:	86 81       	ldd	r24, Z+6	; 0x06
    1d00:	97 81       	ldd	r25, Z+7	; 0x07
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <vfprintf+0x39c>
    1d04:	8f ef       	ldi	r24, 0xFF	; 255
    1d06:	9f ef       	ldi	r25, 0xFF	; 255
    1d08:	2c 96       	adiw	r28, 0x0c	; 12
    1d0a:	e2 e1       	ldi	r30, 0x12	; 18
    1d0c:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__epilogue_restores__>

00001d10 <__eerd_block_m162>:
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22

00001d14 <__eerd_blraw_m162>:
    1d14:	fc 01       	movw	r30, r24
    1d16:	e1 99       	sbic	0x1c, 1	; 28
    1d18:	fe cf       	rjmp	.-4      	; 0x1d16 <__eerd_blraw_m162+0x2>
    1d1a:	06 c0       	rjmp	.+12     	; 0x1d28 <__eerd_blraw_m162+0x14>
    1d1c:	ff bb       	out	0x1f, r31	; 31
    1d1e:	ee bb       	out	0x1e, r30	; 30
    1d20:	e0 9a       	sbi	0x1c, 0	; 28
    1d22:	31 96       	adiw	r30, 0x01	; 1
    1d24:	0d b2       	in	r0, 0x1d	; 29
    1d26:	0d 92       	st	X+, r0
    1d28:	41 50       	subi	r20, 0x01	; 1
    1d2a:	50 40       	sbci	r21, 0x00	; 0
    1d2c:	b8 f7       	brcc	.-18     	; 0x1d1c <__eerd_blraw_m162+0x8>
    1d2e:	08 95       	ret

00001d30 <__eeupd_block_m162>:
    1d30:	dc 01       	movw	r26, r24
    1d32:	a4 0f       	add	r26, r20
    1d34:	b5 1f       	adc	r27, r21
    1d36:	41 50       	subi	r20, 0x01	; 1
    1d38:	50 40       	sbci	r21, 0x00	; 0
    1d3a:	48 f0       	brcs	.+18     	; 0x1d4e <__eeupd_block_m162+0x1e>
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	84 0f       	add	r24, r20
    1d40:	95 1f       	adc	r25, r21
    1d42:	2e 91       	ld	r18, -X
    1d44:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__eeupd_r18_m162>
    1d48:	41 50       	subi	r20, 0x01	; 1
    1d4a:	50 40       	sbci	r21, 0x00	; 0
    1d4c:	d0 f7       	brcc	.-12     	; 0x1d42 <__eeupd_block_m162+0x12>
    1d4e:	08 95       	ret

00001d50 <__eeupd_byte_m162>:
    1d50:	26 2f       	mov	r18, r22

00001d52 <__eeupd_r18_m162>:
    1d52:	e1 99       	sbic	0x1c, 1	; 28
    1d54:	fe cf       	rjmp	.-4      	; 0x1d52 <__eeupd_r18_m162>
    1d56:	9f bb       	out	0x1f, r25	; 31
    1d58:	8e bb       	out	0x1e, r24	; 30
    1d5a:	e0 9a       	sbi	0x1c, 0	; 28
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	0d b2       	in	r0, 0x1d	; 29
    1d60:	02 16       	cp	r0, r18
    1d62:	31 f0       	breq	.+12     	; 0x1d70 <__eeupd_r18_m162+0x1e>
    1d64:	2d bb       	out	0x1d, r18	; 29
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	e2 9a       	sbi	0x1c, 2	; 28
    1d6c:	e1 9a       	sbi	0x1c, 1	; 28
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	08 95       	ret

00001d72 <strnlen_P>:
    1d72:	fc 01       	movw	r30, r24
    1d74:	05 90       	lpm	r0, Z+
    1d76:	61 50       	subi	r22, 0x01	; 1
    1d78:	70 40       	sbci	r23, 0x00	; 0
    1d7a:	01 10       	cpse	r0, r1
    1d7c:	d8 f7       	brcc	.-10     	; 0x1d74 <strnlen_P+0x2>
    1d7e:	80 95       	com	r24
    1d80:	90 95       	com	r25
    1d82:	8e 0f       	add	r24, r30
    1d84:	9f 1f       	adc	r25, r31
    1d86:	08 95       	ret

00001d88 <strnlen>:
    1d88:	fc 01       	movw	r30, r24
    1d8a:	61 50       	subi	r22, 0x01	; 1
    1d8c:	70 40       	sbci	r23, 0x00	; 0
    1d8e:	01 90       	ld	r0, Z+
    1d90:	01 10       	cpse	r0, r1
    1d92:	d8 f7       	brcc	.-10     	; 0x1d8a <strnlen+0x2>
    1d94:	80 95       	com	r24
    1d96:	90 95       	com	r25
    1d98:	8e 0f       	add	r24, r30
    1d9a:	9f 1f       	adc	r25, r31
    1d9c:	08 95       	ret

00001d9e <fputc>:
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	18 2f       	mov	r17, r24
    1da8:	09 2f       	mov	r16, r25
    1daa:	eb 01       	movw	r28, r22
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	81 fd       	sbrc	r24, 1
    1db0:	03 c0       	rjmp	.+6      	; 0x1db8 <fputc+0x1a>
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	9f ef       	ldi	r25, 0xFF	; 255
    1db6:	20 c0       	rjmp	.+64     	; 0x1df8 <fputc+0x5a>
    1db8:	82 ff       	sbrs	r24, 2
    1dba:	10 c0       	rjmp	.+32     	; 0x1ddc <fputc+0x3e>
    1dbc:	4e 81       	ldd	r20, Y+6	; 0x06
    1dbe:	5f 81       	ldd	r21, Y+7	; 0x07
    1dc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc4:	42 17       	cp	r20, r18
    1dc6:	53 07       	cpc	r21, r19
    1dc8:	7c f4       	brge	.+30     	; 0x1de8 <fputc+0x4a>
    1dca:	e8 81       	ld	r30, Y
    1dcc:	f9 81       	ldd	r31, Y+1	; 0x01
    1dce:	9f 01       	movw	r18, r30
    1dd0:	2f 5f       	subi	r18, 0xFF	; 255
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	39 83       	std	Y+1, r19	; 0x01
    1dd6:	28 83       	st	Y, r18
    1dd8:	10 83       	st	Z, r17
    1dda:	06 c0       	rjmp	.+12     	; 0x1de8 <fputc+0x4a>
    1ddc:	e8 85       	ldd	r30, Y+8	; 0x08
    1dde:	f9 85       	ldd	r31, Y+9	; 0x09
    1de0:	81 2f       	mov	r24, r17
    1de2:	09 95       	icall
    1de4:	89 2b       	or	r24, r25
    1de6:	29 f7       	brne	.-54     	; 0x1db2 <fputc+0x14>
    1de8:	2e 81       	ldd	r18, Y+6	; 0x06
    1dea:	3f 81       	ldd	r19, Y+7	; 0x07
    1dec:	2f 5f       	subi	r18, 0xFF	; 255
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    1df0:	3f 83       	std	Y+7, r19	; 0x07
    1df2:	2e 83       	std	Y+6, r18	; 0x06
    1df4:	81 2f       	mov	r24, r17
    1df6:	90 2f       	mov	r25, r16
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	08 95       	ret

00001e02 <__ultoa_invert>:
    1e02:	fa 01       	movw	r30, r20
    1e04:	aa 27       	eor	r26, r26
    1e06:	28 30       	cpi	r18, 0x08	; 8
    1e08:	51 f1       	breq	.+84     	; 0x1e5e <__ultoa_invert+0x5c>
    1e0a:	20 31       	cpi	r18, 0x10	; 16
    1e0c:	81 f1       	breq	.+96     	; 0x1e6e <__ultoa_invert+0x6c>
    1e0e:	e8 94       	clt
    1e10:	6f 93       	push	r22
    1e12:	6e 7f       	andi	r22, 0xFE	; 254
    1e14:	6e 5f       	subi	r22, 0xFE	; 254
    1e16:	7f 4f       	sbci	r23, 0xFF	; 255
    1e18:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	af 4f       	sbci	r26, 0xFF	; 255
    1e1e:	b1 e0       	ldi	r27, 0x01	; 1
    1e20:	3e d0       	rcall	.+124    	; 0x1e9e <__ultoa_invert+0x9c>
    1e22:	b4 e0       	ldi	r27, 0x04	; 4
    1e24:	3c d0       	rcall	.+120    	; 0x1e9e <__ultoa_invert+0x9c>
    1e26:	67 0f       	add	r22, r23
    1e28:	78 1f       	adc	r23, r24
    1e2a:	89 1f       	adc	r24, r25
    1e2c:	9a 1f       	adc	r25, r26
    1e2e:	a1 1d       	adc	r26, r1
    1e30:	68 0f       	add	r22, r24
    1e32:	79 1f       	adc	r23, r25
    1e34:	8a 1f       	adc	r24, r26
    1e36:	91 1d       	adc	r25, r1
    1e38:	a1 1d       	adc	r26, r1
    1e3a:	6a 0f       	add	r22, r26
    1e3c:	71 1d       	adc	r23, r1
    1e3e:	81 1d       	adc	r24, r1
    1e40:	91 1d       	adc	r25, r1
    1e42:	a1 1d       	adc	r26, r1
    1e44:	20 d0       	rcall	.+64     	; 0x1e86 <__ultoa_invert+0x84>
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <__ultoa_invert+0x48>
    1e48:	68 94       	set
    1e4a:	3f 91       	pop	r19
    1e4c:	2a e0       	ldi	r18, 0x0A	; 10
    1e4e:	26 9f       	mul	r18, r22
    1e50:	11 24       	eor	r1, r1
    1e52:	30 19       	sub	r19, r0
    1e54:	30 5d       	subi	r19, 0xD0	; 208
    1e56:	31 93       	st	Z+, r19
    1e58:	de f6       	brtc	.-74     	; 0x1e10 <__ultoa_invert+0xe>
    1e5a:	cf 01       	movw	r24, r30
    1e5c:	08 95       	ret
    1e5e:	46 2f       	mov	r20, r22
    1e60:	47 70       	andi	r20, 0x07	; 7
    1e62:	40 5d       	subi	r20, 0xD0	; 208
    1e64:	41 93       	st	Z+, r20
    1e66:	b3 e0       	ldi	r27, 0x03	; 3
    1e68:	0f d0       	rcall	.+30     	; 0x1e88 <__ultoa_invert+0x86>
    1e6a:	c9 f7       	brne	.-14     	; 0x1e5e <__ultoa_invert+0x5c>
    1e6c:	f6 cf       	rjmp	.-20     	; 0x1e5a <__ultoa_invert+0x58>
    1e6e:	46 2f       	mov	r20, r22
    1e70:	4f 70       	andi	r20, 0x0F	; 15
    1e72:	40 5d       	subi	r20, 0xD0	; 208
    1e74:	4a 33       	cpi	r20, 0x3A	; 58
    1e76:	18 f0       	brcs	.+6      	; 0x1e7e <__ultoa_invert+0x7c>
    1e78:	49 5d       	subi	r20, 0xD9	; 217
    1e7a:	31 fd       	sbrc	r19, 1
    1e7c:	40 52       	subi	r20, 0x20	; 32
    1e7e:	41 93       	st	Z+, r20
    1e80:	02 d0       	rcall	.+4      	; 0x1e86 <__ultoa_invert+0x84>
    1e82:	a9 f7       	brne	.-22     	; 0x1e6e <__ultoa_invert+0x6c>
    1e84:	ea cf       	rjmp	.-44     	; 0x1e5a <__ultoa_invert+0x58>
    1e86:	b4 e0       	ldi	r27, 0x04	; 4
    1e88:	a6 95       	lsr	r26
    1e8a:	97 95       	ror	r25
    1e8c:	87 95       	ror	r24
    1e8e:	77 95       	ror	r23
    1e90:	67 95       	ror	r22
    1e92:	ba 95       	dec	r27
    1e94:	c9 f7       	brne	.-14     	; 0x1e88 <__ultoa_invert+0x86>
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	61 05       	cpc	r22, r1
    1e9a:	71 05       	cpc	r23, r1
    1e9c:	08 95       	ret
    1e9e:	9b 01       	movw	r18, r22
    1ea0:	ac 01       	movw	r20, r24
    1ea2:	0a 2e       	mov	r0, r26
    1ea4:	06 94       	lsr	r0
    1ea6:	57 95       	ror	r21
    1ea8:	47 95       	ror	r20
    1eaa:	37 95       	ror	r19
    1eac:	27 95       	ror	r18
    1eae:	ba 95       	dec	r27
    1eb0:	c9 f7       	brne	.-14     	; 0x1ea4 <__ultoa_invert+0xa2>
    1eb2:	62 0f       	add	r22, r18
    1eb4:	73 1f       	adc	r23, r19
    1eb6:	84 1f       	adc	r24, r20
    1eb8:	95 1f       	adc	r25, r21
    1eba:	a0 1d       	adc	r26, r0
    1ebc:	08 95       	ret

00001ebe <__prologue_saves__>:
    1ebe:	2f 92       	push	r2
    1ec0:	3f 92       	push	r3
    1ec2:	4f 92       	push	r4
    1ec4:	5f 92       	push	r5
    1ec6:	6f 92       	push	r6
    1ec8:	7f 92       	push	r7
    1eca:	8f 92       	push	r8
    1ecc:	9f 92       	push	r9
    1ece:	af 92       	push	r10
    1ed0:	bf 92       	push	r11
    1ed2:	cf 92       	push	r12
    1ed4:	df 92       	push	r13
    1ed6:	ef 92       	push	r14
    1ed8:	ff 92       	push	r15
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	ca 1b       	sub	r28, r26
    1ee8:	db 0b       	sbc	r29, r27
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	09 94       	ijmp

00001ef6 <__epilogue_restores__>:
    1ef6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ef8:	39 88       	ldd	r3, Y+17	; 0x11
    1efa:	48 88       	ldd	r4, Y+16	; 0x10
    1efc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1efe:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f00:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f02:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f04:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f06:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f08:	b9 84       	ldd	r11, Y+9	; 0x09
    1f0a:	c8 84       	ldd	r12, Y+8	; 0x08
    1f0c:	df 80       	ldd	r13, Y+7	; 0x07
    1f0e:	ee 80       	ldd	r14, Y+6	; 0x06
    1f10:	fd 80       	ldd	r15, Y+5	; 0x05
    1f12:	0c 81       	ldd	r16, Y+4	; 0x04
    1f14:	1b 81       	ldd	r17, Y+3	; 0x03
    1f16:	aa 81       	ldd	r26, Y+2	; 0x02
    1f18:	b9 81       	ldd	r27, Y+1	; 0x01
    1f1a:	ce 0f       	add	r28, r30
    1f1c:	d1 1d       	adc	r29, r1
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	ed 01       	movw	r28, r26
    1f2a:	08 95       	ret

00001f2c <_exit>:
    1f2c:	f8 94       	cli

00001f2e <__stop_program>:
    1f2e:	ff cf       	rjmp	.-2      	; 0x1f2e <__stop_program>
