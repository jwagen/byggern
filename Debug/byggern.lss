
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000a68  00000afc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800140  00800140  00000b3c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001883  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b38  00000000  00000000  00002613  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a16  00000000  00000000  0000314b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000434  00000000  00000000  00003b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e6  00000000  00000000  00003f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c49  00000000  00000000  0000457e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  000051c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e6       	ldi	r30, 0x68	; 104
  84:	fa e0       	ldi	r31, 0x0A	; 10
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 34       	cpi	r26, 0x40	; 64
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e4       	ldi	r26, 0x40	; 64
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 34       	cpi	r26, 0x48	; 72
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  a6:	0c 94 32 05 	jmp	0xa64	; 0xa64 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
const uint8_t ADC_mux_channel1 = 0x4;
const uint8_t ADC_mux_channel2 = 0x5;
const uint8_t ADC_mux_channel3 = 0x6;
const uint8_t ADC_mux_channel4 = 0x7;

void adc_init(void){
  ae:	08 95       	ret

000000b0 <button_init>:
#include "button.h"

#define BUTTON_NUMBER 3

void button_init(void){
	DDRD &= ~((1<<PD1) | (1<<PD0));	//Set touch buttons as input
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	8c 7f       	andi	r24, 0xFC	; 252
  b4:	81 bb       	out	0x11, r24	; 17
	
	DDRE &= ~((1<<PE0));			//Set joystick button as input
  b6:	30 98       	cbi	0x06, 0	; 6
	PORTE |= (1<<PE0);				//Enable pullup
  b8:	38 9a       	sbi	0x07, 0	; 7
  ba:	08 95       	ret

000000bc <can_init>:
#include "mcp2515.h"
#include "mcp2515_registers.h"


void can_init(){
	mcp2515_init();
  bc:	0e 94 8d 01 	call	0x31a	; 0x31a <mcp2515_init>
	mcp2515_write(CANCTRL,MODE_LOOPBACK);
  c0:	60 e4       	ldi	r22, 0x40	; 64
  c2:	8f e0       	ldi	r24, 0x0F	; 15
  c4:	0e 94 a3 01 	call	0x346	; 0x346 <mcp2515_write>
	
	//Enable interrupt on received message in both buffers
	mcp2515_write(CANINTE, (1 <<RX1IE) | (1<<RX0IE));
  c8:	66 e0       	ldi	r22, 0x06	; 6
  ca:	8b e2       	ldi	r24, 0x2B	; 43
  cc:	0e 94 a3 01 	call	0x346	; 0x346 <mcp2515_write>
  d0:	08 95       	ret

000000d2 <can_transmit>:
}

void can_transmit(can_message_t message){
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	2b 97       	sbiw	r28, 0x0b	; 11
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
  ee:	e9 82       	std	Y+1, r14	; 0x01
  f0:	fa 82       	std	Y+2, r15	; 0x02
  f2:	0b 83       	std	Y+3, r16	; 0x03
  f4:	1c 83       	std	Y+4, r17	; 0x04
  f6:	2d 83       	std	Y+5, r18	; 0x05
  f8:	3e 83       	std	Y+6, r19	; 0x06
  fa:	4f 83       	std	Y+7, r20	; 0x07
  fc:	58 87       	std	Y+8, r21	; 0x08
  fe:	69 87       	std	Y+9, r22	; 0x09
 100:	7a 87       	std	Y+10, r23	; 0x0a
 102:	8b 87       	std	Y+11, r24	; 0x0b
 104:	e9 80       	ldd	r14, Y+1	; 0x01
 106:	fa 80       	ldd	r15, Y+2	; 0x02
	//Use buffer 0
	
	//Load ID
	mcp2515_write(TXB0SIDH, (0xff & (message.id >> 3))); //load high
 108:	b7 01       	movw	r22, r14
 10a:	76 95       	lsr	r23
 10c:	67 95       	ror	r22
 10e:	76 95       	lsr	r23
 110:	67 95       	ror	r22
 112:	76 95       	lsr	r23
 114:	67 95       	ror	r22
 116:	81 e3       	ldi	r24, 0x31	; 49
 118:	0e 94 a3 01 	call	0x346	; 0x346 <mcp2515_write>
	mcp2515_write(TXB0SIDL, 0xe0 & (message.id << 5));
 11c:	6e 2d       	mov	r22, r14
 11e:	62 95       	swap	r22
 120:	66 0f       	add	r22, r22
 122:	60 7e       	andi	r22, 0xE0	; 224
 124:	82 e3       	ldi	r24, 0x32	; 50
 126:	0e 94 a3 01 	call	0x346	; 0x346 <mcp2515_write>
	
	//Set length
	mcp2515_write(TXB0DLC, 0x0f & message.length);
 12a:	60 2f       	mov	r22, r16
 12c:	6f 70       	andi	r22, 0x0F	; 15
 12e:	85 e3       	ldi	r24, 0x35	; 53
 130:	0e 94 a3 01 	call	0x346	; 0x346 <mcp2515_write>
	
	//Load data
	for (uint8_t i = 0; i < message.length; i++){
 134:	00 23       	and	r16, r16
 136:	79 f0       	breq	.+30     	; 0x156 <can_transmit+0x84>
 138:	7e 01       	movw	r14, r28
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	e8 0e       	add	r14, r24
 13e:	f1 1c       	adc	r15, r1
 140:	0a 5c       	subi	r16, 0xCA	; 202
 142:	16 e3       	ldi	r17, 0x36	; 54
		mcp2515_write(TXB0D0+i, message.data[i]);
 144:	f7 01       	movw	r30, r14
 146:	61 91       	ld	r22, Z+
 148:	7f 01       	movw	r14, r30
 14a:	81 2f       	mov	r24, r17
 14c:	0e 94 a3 01 	call	0x346	; 0x346 <mcp2515_write>
 150:	1f 5f       	subi	r17, 0xFF	; 255
	
	//Set length
	mcp2515_write(TXB0DLC, 0x0f & message.length);
	
	//Load data
	for (uint8_t i = 0; i < message.length; i++){
 152:	10 13       	cpse	r17, r16
 154:	f7 cf       	rjmp	.-18     	; 0x144 <can_transmit+0x72>
		mcp2515_write(TXB0D0+i, message.data[i]);
	}
	
	//Send request to send
	mcp2515_rts(1);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 b7 01 	call	0x36e	; 0x36e <mcp2515_rts>
	
}
 15c:	2b 96       	adiw	r28, 0x0b	; 11
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	ff 90       	pop	r15
 172:	ef 90       	pop	r14
 174:	08 95       	ret

00000176 <can_recive>:

can_message_t can_recive(){
 176:	9f 92       	push	r9
 178:	af 92       	push	r10
 17a:	bf 92       	push	r11
 17c:	cf 92       	push	r12
 17e:	df 92       	push	r13
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	2b 97       	sbiw	r28, 0x0b	; 11
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
 19c:	7c 01       	movw	r14, r24
	can_message_t message;
	//Read id
	message.id = mcp2515_read(RXB0SIDH) << 3;
 19e:	81 e6       	ldi	r24, 0x61	; 97
 1a0:	0e 94 90 01 	call	0x320	; 0x320 <mcp2515_read>
 1a4:	c8 2e       	mov	r12, r24
	message.id |= (7 & (mcp2515_read(RXB0SIDL) >> 5)) ;
 1a6:	82 e6       	ldi	r24, 0x62	; 98
 1a8:	0e 94 90 01 	call	0x320	; 0x320 <mcp2515_read>
}

can_message_t can_recive(){
	can_message_t message;
	//Read id
	message.id = mcp2515_read(RXB0SIDH) << 3;
 1ac:	d1 2c       	mov	r13, r1
 1ae:	cc 0c       	add	r12, r12
 1b0:	dd 1c       	adc	r13, r13
 1b2:	cc 0c       	add	r12, r12
 1b4:	dd 1c       	adc	r13, r13
 1b6:	cc 0c       	add	r12, r12
 1b8:	dd 1c       	adc	r13, r13
	message.id |= (7 & (mcp2515_read(RXB0SIDL) >> 5)) ;
 1ba:	82 95       	swap	r24
 1bc:	86 95       	lsr	r24
 1be:	87 70       	andi	r24, 0x07	; 7
 1c0:	c8 2a       	or	r12, r24
	
	//Read length
	message.length = 0x0f & mcp2515_read(RXB0DLC);
 1c2:	85 e6       	ldi	r24, 0x65	; 101
 1c4:	0e 94 90 01 	call	0x320	; 0x320 <mcp2515_read>
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	98 2e       	mov	r9, r24
	
	//Read data
	for (uint8_t i = 0; i < message.length; i++){
 1cc:	a9 f0       	breq	.+42     	; 0x1f8 <can_recive+0x82>
 1ce:	8e 01       	movw	r16, r28
 1d0:	0c 5f       	subi	r16, 0xFC	; 252
 1d2:	1f 4f       	sbci	r17, 0xFF	; 255
 1d4:	0f 2e       	mov	r0, r31
 1d6:	f6 e6       	ldi	r31, 0x66	; 102
 1d8:	af 2e       	mov	r10, r31
 1da:	f0 2d       	mov	r31, r0
 1dc:	a8 0e       	add	r10, r24
 1de:	0f 2e       	mov	r0, r31
 1e0:	f6 e6       	ldi	r31, 0x66	; 102
 1e2:	bf 2e       	mov	r11, r31
 1e4:	f0 2d       	mov	r31, r0
		message.data[i] = mcp2515_read(RXB0D0+i);
 1e6:	8b 2d       	mov	r24, r11
 1e8:	0e 94 90 01 	call	0x320	; 0x320 <mcp2515_read>
 1ec:	f8 01       	movw	r30, r16
 1ee:	81 93       	st	Z+, r24
 1f0:	8f 01       	movw	r16, r30
 1f2:	b3 94       	inc	r11
	
	//Read length
	message.length = 0x0f & mcp2515_read(RXB0DLC);
	
	//Read data
	for (uint8_t i = 0; i < message.length; i++){
 1f4:	ba 10       	cpse	r11, r10
 1f6:	f7 cf       	rjmp	.-18     	; 0x1e6 <can_recive+0x70>
		message.data[i] = mcp2515_read(RXB0D0+i);
	}
	
	//Clear interrupt flags
	mcp2515_write(CANINTF, 0x00);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	8c e2       	ldi	r24, 0x2C	; 44
 1fc:	0e 94 a3 01 	call	0x346	; 0x346 <mcp2515_write>
	
	return message;
 200:	da 82       	std	Y+2, r13	; 0x02
 202:	c9 82       	std	Y+1, r12	; 0x01
 204:	9b 82       	std	Y+3, r9	; 0x03
 206:	8b e0       	ldi	r24, 0x0B	; 11
 208:	fe 01       	movw	r30, r28
 20a:	31 96       	adiw	r30, 0x01	; 1
 20c:	d7 01       	movw	r26, r14
 20e:	01 90       	ld	r0, Z+
 210:	0d 92       	st	X+, r0
 212:	8a 95       	dec	r24
 214:	e1 f7       	brne	.-8      	; 0x20e <can_recive+0x98>
	
	
 216:	c7 01       	movw	r24, r14
 218:	2b 96       	adiw	r28, 0x0b	; 11
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	df 90       	pop	r13
 232:	cf 90       	pop	r12
 234:	bf 90       	pop	r11
 236:	af 90       	pop	r10
 238:	9f 90       	pop	r9
 23a:	08 95       	ret

0000023c <main>:




int main(void)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	66 97       	sbiw	r28, 0x16	; 22
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
	
	sram_init();
 250:	0e 94 21 02 	call	0x442	; 0x442 <sram_init>
	adc_init();
 254:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	button_init();
 258:	0e 94 58 00 	call	0xb0	; 0xb0 <button_init>
	oled_init();
 25c:	0e 94 df 01 	call	0x3be	; 0x3be <oled_init>
	uart_init();
 260:	0e 94 30 02 	call	0x460	; 0x460 <uart_init>
	can_init();
 264:	0e 94 5e 00 	call	0xbc	; 0xbc <can_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	8f e7       	ldi	r24, 0x7F	; 127
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x32>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x3c>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x3e>
	
	

	_delay_ms(100);

	printf("Init done\n");
 27a:	8e e0       	ldi	r24, 0x0E	; 14
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 88 02 	call	0x510	; 0x510 <puts>
	


	can_message_t m = {
 282:	fe 01       	movw	r30, r28
 284:	31 96       	adiw	r30, 0x01	; 1
 286:	8b e0       	ldi	r24, 0x0B	; 11
 288:	df 01       	movw	r26, r30
 28a:	1d 92       	st	X+, r1
 28c:	8a 95       	dec	r24
 28e:	e9 f7       	brne	.-6      	; 0x28a <main+0x4e>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	9a 83       	std	Y+2, r25	; 0x02
 296:	89 83       	std	Y+1, r24	; 0x01
 298:	8b 83       	std	Y+3, r24	; 0x03
		.data[0] = 1,
		.length = 1,
		.id = 1,
			
		};
	uint8_t i = 0;
 29a:	91 2c       	mov	r9, r1
		m.data[0] = i;
		can_transmit(m);
		_delay_ms(100);
		
		can_message_t r = can_recive();
		printf("Sendt message = %d\n", m.data[0]);
 29c:	0f 2e       	mov	r0, r31
 29e:	f8 e1       	ldi	r31, 0x18	; 24
 2a0:	af 2e       	mov	r10, r31
 2a2:	f1 e0       	ldi	r31, 0x01	; 1
 2a4:	bf 2e       	mov	r11, r31
 2a6:	f0 2d       	mov	r31, r0
		printf("Recivede data = %d\n", r.data[0]);
 2a8:	0f 2e       	mov	r0, r31
 2aa:	fc e2       	ldi	r31, 0x2C	; 44
 2ac:	cf 2e       	mov	r12, r31
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	df 2e       	mov	r13, r31
 2b2:	f0 2d       	mov	r31, r0
		};
	uint8_t i = 0;
	
	while(1){
		m.data[0] = i;
		can_transmit(m);
 2b4:	9c 82       	std	Y+4, r9	; 0x04
 2b6:	e9 80       	ldd	r14, Y+1	; 0x01
 2b8:	fa 80       	ldd	r15, Y+2	; 0x02
 2ba:	0b 81       	ldd	r16, Y+3	; 0x03
 2bc:	19 2d       	mov	r17, r9
 2be:	2d 81       	ldd	r18, Y+5	; 0x05
 2c0:	3e 81       	ldd	r19, Y+6	; 0x06
 2c2:	4f 81       	ldd	r20, Y+7	; 0x07
 2c4:	58 85       	ldd	r21, Y+8	; 0x08
 2c6:	69 85       	ldd	r22, Y+9	; 0x09
 2c8:	7a 85       	ldd	r23, Y+10	; 0x0a
 2ca:	8b 85       	ldd	r24, Y+11	; 0x0b
 2cc:	0e 94 69 00 	call	0xd2	; 0xd2 <can_transmit>
 2d0:	bf ef       	ldi	r27, 0xFF	; 255
 2d2:	2f e7       	ldi	r18, 0x7F	; 127
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	b1 50       	subi	r27, 0x01	; 1
 2d8:	20 40       	sbci	r18, 0x00	; 0
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x9a>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0xa4>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0xa6>
		_delay_ms(100);
		
		can_message_t r = can_recive();
 2e2:	ce 01       	movw	r24, r28
 2e4:	0c 96       	adiw	r24, 0x0c	; 12
 2e6:	0e 94 bb 00 	call	0x176	; 0x176 <can_recive>
		printf("Sendt message = %d\n", m.data[0]);
 2ea:	1f 92       	push	r1
 2ec:	9f 92       	push	r9
 2ee:	bf 92       	push	r11
 2f0:	af 92       	push	r10
 2f2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <printf>
		printf("Recivede data = %d\n", r.data[0]);
 2f6:	8f 85       	ldd	r24, Y+15	; 0x0f
 2f8:	1f 92       	push	r1
 2fa:	8f 93       	push	r24
 2fc:	df 92       	push	r13
 2fe:	cf 92       	push	r12
 300:	0e 94 74 02 	call	0x4e8	; 0x4e8 <printf>
		//printf("Test");
		i++;
 304:	93 94       	inc	r9
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	de bf       	out	0x3e, r29	; 62
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	cd bf       	out	0x3d, r28	; 61
 310:	d1 cf       	rjmp	.-94     	; 0x2b4 <main+0x78>

00000312 <mcp2515_disable>:
#include "mcp2515.h"
#include "spi.h"

void mcp2515_disable(){
	//Set CS high
	PORTB |= (1<<PB4);
 312:	c4 9a       	sbi	0x18, 4	; 24
 314:	08 95       	ret

00000316 <mcp2515_enable>:
}

void mcp2515_enable(){
	//Set CS low
	PORTB &= ~(1<<PB4);	
 316:	c4 98       	cbi	0x18, 4	; 24
 318:	08 95       	ret

0000031a <mcp2515_init>:
}

void mcp2515_init(){
	spi_init();
 31a:	0e 94 13 02 	call	0x426	; 0x426 <spi_init>
 31e:	08 95       	ret

00000320 <mcp2515_read>:
}

//Read data from register beginning at selected address.
uint8_t mcp2515_read(uint8_t address){
 320:	cf 93       	push	r28
 322:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	mcp2515_enable();
 324:	0e 94 8b 01 	call	0x316	; 0x316 <mcp2515_enable>
	spi_transmit(0x03);
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	0e 94 1a 02 	call	0x434	; 0x434 <spi_transmit>
	spi_transmit(address);
 32e:	8c 2f       	mov	r24, r28
 330:	0e 94 1a 02 	call	0x434	; 0x434 <spi_transmit>
	
	//recive data
	data = spi_transmit(0);
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 1a 02 	call	0x434	; 0x434 <spi_transmit>
 33a:	c8 2f       	mov	r28, r24
	mcp2515_disable();	
 33c:	0e 94 89 01 	call	0x312	; 0x312 <mcp2515_disable>
	return data;
}
 340:	8c 2f       	mov	r24, r28
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <mcp2515_write>:

//Write data to register beginning at selected address.
void mcp2515_write(uint8_t address, uint8_t data){
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	d8 2f       	mov	r29, r24
 34c:	c6 2f       	mov	r28, r22
	mcp2515_enable();
 34e:	0e 94 8b 01 	call	0x316	; 0x316 <mcp2515_enable>
	spi_transmit(0x02);
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 1a 02 	call	0x434	; 0x434 <spi_transmit>
	spi_transmit(address);
 358:	8d 2f       	mov	r24, r29
 35a:	0e 94 1a 02 	call	0x434	; 0x434 <spi_transmit>
	
	//send data
	spi_transmit(data);
 35e:	8c 2f       	mov	r24, r28
 360:	0e 94 1a 02 	call	0x434	; 0x434 <spi_transmit>
	mcp2515_disable();
 364:	0e 94 89 01 	call	0x312	; 0x312 <mcp2515_disable>
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <mcp2515_rts>:

//Instructs controller to begin message transmission sequence for
//any of the transmit buffers
void mcp2515_rts(uint8_t registers){
 36e:	cf 93       	push	r28
 370:	c8 2f       	mov	r28, r24
	mcp2515_enable();
 372:	0e 94 8b 01 	call	0x316	; 0x316 <mcp2515_enable>
	spi_transmit(0x80 | (7 & registers));
 376:	8c 2f       	mov	r24, r28
 378:	87 70       	andi	r24, 0x07	; 7
 37a:	80 68       	ori	r24, 0x80	; 128
 37c:	0e 94 1a 02 	call	0x434	; 0x434 <spi_transmit>
	mcp2515_disable();
 380:	0e 94 89 01 	call	0x312	; 0x312 <mcp2515_disable>
}
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <oled_goto_line>:
void oled_home(void){
	
}

void oled_goto_line(uint8_t line){
	oled_state.cursor_y = line & 0x07;
 388:	87 70       	andi	r24, 0x07	; 7
 38a:	80 93 41 01 	sts	0x0141, r24
	
	oled_write_command(0xb0 | (0x07 & oled_state.cursor_y));
 38e:	80 6b       	ori	r24, 0xB0	; 176
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
 390:	80 93 00 10 	sts	0x1000, r24
 394:	08 95       	ret

00000396 <oled_clear_line>:
	oled_write_command((1<<4) | oled_state.cursor_x >> 4);
}

//Clear single line(page)
void oled_clear_line(uint8_t line){
	oled_goto_line(line);
 396:	0e 94 c4 01 	call	0x388	; 0x388 <oled_goto_line>
	for(uint8_t i = 0; i < 128; i++){
 39a:	80 e0       	ldi	r24, 0x00	; 0
	oled_write_command(0xaf); // display on
}

//Writes data to the display
void oled_write_data(uint8_t data){
	*oled_data_address = data;
 39c:	e0 e0       	ldi	r30, 0x00	; 0
 39e:	f2 e1       	ldi	r31, 0x12	; 18
 3a0:	10 82       	st	Z, r1
}

//Clear single line(page)
void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	for(uint8_t i = 0; i < 128; i++){
 3a2:	8f 5f       	subi	r24, 0xFF	; 255
 3a4:	80 38       	cpi	r24, 0x80	; 128
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <oled_clear_line+0xa>
		oled_write_data(0x00);
	}
}
 3a8:	08 95       	ret

000003aa <oled_clear>:

//Clear whole display
void oled_clear(void){
 3aa:	cf 93       	push	r28
	for(uint8_t j = 0; j < 8; j++){
 3ac:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clear_line(j);
 3ae:	8c 2f       	mov	r24, r28
 3b0:	0e 94 cb 01 	call	0x396	; 0x396 <oled_clear_line>
	}
}

//Clear whole display
void oled_clear(void){
	for(uint8_t j = 0; j < 8; j++){
 3b4:	cf 5f       	subi	r28, 0xFF	; 255
 3b6:	c8 30       	cpi	r28, 0x08	; 8
 3b8:	d1 f7       	brne	.-12     	; 0x3ae <oled_clear+0x4>
		oled_clear_line(j);
	}
}
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <oled_init>:
 
static oled_state_t oled_state = {0};
 

//Initializes the display
void oled_init(void){
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
 3c2:	c0 e0       	ldi	r28, 0x00	; 0
 3c4:	d0 e1       	ldi	r29, 0x10	; 16
 3c6:	8e ea       	ldi	r24, 0xAE	; 174
 3c8:	88 83       	st	Y, r24
 3ca:	81 ea       	ldi	r24, 0xA1	; 161
 3cc:	88 83       	st	Y, r24
 3ce:	8a ed       	ldi	r24, 0xDA	; 218
 3d0:	88 83       	st	Y, r24
 3d2:	82 e1       	ldi	r24, 0x12	; 18
 3d4:	88 83       	st	Y, r24
 3d6:	88 ec       	ldi	r24, 0xC8	; 200
 3d8:	88 83       	st	Y, r24
 3da:	88 ea       	ldi	r24, 0xA8	; 168
 3dc:	88 83       	st	Y, r24
 3de:	8f e3       	ldi	r24, 0x3F	; 63
 3e0:	88 83       	st	Y, r24
 3e2:	85 ed       	ldi	r24, 0xD5	; 213
 3e4:	88 83       	st	Y, r24
 3e6:	80 e8       	ldi	r24, 0x80	; 128
 3e8:	88 83       	st	Y, r24
 3ea:	81 e8       	ldi	r24, 0x81	; 129
 3ec:	88 83       	st	Y, r24
 3ee:	80 e5       	ldi	r24, 0x50	; 80
 3f0:	88 83       	st	Y, r24
 3f2:	89 ed       	ldi	r24, 0xD9	; 217
 3f4:	88 83       	st	Y, r24
 3f6:	81 e2       	ldi	r24, 0x21	; 33
 3f8:	88 83       	st	Y, r24
 3fa:	80 e2       	ldi	r24, 0x20	; 32
 3fc:	88 83       	st	Y, r24
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	88 83       	st	Y, r24
 402:	8b ed       	ldi	r24, 0xDB	; 219
 404:	88 83       	st	Y, r24
 406:	80 e3       	ldi	r24, 0x30	; 48
 408:	88 83       	st	Y, r24
 40a:	8d ea       	ldi	r24, 0xAD	; 173
 40c:	88 83       	st	Y, r24
 40e:	18 82       	st	Y, r1
 410:	84 ea       	ldi	r24, 0xA4	; 164
 412:	88 83       	st	Y, r24
 414:	86 ea       	ldi	r24, 0xA6	; 166
 416:	88 83       	st	Y, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	
	oled_clear(); //Clear the display
 418:	0e 94 d5 01 	call	0x3aa	; 0x3aa <oled_clear>
}


//Writes a command to the display
void oled_write_command(uint8_t command){
	*oled_command_address = command;
 41c:	8f ea       	ldi	r24, 0xAF	; 175
 41e:	88 83       	st	Y, r24
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	
	oled_clear(); //Clear the display
	oled_write_command(0xaf); // display on
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <spi_init>:

#include "spi.h"

void spi_init(void){
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB7);
 426:	87 b3       	in	r24, 0x17	; 23
 428:	80 6b       	ori	r24, 0xB0	; 176
 42a:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input
	DDRB &= ~(1<<PB6);
 42c:	be 98       	cbi	0x17, 6	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 42e:	81 e5       	ldi	r24, 0x51	; 81
 430:	8d b9       	out	0x0d, r24	; 13
 432:	08 95       	ret

00000434 <spi_transmit>:
}

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
 434:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 436:	77 99       	sbic	0x0e, 7	; 14
 438:	03 c0       	rjmp	.+6      	; 0x440 <spi_transmit+0xc>
	
	data = SPDR;
 43a:	8f b1       	in	r24, 0x0f	; 15

uint8_t spi_transmit(uint8_t data){
	/* Start transmission */
	SPDR = data;
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 43c:	77 9b       	sbis	0x0e, 7	; 14
 43e:	fd cf       	rjmp	.-6      	; 0x43a <spi_transmit+0x6>
	
	data = SPDR;

	return data;
 440:	08 95       	ret

00000442 <sram_init>:
#include <stdint.h>
#include <avr/io.h>
#include "sram.h"

void sram_init(void){
	MCUCR |= (1<<SRE);
 442:	85 b7       	in	r24, 0x35	; 53
 444:	80 68       	ori	r24, 0x80	; 128
 446:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 448:	80 b7       	in	r24, 0x30	; 48
 44a:	80 62       	ori	r24, 0x20	; 32
 44c:	80 bf       	out	0x30, r24	; 48
 44e:	08 95       	ret

00000450 <uart_transmit>:
	stdout = stdin = &uart_str;
	
}

void uart_transmit(unsigned char data, FILE* stream){
	while ( !( UCSR1A & (1<<UDRE1)) );
 450:	15 9b       	sbis	0x02, 5	; 2
 452:	fe cf       	rjmp	.-4      	; 0x450 <uart_transmit>
	
	UDR1 = data;
 454:	83 b9       	out	0x03, r24	; 3
 456:	08 95       	ret

00000458 <uart_receive>:
}

//Function to receive data
unsigned char uart_receive(FILE* stream){
	while (!(UCSR1A & (1<<RXC1)));
 458:	17 9b       	sbis	0x02, 7	; 2
 45a:	fe cf       	rjmp	.-4      	; 0x458 <uart_receive>
	return UDR1;
 45c:	83 b1       	in	r24, 0x03	; 3
}
 45e:	08 95       	ret

00000460 <uart_init>:

void uart_init(){

	// Set baudrate to 9600

	UBRR1H |= (BAUD_PRESCALE >> 8);
 460:	8c b7       	in	r24, 0x3c	; 60
 462:	8c bf       	out	0x3c, r24	; 60
	UBRR1L |= BAUD_PRESCALE;
 464:	80 b1       	in	r24, 0x00	; 0
 466:	8f 61       	ori	r24, 0x1F	; 31
 468:	80 b9       	out	0x00, r24	; 0
	// Enable TX rx
	UCSR1B = (1<<TXEN1)|(1<<RXEN1);
 46a:	88 e1       	ldi	r24, 0x18	; 24
 46c:	81 b9       	out	0x01, r24	; 1
	

	
	//uart_str = fdevopen(uart_transmit, uart_receive);
	stdout = stdin = &uart_str;
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	90 93 43 01 	sts	0x0143, r25
 476:	80 93 42 01 	sts	0x0142, r24
 47a:	90 93 45 01 	sts	0x0145, r25
 47e:	80 93 44 01 	sts	0x0144, r24
 482:	08 95       	ret

00000484 <fputc>:
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	18 2f       	mov	r17, r24
 48e:	09 2f       	mov	r16, r25
 490:	eb 01       	movw	r28, r22
 492:	8b 81       	ldd	r24, Y+3	; 0x03
 494:	81 fd       	sbrc	r24, 1
 496:	03 c0       	rjmp	.+6      	; 0x49e <fputc+0x1a>
 498:	8f ef       	ldi	r24, 0xFF	; 255
 49a:	9f ef       	ldi	r25, 0xFF	; 255
 49c:	20 c0       	rjmp	.+64     	; 0x4de <fputc+0x5a>
 49e:	82 ff       	sbrs	r24, 2
 4a0:	10 c0       	rjmp	.+32     	; 0x4c2 <fputc+0x3e>
 4a2:	4e 81       	ldd	r20, Y+6	; 0x06
 4a4:	5f 81       	ldd	r21, Y+7	; 0x07
 4a6:	2c 81       	ldd	r18, Y+4	; 0x04
 4a8:	3d 81       	ldd	r19, Y+5	; 0x05
 4aa:	42 17       	cp	r20, r18
 4ac:	53 07       	cpc	r21, r19
 4ae:	7c f4       	brge	.+30     	; 0x4ce <fputc+0x4a>
 4b0:	e8 81       	ld	r30, Y
 4b2:	f9 81       	ldd	r31, Y+1	; 0x01
 4b4:	9f 01       	movw	r18, r30
 4b6:	2f 5f       	subi	r18, 0xFF	; 255
 4b8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ba:	39 83       	std	Y+1, r19	; 0x01
 4bc:	28 83       	st	Y, r18
 4be:	10 83       	st	Z, r17
 4c0:	06 c0       	rjmp	.+12     	; 0x4ce <fputc+0x4a>
 4c2:	e8 85       	ldd	r30, Y+8	; 0x08
 4c4:	f9 85       	ldd	r31, Y+9	; 0x09
 4c6:	81 2f       	mov	r24, r17
 4c8:	09 95       	icall
 4ca:	89 2b       	or	r24, r25
 4cc:	29 f7       	brne	.-54     	; 0x498 <fputc+0x14>
 4ce:	2e 81       	ldd	r18, Y+6	; 0x06
 4d0:	3f 81       	ldd	r19, Y+7	; 0x07
 4d2:	2f 5f       	subi	r18, 0xFF	; 255
 4d4:	3f 4f       	sbci	r19, 0xFF	; 255
 4d6:	3f 83       	std	Y+7, r19	; 0x07
 4d8:	2e 83       	std	Y+6, r18	; 0x06
 4da:	81 2f       	mov	r24, r17
 4dc:	90 2f       	mov	r25, r16
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	08 95       	ret

000004e8 <printf>:
 4e8:	a0 e0       	ldi	r26, 0x00	; 0
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	ea e7       	ldi	r30, 0x7A	; 122
 4ee:	f2 e0       	ldi	r31, 0x02	; 2
 4f0:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__prologue_saves__+0x20>
 4f4:	fe 01       	movw	r30, r28
 4f6:	35 96       	adiw	r30, 0x05	; 5
 4f8:	61 91       	ld	r22, Z+
 4fa:	71 91       	ld	r23, Z+
 4fc:	af 01       	movw	r20, r30
 4fe:	80 91 44 01 	lds	r24, 0x0144
 502:	90 91 45 01 	lds	r25, 0x0145
 506:	0e 94 b5 02 	call	0x56a	; 0x56a <vfprintf>
 50a:	e2 e0       	ldi	r30, 0x02	; 2
 50c:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__epilogue_restores__+0x20>

00000510 <puts>:
 510:	0f 93       	push	r16
 512:	1f 93       	push	r17
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	e0 91 44 01 	lds	r30, 0x0144
 51c:	f0 91 45 01 	lds	r31, 0x0145
 520:	23 81       	ldd	r18, Z+3	; 0x03
 522:	21 ff       	sbrs	r18, 1
 524:	1b c0       	rjmp	.+54     	; 0x55c <puts+0x4c>
 526:	ec 01       	movw	r28, r24
 528:	00 e0       	ldi	r16, 0x00	; 0
 52a:	10 e0       	ldi	r17, 0x00	; 0
 52c:	89 91       	ld	r24, Y+
 52e:	60 91 44 01 	lds	r22, 0x0144
 532:	70 91 45 01 	lds	r23, 0x0145
 536:	db 01       	movw	r26, r22
 538:	18 96       	adiw	r26, 0x08	; 8
 53a:	ed 91       	ld	r30, X+
 53c:	fc 91       	ld	r31, X
 53e:	19 97       	sbiw	r26, 0x09	; 9
 540:	88 23       	and	r24, r24
 542:	31 f0       	breq	.+12     	; 0x550 <puts+0x40>
 544:	09 95       	icall
 546:	89 2b       	or	r24, r25
 548:	89 f3       	breq	.-30     	; 0x52c <puts+0x1c>
 54a:	0f ef       	ldi	r16, 0xFF	; 255
 54c:	1f ef       	ldi	r17, 0xFF	; 255
 54e:	ee cf       	rjmp	.-36     	; 0x52c <puts+0x1c>
 550:	8a e0       	ldi	r24, 0x0A	; 10
 552:	09 95       	icall
 554:	89 2b       	or	r24, r25
 556:	11 f4       	brne	.+4      	; 0x55c <puts+0x4c>
 558:	c8 01       	movw	r24, r16
 55a:	02 c0       	rjmp	.+4      	; 0x560 <puts+0x50>
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	9f ef       	ldi	r25, 0xFF	; 255
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	08 95       	ret

0000056a <vfprintf>:
 56a:	ac e0       	ldi	r26, 0x0C	; 12
 56c:	b0 e0       	ldi	r27, 0x00	; 0
 56e:	eb eb       	ldi	r30, 0xBB	; 187
 570:	f2 e0       	ldi	r31, 0x02	; 2
 572:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__prologue_saves__>
 576:	7c 01       	movw	r14, r24
 578:	6b 01       	movw	r12, r22
 57a:	8a 01       	movw	r16, r20
 57c:	fc 01       	movw	r30, r24
 57e:	17 82       	std	Z+7, r1	; 0x07
 580:	16 82       	std	Z+6, r1	; 0x06
 582:	83 81       	ldd	r24, Z+3	; 0x03
 584:	81 ff       	sbrs	r24, 1
 586:	bd c1       	rjmp	.+890    	; 0x902 <vfprintf+0x398>
 588:	ce 01       	movw	r24, r28
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	4c 01       	movw	r8, r24
 58e:	f7 01       	movw	r30, r14
 590:	93 81       	ldd	r25, Z+3	; 0x03
 592:	f6 01       	movw	r30, r12
 594:	93 fd       	sbrc	r25, 3
 596:	85 91       	lpm	r24, Z+
 598:	93 ff       	sbrs	r25, 3
 59a:	81 91       	ld	r24, Z+
 59c:	6f 01       	movw	r12, r30
 59e:	88 23       	and	r24, r24
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <vfprintf+0x3a>
 5a2:	ab c1       	rjmp	.+854    	; 0x8fa <vfprintf+0x390>
 5a4:	85 32       	cpi	r24, 0x25	; 37
 5a6:	39 f4       	brne	.+14     	; 0x5b6 <vfprintf+0x4c>
 5a8:	93 fd       	sbrc	r25, 3
 5aa:	85 91       	lpm	r24, Z+
 5ac:	93 ff       	sbrs	r25, 3
 5ae:	81 91       	ld	r24, Z+
 5b0:	6f 01       	movw	r12, r30
 5b2:	85 32       	cpi	r24, 0x25	; 37
 5b4:	29 f4       	brne	.+10     	; 0x5c0 <vfprintf+0x56>
 5b6:	b7 01       	movw	r22, r14
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 42 02 	call	0x484	; 0x484 <fputc>
 5be:	e7 cf       	rjmp	.-50     	; 0x58e <vfprintf+0x24>
 5c0:	51 2c       	mov	r5, r1
 5c2:	31 2c       	mov	r3, r1
 5c4:	20 e0       	ldi	r18, 0x00	; 0
 5c6:	20 32       	cpi	r18, 0x20	; 32
 5c8:	a0 f4       	brcc	.+40     	; 0x5f2 <vfprintf+0x88>
 5ca:	8b 32       	cpi	r24, 0x2B	; 43
 5cc:	69 f0       	breq	.+26     	; 0x5e8 <vfprintf+0x7e>
 5ce:	30 f4       	brcc	.+12     	; 0x5dc <vfprintf+0x72>
 5d0:	80 32       	cpi	r24, 0x20	; 32
 5d2:	59 f0       	breq	.+22     	; 0x5ea <vfprintf+0x80>
 5d4:	83 32       	cpi	r24, 0x23	; 35
 5d6:	69 f4       	brne	.+26     	; 0x5f2 <vfprintf+0x88>
 5d8:	20 61       	ori	r18, 0x10	; 16
 5da:	2c c0       	rjmp	.+88     	; 0x634 <vfprintf+0xca>
 5dc:	8d 32       	cpi	r24, 0x2D	; 45
 5de:	39 f0       	breq	.+14     	; 0x5ee <vfprintf+0x84>
 5e0:	80 33       	cpi	r24, 0x30	; 48
 5e2:	39 f4       	brne	.+14     	; 0x5f2 <vfprintf+0x88>
 5e4:	21 60       	ori	r18, 0x01	; 1
 5e6:	26 c0       	rjmp	.+76     	; 0x634 <vfprintf+0xca>
 5e8:	22 60       	ori	r18, 0x02	; 2
 5ea:	24 60       	ori	r18, 0x04	; 4
 5ec:	23 c0       	rjmp	.+70     	; 0x634 <vfprintf+0xca>
 5ee:	28 60       	ori	r18, 0x08	; 8
 5f0:	21 c0       	rjmp	.+66     	; 0x634 <vfprintf+0xca>
 5f2:	27 fd       	sbrc	r18, 7
 5f4:	27 c0       	rjmp	.+78     	; 0x644 <vfprintf+0xda>
 5f6:	30 ed       	ldi	r19, 0xD0	; 208
 5f8:	38 0f       	add	r19, r24
 5fa:	3a 30       	cpi	r19, 0x0A	; 10
 5fc:	78 f4       	brcc	.+30     	; 0x61c <vfprintf+0xb2>
 5fe:	26 ff       	sbrs	r18, 6
 600:	06 c0       	rjmp	.+12     	; 0x60e <vfprintf+0xa4>
 602:	fa e0       	ldi	r31, 0x0A	; 10
 604:	5f 9e       	mul	r5, r31
 606:	30 0d       	add	r19, r0
 608:	11 24       	eor	r1, r1
 60a:	53 2e       	mov	r5, r19
 60c:	13 c0       	rjmp	.+38     	; 0x634 <vfprintf+0xca>
 60e:	8a e0       	ldi	r24, 0x0A	; 10
 610:	38 9e       	mul	r3, r24
 612:	30 0d       	add	r19, r0
 614:	11 24       	eor	r1, r1
 616:	33 2e       	mov	r3, r19
 618:	20 62       	ori	r18, 0x20	; 32
 61a:	0c c0       	rjmp	.+24     	; 0x634 <vfprintf+0xca>
 61c:	8e 32       	cpi	r24, 0x2E	; 46
 61e:	21 f4       	brne	.+8      	; 0x628 <vfprintf+0xbe>
 620:	26 fd       	sbrc	r18, 6
 622:	6b c1       	rjmp	.+726    	; 0x8fa <vfprintf+0x390>
 624:	20 64       	ori	r18, 0x40	; 64
 626:	06 c0       	rjmp	.+12     	; 0x634 <vfprintf+0xca>
 628:	8c 36       	cpi	r24, 0x6C	; 108
 62a:	11 f4       	brne	.+4      	; 0x630 <vfprintf+0xc6>
 62c:	20 68       	ori	r18, 0x80	; 128
 62e:	02 c0       	rjmp	.+4      	; 0x634 <vfprintf+0xca>
 630:	88 36       	cpi	r24, 0x68	; 104
 632:	41 f4       	brne	.+16     	; 0x644 <vfprintf+0xda>
 634:	f6 01       	movw	r30, r12
 636:	93 fd       	sbrc	r25, 3
 638:	85 91       	lpm	r24, Z+
 63a:	93 ff       	sbrs	r25, 3
 63c:	81 91       	ld	r24, Z+
 63e:	6f 01       	movw	r12, r30
 640:	81 11       	cpse	r24, r1
 642:	c1 cf       	rjmp	.-126    	; 0x5c6 <vfprintf+0x5c>
 644:	98 2f       	mov	r25, r24
 646:	9f 7d       	andi	r25, 0xDF	; 223
 648:	95 54       	subi	r25, 0x45	; 69
 64a:	93 30       	cpi	r25, 0x03	; 3
 64c:	28 f4       	brcc	.+10     	; 0x658 <vfprintf+0xee>
 64e:	0c 5f       	subi	r16, 0xFC	; 252
 650:	1f 4f       	sbci	r17, 0xFF	; 255
 652:	ff e3       	ldi	r31, 0x3F	; 63
 654:	f9 83       	std	Y+1, r31	; 0x01
 656:	0d c0       	rjmp	.+26     	; 0x672 <vfprintf+0x108>
 658:	83 36       	cpi	r24, 0x63	; 99
 65a:	31 f0       	breq	.+12     	; 0x668 <vfprintf+0xfe>
 65c:	83 37       	cpi	r24, 0x73	; 115
 65e:	71 f0       	breq	.+28     	; 0x67c <vfprintf+0x112>
 660:	83 35       	cpi	r24, 0x53	; 83
 662:	09 f0       	breq	.+2      	; 0x666 <vfprintf+0xfc>
 664:	5b c0       	rjmp	.+182    	; 0x71c <vfprintf+0x1b2>
 666:	22 c0       	rjmp	.+68     	; 0x6ac <vfprintf+0x142>
 668:	f8 01       	movw	r30, r16
 66a:	80 81       	ld	r24, Z
 66c:	89 83       	std	Y+1, r24	; 0x01
 66e:	0e 5f       	subi	r16, 0xFE	; 254
 670:	1f 4f       	sbci	r17, 0xFF	; 255
 672:	44 24       	eor	r4, r4
 674:	43 94       	inc	r4
 676:	51 2c       	mov	r5, r1
 678:	54 01       	movw	r10, r8
 67a:	15 c0       	rjmp	.+42     	; 0x6a6 <vfprintf+0x13c>
 67c:	38 01       	movw	r6, r16
 67e:	f2 e0       	ldi	r31, 0x02	; 2
 680:	6f 0e       	add	r6, r31
 682:	71 1c       	adc	r7, r1
 684:	f8 01       	movw	r30, r16
 686:	a0 80       	ld	r10, Z
 688:	b1 80       	ldd	r11, Z+1	; 0x01
 68a:	26 ff       	sbrs	r18, 6
 68c:	03 c0       	rjmp	.+6      	; 0x694 <vfprintf+0x12a>
 68e:	65 2d       	mov	r22, r5
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <vfprintf+0x12e>
 694:	6f ef       	ldi	r22, 0xFF	; 255
 696:	7f ef       	ldi	r23, 0xFF	; 255
 698:	c5 01       	movw	r24, r10
 69a:	2c 87       	std	Y+12, r18	; 0x0c
 69c:	0e 94 92 04 	call	0x924	; 0x924 <strnlen>
 6a0:	2c 01       	movw	r4, r24
 6a2:	83 01       	movw	r16, r6
 6a4:	2c 85       	ldd	r18, Y+12	; 0x0c
 6a6:	2f 77       	andi	r18, 0x7F	; 127
 6a8:	22 2e       	mov	r2, r18
 6aa:	17 c0       	rjmp	.+46     	; 0x6da <vfprintf+0x170>
 6ac:	38 01       	movw	r6, r16
 6ae:	f2 e0       	ldi	r31, 0x02	; 2
 6b0:	6f 0e       	add	r6, r31
 6b2:	71 1c       	adc	r7, r1
 6b4:	f8 01       	movw	r30, r16
 6b6:	a0 80       	ld	r10, Z
 6b8:	b1 80       	ldd	r11, Z+1	; 0x01
 6ba:	26 ff       	sbrs	r18, 6
 6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <vfprintf+0x15a>
 6be:	65 2d       	mov	r22, r5
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <vfprintf+0x15e>
 6c4:	6f ef       	ldi	r22, 0xFF	; 255
 6c6:	7f ef       	ldi	r23, 0xFF	; 255
 6c8:	c5 01       	movw	r24, r10
 6ca:	2c 87       	std	Y+12, r18	; 0x0c
 6cc:	0e 94 87 04 	call	0x90e	; 0x90e <strnlen_P>
 6d0:	2c 01       	movw	r4, r24
 6d2:	2c 85       	ldd	r18, Y+12	; 0x0c
 6d4:	20 68       	ori	r18, 0x80	; 128
 6d6:	22 2e       	mov	r2, r18
 6d8:	83 01       	movw	r16, r6
 6da:	23 fc       	sbrc	r2, 3
 6dc:	1b c0       	rjmp	.+54     	; 0x714 <vfprintf+0x1aa>
 6de:	83 2d       	mov	r24, r3
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	48 16       	cp	r4, r24
 6e4:	59 06       	cpc	r5, r25
 6e6:	b0 f4       	brcc	.+44     	; 0x714 <vfprintf+0x1aa>
 6e8:	b7 01       	movw	r22, r14
 6ea:	80 e2       	ldi	r24, 0x20	; 32
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 42 02 	call	0x484	; 0x484 <fputc>
 6f2:	3a 94       	dec	r3
 6f4:	f4 cf       	rjmp	.-24     	; 0x6de <vfprintf+0x174>
 6f6:	f5 01       	movw	r30, r10
 6f8:	27 fc       	sbrc	r2, 7
 6fa:	85 91       	lpm	r24, Z+
 6fc:	27 fe       	sbrs	r2, 7
 6fe:	81 91       	ld	r24, Z+
 700:	5f 01       	movw	r10, r30
 702:	b7 01       	movw	r22, r14
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 42 02 	call	0x484	; 0x484 <fputc>
 70a:	31 10       	cpse	r3, r1
 70c:	3a 94       	dec	r3
 70e:	f1 e0       	ldi	r31, 0x01	; 1
 710:	4f 1a       	sub	r4, r31
 712:	51 08       	sbc	r5, r1
 714:	41 14       	cp	r4, r1
 716:	51 04       	cpc	r5, r1
 718:	71 f7       	brne	.-36     	; 0x6f6 <vfprintf+0x18c>
 71a:	e5 c0       	rjmp	.+458    	; 0x8e6 <vfprintf+0x37c>
 71c:	84 36       	cpi	r24, 0x64	; 100
 71e:	11 f0       	breq	.+4      	; 0x724 <vfprintf+0x1ba>
 720:	89 36       	cpi	r24, 0x69	; 105
 722:	39 f5       	brne	.+78     	; 0x772 <vfprintf+0x208>
 724:	f8 01       	movw	r30, r16
 726:	27 ff       	sbrs	r18, 7
 728:	07 c0       	rjmp	.+14     	; 0x738 <vfprintf+0x1ce>
 72a:	60 81       	ld	r22, Z
 72c:	71 81       	ldd	r23, Z+1	; 0x01
 72e:	82 81       	ldd	r24, Z+2	; 0x02
 730:	93 81       	ldd	r25, Z+3	; 0x03
 732:	0c 5f       	subi	r16, 0xFC	; 252
 734:	1f 4f       	sbci	r17, 0xFF	; 255
 736:	08 c0       	rjmp	.+16     	; 0x748 <vfprintf+0x1de>
 738:	60 81       	ld	r22, Z
 73a:	71 81       	ldd	r23, Z+1	; 0x01
 73c:	88 27       	eor	r24, r24
 73e:	77 fd       	sbrc	r23, 7
 740:	80 95       	com	r24
 742:	98 2f       	mov	r25, r24
 744:	0e 5f       	subi	r16, 0xFE	; 254
 746:	1f 4f       	sbci	r17, 0xFF	; 255
 748:	2f 76       	andi	r18, 0x6F	; 111
 74a:	b2 2e       	mov	r11, r18
 74c:	97 ff       	sbrs	r25, 7
 74e:	09 c0       	rjmp	.+18     	; 0x762 <vfprintf+0x1f8>
 750:	90 95       	com	r25
 752:	80 95       	com	r24
 754:	70 95       	com	r23
 756:	61 95       	neg	r22
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	20 68       	ori	r18, 0x80	; 128
 760:	b2 2e       	mov	r11, r18
 762:	2a e0       	ldi	r18, 0x0A	; 10
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	a4 01       	movw	r20, r8
 768:	0e 94 9d 04 	call	0x93a	; 0x93a <__ultoa_invert>
 76c:	a8 2e       	mov	r10, r24
 76e:	a8 18       	sub	r10, r8
 770:	44 c0       	rjmp	.+136    	; 0x7fa <vfprintf+0x290>
 772:	85 37       	cpi	r24, 0x75	; 117
 774:	29 f4       	brne	.+10     	; 0x780 <vfprintf+0x216>
 776:	2f 7e       	andi	r18, 0xEF	; 239
 778:	b2 2e       	mov	r11, r18
 77a:	2a e0       	ldi	r18, 0x0A	; 10
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	25 c0       	rjmp	.+74     	; 0x7ca <vfprintf+0x260>
 780:	f2 2f       	mov	r31, r18
 782:	f9 7f       	andi	r31, 0xF9	; 249
 784:	bf 2e       	mov	r11, r31
 786:	8f 36       	cpi	r24, 0x6F	; 111
 788:	c1 f0       	breq	.+48     	; 0x7ba <vfprintf+0x250>
 78a:	18 f4       	brcc	.+6      	; 0x792 <vfprintf+0x228>
 78c:	88 35       	cpi	r24, 0x58	; 88
 78e:	79 f0       	breq	.+30     	; 0x7ae <vfprintf+0x244>
 790:	b4 c0       	rjmp	.+360    	; 0x8fa <vfprintf+0x390>
 792:	80 37       	cpi	r24, 0x70	; 112
 794:	19 f0       	breq	.+6      	; 0x79c <vfprintf+0x232>
 796:	88 37       	cpi	r24, 0x78	; 120
 798:	21 f0       	breq	.+8      	; 0x7a2 <vfprintf+0x238>
 79a:	af c0       	rjmp	.+350    	; 0x8fa <vfprintf+0x390>
 79c:	2f 2f       	mov	r18, r31
 79e:	20 61       	ori	r18, 0x10	; 16
 7a0:	b2 2e       	mov	r11, r18
 7a2:	b4 fe       	sbrs	r11, 4
 7a4:	0d c0       	rjmp	.+26     	; 0x7c0 <vfprintf+0x256>
 7a6:	8b 2d       	mov	r24, r11
 7a8:	84 60       	ori	r24, 0x04	; 4
 7aa:	b8 2e       	mov	r11, r24
 7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <vfprintf+0x256>
 7ae:	24 ff       	sbrs	r18, 4
 7b0:	0a c0       	rjmp	.+20     	; 0x7c6 <vfprintf+0x25c>
 7b2:	9f 2f       	mov	r25, r31
 7b4:	96 60       	ori	r25, 0x06	; 6
 7b6:	b9 2e       	mov	r11, r25
 7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <vfprintf+0x25c>
 7ba:	28 e0       	ldi	r18, 0x08	; 8
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	05 c0       	rjmp	.+10     	; 0x7ca <vfprintf+0x260>
 7c0:	20 e1       	ldi	r18, 0x10	; 16
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0x260>
 7c6:	20 e1       	ldi	r18, 0x10	; 16
 7c8:	32 e0       	ldi	r19, 0x02	; 2
 7ca:	f8 01       	movw	r30, r16
 7cc:	b7 fe       	sbrs	r11, 7
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <vfprintf+0x274>
 7d0:	60 81       	ld	r22, Z
 7d2:	71 81       	ldd	r23, Z+1	; 0x01
 7d4:	82 81       	ldd	r24, Z+2	; 0x02
 7d6:	93 81       	ldd	r25, Z+3	; 0x03
 7d8:	0c 5f       	subi	r16, 0xFC	; 252
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0x280>
 7de:	60 81       	ld	r22, Z
 7e0:	71 81       	ldd	r23, Z+1	; 0x01
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 5f       	subi	r16, 0xFE	; 254
 7e8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ea:	a4 01       	movw	r20, r8
 7ec:	0e 94 9d 04 	call	0x93a	; 0x93a <__ultoa_invert>
 7f0:	a8 2e       	mov	r10, r24
 7f2:	a8 18       	sub	r10, r8
 7f4:	fb 2d       	mov	r31, r11
 7f6:	ff 77       	andi	r31, 0x7F	; 127
 7f8:	bf 2e       	mov	r11, r31
 7fa:	b6 fe       	sbrs	r11, 6
 7fc:	0b c0       	rjmp	.+22     	; 0x814 <vfprintf+0x2aa>
 7fe:	2b 2d       	mov	r18, r11
 800:	2e 7f       	andi	r18, 0xFE	; 254
 802:	a5 14       	cp	r10, r5
 804:	50 f4       	brcc	.+20     	; 0x81a <vfprintf+0x2b0>
 806:	b4 fe       	sbrs	r11, 4
 808:	0a c0       	rjmp	.+20     	; 0x81e <vfprintf+0x2b4>
 80a:	b2 fc       	sbrc	r11, 2
 80c:	08 c0       	rjmp	.+16     	; 0x81e <vfprintf+0x2b4>
 80e:	2b 2d       	mov	r18, r11
 810:	2e 7e       	andi	r18, 0xEE	; 238
 812:	05 c0       	rjmp	.+10     	; 0x81e <vfprintf+0x2b4>
 814:	7a 2c       	mov	r7, r10
 816:	2b 2d       	mov	r18, r11
 818:	03 c0       	rjmp	.+6      	; 0x820 <vfprintf+0x2b6>
 81a:	7a 2c       	mov	r7, r10
 81c:	01 c0       	rjmp	.+2      	; 0x820 <vfprintf+0x2b6>
 81e:	75 2c       	mov	r7, r5
 820:	24 ff       	sbrs	r18, 4
 822:	0d c0       	rjmp	.+26     	; 0x83e <vfprintf+0x2d4>
 824:	fe 01       	movw	r30, r28
 826:	ea 0d       	add	r30, r10
 828:	f1 1d       	adc	r31, r1
 82a:	80 81       	ld	r24, Z
 82c:	80 33       	cpi	r24, 0x30	; 48
 82e:	11 f4       	brne	.+4      	; 0x834 <vfprintf+0x2ca>
 830:	29 7e       	andi	r18, 0xE9	; 233
 832:	09 c0       	rjmp	.+18     	; 0x846 <vfprintf+0x2dc>
 834:	22 ff       	sbrs	r18, 2
 836:	06 c0       	rjmp	.+12     	; 0x844 <vfprintf+0x2da>
 838:	73 94       	inc	r7
 83a:	73 94       	inc	r7
 83c:	04 c0       	rjmp	.+8      	; 0x846 <vfprintf+0x2dc>
 83e:	82 2f       	mov	r24, r18
 840:	86 78       	andi	r24, 0x86	; 134
 842:	09 f0       	breq	.+2      	; 0x846 <vfprintf+0x2dc>
 844:	73 94       	inc	r7
 846:	23 fd       	sbrc	r18, 3
 848:	13 c0       	rjmp	.+38     	; 0x870 <vfprintf+0x306>
 84a:	20 ff       	sbrs	r18, 0
 84c:	06 c0       	rjmp	.+12     	; 0x85a <vfprintf+0x2f0>
 84e:	5a 2c       	mov	r5, r10
 850:	73 14       	cp	r7, r3
 852:	18 f4       	brcc	.+6      	; 0x85a <vfprintf+0x2f0>
 854:	53 0c       	add	r5, r3
 856:	57 18       	sub	r5, r7
 858:	73 2c       	mov	r7, r3
 85a:	73 14       	cp	r7, r3
 85c:	68 f4       	brcc	.+26     	; 0x878 <vfprintf+0x30e>
 85e:	b7 01       	movw	r22, r14
 860:	80 e2       	ldi	r24, 0x20	; 32
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	2c 87       	std	Y+12, r18	; 0x0c
 866:	0e 94 42 02 	call	0x484	; 0x484 <fputc>
 86a:	73 94       	inc	r7
 86c:	2c 85       	ldd	r18, Y+12	; 0x0c
 86e:	f5 cf       	rjmp	.-22     	; 0x85a <vfprintf+0x2f0>
 870:	73 14       	cp	r7, r3
 872:	10 f4       	brcc	.+4      	; 0x878 <vfprintf+0x30e>
 874:	37 18       	sub	r3, r7
 876:	01 c0       	rjmp	.+2      	; 0x87a <vfprintf+0x310>
 878:	31 2c       	mov	r3, r1
 87a:	24 ff       	sbrs	r18, 4
 87c:	12 c0       	rjmp	.+36     	; 0x8a2 <vfprintf+0x338>
 87e:	b7 01       	movw	r22, r14
 880:	80 e3       	ldi	r24, 0x30	; 48
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	2c 87       	std	Y+12, r18	; 0x0c
 886:	0e 94 42 02 	call	0x484	; 0x484 <fputc>
 88a:	2c 85       	ldd	r18, Y+12	; 0x0c
 88c:	22 ff       	sbrs	r18, 2
 88e:	17 c0       	rjmp	.+46     	; 0x8be <vfprintf+0x354>
 890:	21 ff       	sbrs	r18, 1
 892:	03 c0       	rjmp	.+6      	; 0x89a <vfprintf+0x330>
 894:	88 e5       	ldi	r24, 0x58	; 88
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	02 c0       	rjmp	.+4      	; 0x89e <vfprintf+0x334>
 89a:	88 e7       	ldi	r24, 0x78	; 120
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	b7 01       	movw	r22, r14
 8a0:	0c c0       	rjmp	.+24     	; 0x8ba <vfprintf+0x350>
 8a2:	82 2f       	mov	r24, r18
 8a4:	86 78       	andi	r24, 0x86	; 134
 8a6:	59 f0       	breq	.+22     	; 0x8be <vfprintf+0x354>
 8a8:	21 fd       	sbrc	r18, 1
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <vfprintf+0x346>
 8ac:	80 e2       	ldi	r24, 0x20	; 32
 8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <vfprintf+0x348>
 8b0:	8b e2       	ldi	r24, 0x2B	; 43
 8b2:	27 fd       	sbrc	r18, 7
 8b4:	8d e2       	ldi	r24, 0x2D	; 45
 8b6:	b7 01       	movw	r22, r14
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 42 02 	call	0x484	; 0x484 <fputc>
 8be:	a5 14       	cp	r10, r5
 8c0:	38 f4       	brcc	.+14     	; 0x8d0 <vfprintf+0x366>
 8c2:	b7 01       	movw	r22, r14
 8c4:	80 e3       	ldi	r24, 0x30	; 48
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 42 02 	call	0x484	; 0x484 <fputc>
 8cc:	5a 94       	dec	r5
 8ce:	f7 cf       	rjmp	.-18     	; 0x8be <vfprintf+0x354>
 8d0:	aa 94       	dec	r10
 8d2:	f4 01       	movw	r30, r8
 8d4:	ea 0d       	add	r30, r10
 8d6:	f1 1d       	adc	r31, r1
 8d8:	80 81       	ld	r24, Z
 8da:	b7 01       	movw	r22, r14
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 42 02 	call	0x484	; 0x484 <fputc>
 8e2:	a1 10       	cpse	r10, r1
 8e4:	f5 cf       	rjmp	.-22     	; 0x8d0 <vfprintf+0x366>
 8e6:	33 20       	and	r3, r3
 8e8:	09 f4       	brne	.+2      	; 0x8ec <vfprintf+0x382>
 8ea:	51 ce       	rjmp	.-862    	; 0x58e <vfprintf+0x24>
 8ec:	b7 01       	movw	r22, r14
 8ee:	80 e2       	ldi	r24, 0x20	; 32
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 42 02 	call	0x484	; 0x484 <fputc>
 8f6:	3a 94       	dec	r3
 8f8:	f6 cf       	rjmp	.-20     	; 0x8e6 <vfprintf+0x37c>
 8fa:	f7 01       	movw	r30, r14
 8fc:	86 81       	ldd	r24, Z+6	; 0x06
 8fe:	97 81       	ldd	r25, Z+7	; 0x07
 900:	02 c0       	rjmp	.+4      	; 0x906 <vfprintf+0x39c>
 902:	8f ef       	ldi	r24, 0xFF	; 255
 904:	9f ef       	ldi	r25, 0xFF	; 255
 906:	2c 96       	adiw	r28, 0x0c	; 12
 908:	e2 e1       	ldi	r30, 0x12	; 18
 90a:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__epilogue_restores__>

0000090e <strnlen_P>:
 90e:	fc 01       	movw	r30, r24
 910:	05 90       	lpm	r0, Z+
 912:	61 50       	subi	r22, 0x01	; 1
 914:	70 40       	sbci	r23, 0x00	; 0
 916:	01 10       	cpse	r0, r1
 918:	d8 f7       	brcc	.-10     	; 0x910 <strnlen_P+0x2>
 91a:	80 95       	com	r24
 91c:	90 95       	com	r25
 91e:	8e 0f       	add	r24, r30
 920:	9f 1f       	adc	r25, r31
 922:	08 95       	ret

00000924 <strnlen>:
 924:	fc 01       	movw	r30, r24
 926:	61 50       	subi	r22, 0x01	; 1
 928:	70 40       	sbci	r23, 0x00	; 0
 92a:	01 90       	ld	r0, Z+
 92c:	01 10       	cpse	r0, r1
 92e:	d8 f7       	brcc	.-10     	; 0x926 <strnlen+0x2>
 930:	80 95       	com	r24
 932:	90 95       	com	r25
 934:	8e 0f       	add	r24, r30
 936:	9f 1f       	adc	r25, r31
 938:	08 95       	ret

0000093a <__ultoa_invert>:
 93a:	fa 01       	movw	r30, r20
 93c:	aa 27       	eor	r26, r26
 93e:	28 30       	cpi	r18, 0x08	; 8
 940:	51 f1       	breq	.+84     	; 0x996 <__ultoa_invert+0x5c>
 942:	20 31       	cpi	r18, 0x10	; 16
 944:	81 f1       	breq	.+96     	; 0x9a6 <__ultoa_invert+0x6c>
 946:	e8 94       	clt
 948:	6f 93       	push	r22
 94a:	6e 7f       	andi	r22, 0xFE	; 254
 94c:	6e 5f       	subi	r22, 0xFE	; 254
 94e:	7f 4f       	sbci	r23, 0xFF	; 255
 950:	8f 4f       	sbci	r24, 0xFF	; 255
 952:	9f 4f       	sbci	r25, 0xFF	; 255
 954:	af 4f       	sbci	r26, 0xFF	; 255
 956:	b1 e0       	ldi	r27, 0x01	; 1
 958:	3e d0       	rcall	.+124    	; 0x9d6 <__ultoa_invert+0x9c>
 95a:	b4 e0       	ldi	r27, 0x04	; 4
 95c:	3c d0       	rcall	.+120    	; 0x9d6 <__ultoa_invert+0x9c>
 95e:	67 0f       	add	r22, r23
 960:	78 1f       	adc	r23, r24
 962:	89 1f       	adc	r24, r25
 964:	9a 1f       	adc	r25, r26
 966:	a1 1d       	adc	r26, r1
 968:	68 0f       	add	r22, r24
 96a:	79 1f       	adc	r23, r25
 96c:	8a 1f       	adc	r24, r26
 96e:	91 1d       	adc	r25, r1
 970:	a1 1d       	adc	r26, r1
 972:	6a 0f       	add	r22, r26
 974:	71 1d       	adc	r23, r1
 976:	81 1d       	adc	r24, r1
 978:	91 1d       	adc	r25, r1
 97a:	a1 1d       	adc	r26, r1
 97c:	20 d0       	rcall	.+64     	; 0x9be <__ultoa_invert+0x84>
 97e:	09 f4       	brne	.+2      	; 0x982 <__ultoa_invert+0x48>
 980:	68 94       	set
 982:	3f 91       	pop	r19
 984:	2a e0       	ldi	r18, 0x0A	; 10
 986:	26 9f       	mul	r18, r22
 988:	11 24       	eor	r1, r1
 98a:	30 19       	sub	r19, r0
 98c:	30 5d       	subi	r19, 0xD0	; 208
 98e:	31 93       	st	Z+, r19
 990:	de f6       	brtc	.-74     	; 0x948 <__ultoa_invert+0xe>
 992:	cf 01       	movw	r24, r30
 994:	08 95       	ret
 996:	46 2f       	mov	r20, r22
 998:	47 70       	andi	r20, 0x07	; 7
 99a:	40 5d       	subi	r20, 0xD0	; 208
 99c:	41 93       	st	Z+, r20
 99e:	b3 e0       	ldi	r27, 0x03	; 3
 9a0:	0f d0       	rcall	.+30     	; 0x9c0 <__ultoa_invert+0x86>
 9a2:	c9 f7       	brne	.-14     	; 0x996 <__ultoa_invert+0x5c>
 9a4:	f6 cf       	rjmp	.-20     	; 0x992 <__ultoa_invert+0x58>
 9a6:	46 2f       	mov	r20, r22
 9a8:	4f 70       	andi	r20, 0x0F	; 15
 9aa:	40 5d       	subi	r20, 0xD0	; 208
 9ac:	4a 33       	cpi	r20, 0x3A	; 58
 9ae:	18 f0       	brcs	.+6      	; 0x9b6 <__ultoa_invert+0x7c>
 9b0:	49 5d       	subi	r20, 0xD9	; 217
 9b2:	31 fd       	sbrc	r19, 1
 9b4:	40 52       	subi	r20, 0x20	; 32
 9b6:	41 93       	st	Z+, r20
 9b8:	02 d0       	rcall	.+4      	; 0x9be <__ultoa_invert+0x84>
 9ba:	a9 f7       	brne	.-22     	; 0x9a6 <__ultoa_invert+0x6c>
 9bc:	ea cf       	rjmp	.-44     	; 0x992 <__ultoa_invert+0x58>
 9be:	b4 e0       	ldi	r27, 0x04	; 4
 9c0:	a6 95       	lsr	r26
 9c2:	97 95       	ror	r25
 9c4:	87 95       	ror	r24
 9c6:	77 95       	ror	r23
 9c8:	67 95       	ror	r22
 9ca:	ba 95       	dec	r27
 9cc:	c9 f7       	brne	.-14     	; 0x9c0 <__ultoa_invert+0x86>
 9ce:	00 97       	sbiw	r24, 0x00	; 0
 9d0:	61 05       	cpc	r22, r1
 9d2:	71 05       	cpc	r23, r1
 9d4:	08 95       	ret
 9d6:	9b 01       	movw	r18, r22
 9d8:	ac 01       	movw	r20, r24
 9da:	0a 2e       	mov	r0, r26
 9dc:	06 94       	lsr	r0
 9de:	57 95       	ror	r21
 9e0:	47 95       	ror	r20
 9e2:	37 95       	ror	r19
 9e4:	27 95       	ror	r18
 9e6:	ba 95       	dec	r27
 9e8:	c9 f7       	brne	.-14     	; 0x9dc <__ultoa_invert+0xa2>
 9ea:	62 0f       	add	r22, r18
 9ec:	73 1f       	adc	r23, r19
 9ee:	84 1f       	adc	r24, r20
 9f0:	95 1f       	adc	r25, r21
 9f2:	a0 1d       	adc	r26, r0
 9f4:	08 95       	ret

000009f6 <__prologue_saves__>:
 9f6:	2f 92       	push	r2
 9f8:	3f 92       	push	r3
 9fa:	4f 92       	push	r4
 9fc:	5f 92       	push	r5
 9fe:	6f 92       	push	r6
 a00:	7f 92       	push	r7
 a02:	8f 92       	push	r8
 a04:	9f 92       	push	r9
 a06:	af 92       	push	r10
 a08:	bf 92       	push	r11
 a0a:	cf 92       	push	r12
 a0c:	df 92       	push	r13
 a0e:	ef 92       	push	r14
 a10:	ff 92       	push	r15
 a12:	0f 93       	push	r16
 a14:	1f 93       	push	r17
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	cd b7       	in	r28, 0x3d	; 61
 a1c:	de b7       	in	r29, 0x3e	; 62
 a1e:	ca 1b       	sub	r28, r26
 a20:	db 0b       	sbc	r29, r27
 a22:	0f b6       	in	r0, 0x3f	; 63
 a24:	f8 94       	cli
 a26:	de bf       	out	0x3e, r29	; 62
 a28:	0f be       	out	0x3f, r0	; 63
 a2a:	cd bf       	out	0x3d, r28	; 61
 a2c:	09 94       	ijmp

00000a2e <__epilogue_restores__>:
 a2e:	2a 88       	ldd	r2, Y+18	; 0x12
 a30:	39 88       	ldd	r3, Y+17	; 0x11
 a32:	48 88       	ldd	r4, Y+16	; 0x10
 a34:	5f 84       	ldd	r5, Y+15	; 0x0f
 a36:	6e 84       	ldd	r6, Y+14	; 0x0e
 a38:	7d 84       	ldd	r7, Y+13	; 0x0d
 a3a:	8c 84       	ldd	r8, Y+12	; 0x0c
 a3c:	9b 84       	ldd	r9, Y+11	; 0x0b
 a3e:	aa 84       	ldd	r10, Y+10	; 0x0a
 a40:	b9 84       	ldd	r11, Y+9	; 0x09
 a42:	c8 84       	ldd	r12, Y+8	; 0x08
 a44:	df 80       	ldd	r13, Y+7	; 0x07
 a46:	ee 80       	ldd	r14, Y+6	; 0x06
 a48:	fd 80       	ldd	r15, Y+5	; 0x05
 a4a:	0c 81       	ldd	r16, Y+4	; 0x04
 a4c:	1b 81       	ldd	r17, Y+3	; 0x03
 a4e:	aa 81       	ldd	r26, Y+2	; 0x02
 a50:	b9 81       	ldd	r27, Y+1	; 0x01
 a52:	ce 0f       	add	r28, r30
 a54:	d1 1d       	adc	r29, r1
 a56:	0f b6       	in	r0, 0x3f	; 63
 a58:	f8 94       	cli
 a5a:	de bf       	out	0x3e, r29	; 62
 a5c:	0f be       	out	0x3f, r0	; 63
 a5e:	cd bf       	out	0x3d, r28	; 61
 a60:	ed 01       	movw	r28, r26
 a62:	08 95       	ret

00000a64 <_exit>:
 a64:	f8 94       	cli

00000a66 <__stop_program>:
 a66:	ff cf       	rjmp	.-2      	; 0xa66 <__stop_program>
